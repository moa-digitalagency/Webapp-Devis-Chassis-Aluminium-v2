{"file_contents":{"main.py":{"content":"from app import create_app, db\nfrom app.models import User, Company, AppSettings\nimport os\nfrom dotenv import load_dotenv\n\n# Load environment variables from .env file\nload_dotenv()\n\napp = create_app()\n\ndef init_database():\n    \"\"\"Initialize the database with default data.\"\"\"\n    with app.app_context():\n        # Create all tables\n        db.create_all()\n        print(\"✓ Database tables created\")\n        \n        # Create default super admin if doesn't exist\n        if not User.query.filter_by(username='superadmin').first():\n            superadmin = User(\n                username='superadmin',\n                full_name='Super Administrateur',\n                email='admin@example.com',\n                role='super_admin',\n                company_id=None\n            )\n            superadmin.set_password('admin123')\n            db.session.add(superadmin)\n            db.session.commit()\n            print(\"✓ Super admin created (username: superadmin, password: admin123)\")\n        \n        # Create default app settings if they don't exist\n        if not AppSettings.query.first():\n            default_settings = [\n                AppSettings(key='app_name', value='PWA Devis Menuiserie'),\n                AppSettings(key='app_version', value='1.0.0'),\n                AppSettings(key='app_title', value='Devis Châssis Aluminium'),\n                AppSettings(key='sendgrid_from_name', value='Devis Menuiserie')\n            ]\n            for setting in default_settings:\n                db.session.add(setting)\n            db.session.commit()\n            print(\"✓ Default app settings created\")\n        \n        print(\"\\n=== Database initialized successfully! ===\")\n        print(\"You can now login with:\")\n        print(\"  Username: superadmin\")\n        print(\"  Password: admin123\")\n        print(\"\\nAccess the application at: http://localhost:5000\")\n\n@app.cli.command()\ndef init_db():\n    \"\"\"Initialize the database (Flask CLI command).\"\"\"\n    init_database()\n\nif __name__ == '__main__':\n    # Auto-initialize database on first run\n    with app.app_context():\n        try:\n            # Check if database exists and has data\n            if not User.query.first():\n                print(\"\\n=== First time setup - Initializing database ===\\n\")\n                init_database()\n        except Exception as e:\n            # Database doesn't exist or tables not created\n            print(\"\\n=== Initializing database ===\\n\")\n            init_database()\n    \n    print(\"\\n=== Starting Flask development server ===\\n\")\n    app.run(host='0.0.0.0', port=5000, debug=True)\n","size_bytes":2579},"populate_workflow_data.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nScript to populate database with complete workflow data from screenshots\n\"\"\"\nimport sys\nsys.path.insert(0, '.')\n\nfrom app import create_app, db\nfrom app.models import ChassisType, ProfileSeries, GlazingType, Finish, Accessory\n\napp = create_app()\n\nwith app.app_context():\n    # Clear existing data\n    print(\"Clearing existing catalog data...\")\n    Accessory.query.delete()\n    Finish.query.delete()\n    GlazingType.query.delete()\n    ProfileSeries.query.delete()\n    ChassisType.query.delete()\n    \n    # 1. Types de châssis (8 types from screenshot 1)\n    print(\"Adding chassis types...\")\n    chassis_types = [\n        ChassisType(name=\"Baie vitrée coulissante\", description=\"Baie vitrée coulissante en aluminium\", min_width=500, max_width=5000, min_height=500, max_height=3000),\n        ChassisType(name=\"Châssis fixe\", description=\"Châssis fixe / verrière\", min_width=200, max_width=5000, min_height=200, max_height=3000),\n        ChassisType(name=\"Fenêtre 1 vantail\", description=\"Fenêtre aluminium avec un seul vantail ouvrant\", min_width=300, max_width=1200, min_height=400, max_height=2000),\n        ChassisType(name=\"Fenêtre 2 vantaux\", description=\"Fenêtre aluminium avec deux vantaux ouvrants\", min_width=600, max_width=2000, min_height=400, max_height=2000),\n        ChassisType(name=\"Fenêtre oscillo-battant\", description=\"Fenêtre aluminium avec système oscillo-battant\", min_width=400, max_width=1500, min_height=500, max_height=2200),\n        ChassisType(name=\"Porte avec imposte\", description=\"Porte aluminium avec imposte vitrée\", min_width=700, max_width=1200, min_height=2000, max_height=2800),\n        ChassisType(name=\"Porte double\", description=\"Porte aluminium à deux vantaux\", min_width=1200, max_width=2000, min_height=2000, max_height=2600),\n        ChassisType(name=\"Porte simple\", description=\"Porte aluminium simple\", min_width=700, max_width=1200, min_height=2000, max_height=2600),\n    ]\n    for ct in chassis_types:\n        db.session.add(ct)\n    \n    # 2. Séries de profilés (3 series from screenshot 3)\n    print(\"Adding profile series...\")\n    series = [\n        ProfileSeries(name=\"Série Fine\", description=\"Profilé élégant pour utilisation standard\", price_per_meter=35.0),\n        ProfileSeries(name=\"Série Renforcée\", description=\"Profilé renforcé pour grandes dimensions\", price_per_meter=45.0),\n        ProfileSeries(name=\"Série Thermique\", description=\"Profilé à rupture de pont thermique, isolation optimale\", price_per_meter=55.0),\n    ]\n    for s in series:\n        db.session.add(s)\n    \n    # 3. Types de vitrage (8 types from screenshot 4)\n    print(\"Adding glazing types...\")\n    glazings = [\n        GlazingType(name=\"10mm - Dépoli\", description=\"Simple 10mm - Teinte Dépoli +25%\", price_per_m2=102.0),\n        GlazingType(name=\"10mm\", description=\"Simple\", price_per_m2=85.0),\n        GlazingType(name=\"4/6/4\", description=\"Double\", price_per_m2=95.0),\n        GlazingType(name=\"4mm\", description=\"Simple\", price_per_m2=45.0),\n        GlazingType(name=\"6/8/6\", description=\"Double\", price_per_m2=115.0),\n        GlazingType(name=\"6mm\", description=\"Simple\", price_per_m2=55.0),\n        GlazingType(name=\"8mm\", description=\"Simple\", price_per_m2=70.0),\n        GlazingType(name=\"Feuilleté 4mm\", description=\"Feuilleté\", price_per_m2=85.0),\n        GlazingType(name=\"Sécurité 6mm\", description=\"Sécurité\", price_per_m2=120.0),\n    ]\n    for g in glazings:\n        db.session.add(g)\n    \n    # 4. Accessoires (13 items from screenshot 5)\n    print(\"Adding accessories...\")\n    accessories = [\n        Accessory(name=\"Charnière invisible (unité)\", unit_price=30.0, incompatible_series=\"\"),\n        Accessory(name=\"Charnière standard (unité)\", unit_price=12.0, incompatible_series=\"\"),\n        Accessory(name=\"Crémone renforcée\", unit_price=55.0, incompatible_series=\"\"),\n        Accessory(name=\"Crémone standard\", unit_price=35.0, incompatible_series=\"\"),\n        Accessory(name=\"Gond réglable (unité)\", unit_price=18.0, incompatible_series=\"\"),\n        Accessory(name=\"Joint d'étanchéité (mètre)\", unit_price=8.0, incompatible_series=\"\"),\n        Accessory(name=\"Poignée avec clé\", unit_price=55.0, incompatible_series=\"\"),\n        Accessory(name=\"Poignée design inox\", unit_price=45.0, incompatible_series=\"\"),\n        Accessory(name=\"Poignée standard aluminium\", unit_price=25.0, incompatible_series=\"\"),\n        Accessory(name=\"Rail de coulissement 2m\", unit_price=65.0, incompatible_series=\"\"),\n        Accessory(name=\"Rail de coulissement 3m\", unit_price=90.0, incompatible_series=\"\"),\n        Accessory(name=\"Serrure 3 points\", unit_price=85.0, incompatible_series=\"\"),\n        Accessory(name=\"Serrure 5 points\", unit_price=125.0, incompatible_series=\"\"),\n    ]\n    for a in accessories:\n        db.session.add(a)\n    \n    # 5. Finitions (10 options from screenshot 6)\n    print(\"Adding finishes...\")\n    finishes = [\n        Finish(name=\"Anodisé bronze\", description=\"Anodisé\", price_coefficient=1.25),\n        Finish(name=\"Anodisé naturel\", description=\"Anodisé\", price_coefficient=1.20),\n        Finish(name=\"Aluminium brut\", description=\"Aluminium Brut - Standard\", price_coefficient=1.0),\n        Finish(name=\"Imitation bois chêne\", description=\"Imitation Bois\", price_coefficient=1.50),\n        Finish(name=\"Imitation bois noyer\", description=\"Imitation Bois\", price_coefficient=1.50),\n        Finish(name=\"RAL personnalisé\", description=\"Thermolaqué - RAL XXXX\", price_coefficient=1.40),\n        Finish(name=\"Thermolaqué blanc\", description=\"Thermolaqué - RAL 9016\", price_coefficient=1.30),\n        Finish(name=\"Thermolaqué gris anthracite\", description=\"Thermolaqué - RAL 7016\", price_coefficient=1.30),\n        Finish(name=\"Thermolaqué noir\", description=\"Thermolaqué - RAL 9005\", price_coefficient=1.30),\n    ]\n    for f in finishes:\n        db.session.add(f)\n    \n    db.session.commit()\n    print(\"\\n✅ Database populated successfully!\")\n    print(f\"  - {len(chassis_types)} chassis types\")\n    print(f\"  - {len(series)} profile series\")\n    print(f\"  - {len(glazings)} glazing types\")\n    print(f\"  - {len(accessories)} accessories\")\n    print(f\"  - {len(finishes)} finishes\")\n","size_bytes":6238},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask-sqlalchemy>=3.1.1\",\n    \"flask>=3.1.2\",\n    \"flask-cors>=6.0.1\",\n    \"pillow>=11.3.0\",\n    \"reportlab>=4.4.4\",\n    \"werkzeug>=3.1.3\",\n    \"flask-migrate>=4.1.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"python-dotenv>=1.1.1\",\n    \"cryptography>=46.0.2\",\n    \"requests>=2.32.5\",\n]\n","size_bytes":428},"replit.md":{"content":"# PWA Devis Menuiserie\n\n## Overview\nPWA Devis Menuiserie is a **multi-tenant SaaS Progressive Web App** for aluminum joinery salespersons. It generates quotes for chassis (windows, doors, bay windows) with automated pricing, PDF generation, offline capability, and **email delivery via SendGrid**. The app supports multiple companies with data isolation, role-based access, and a super admin dashboard for company management and approval workflows. It aims to streamline sales, provide accurate pricing, and ensure business continuity.\n\n## User Preferences\nI prefer iterative development with a focus on clear, modular code. Please prioritize robust error handling and security in all implementations. For any significant architectural changes or new feature implementations, I'd like to be consulted before they are applied. I appreciate detailed explanations for complex solutions. Do not make changes to the `docs/` folder.\n\n## System Architecture\nThe application uses an Application Factory pattern with Flask and modular blueprints. It has a mobile-first, responsive frontend.\n\n-   **Backend**: Python Flask with SQLAlchemy ORM. **Database support**: SQLite (local development, default) or PostgreSQL (production). Features a RESTful API, server-side validation, multi-item quote support, PDF generation with ReportLab, CSV import for tariff updates, **SendGrid email integration**, and a robust authentication system with roles (admin/user/super_admin). It implements a **multi-tenant SaaS architecture** with `company_id` for data isolation and a centralized `settings` table for company-specific configurations.\n    -   **Auto-initialization**: On first run, the database is automatically initialized with tables and a default super admin (username: `superadmin`, password: `admin123`).\n-   **Frontend**: Modern login page and admin dashboards. HTML/CSS/JS provides a guided 8-step quote creation interface with real-time validation and instant price calculation using MAD (Dirham). Supports multi-item quotes with add/edit/delete capabilities. A **hamburger sidebar menu** on admin pages provides access to profile, settings, and other features.\n    -   **Quote Creation Steps**: Product selection, dimensions (with real-time surface calculation), profile series, glazing types, accessories, finishes, client information, and a multi-item summary with total, edit/delete options, and a \"Send by Email\" button.\n-   **UI/UX**: Modern design with rounded borders, a subtle diagonal crosshatch background pattern (2% opacity) on admin pages, a split-screen login page with a gradient background, emoji-enhanced titles, and standardized button styles. Prices are displayed in a blue theme color, and currency is formatted as `1.234,56 MAD`.\n-   **Performance**: Targets sub-0.5s price calculation and sub-2s PDF generation (<500KB).\n-   **Security**: PBKDF2-SHA256 for password hashing, Fernet encryption (AES-128) for sensitive data, server-side validation, role-based access control with company-level data isolation, activity logging, and SendGrid API key managed via Replit Connector.\n-   **Email Integration**: Utilizes a **SendGrid connector** via Replit for sending beautifully formatted HTML emails with quote details. API endpoints include `/api/email/send-quote` and `/api/email/test-connection`. Configurable \"From Name\" via super admin settings.\n-   **SaaS Multi-Tenancy**:\n    -   **Company Model**: Central `companies` table with approval workflow.\n    -   **Data Isolation**: All business data (quotes, settings, users, catalog items) are isolated by `company_id`.\n    -   **Catalog Multi-Tenancy**: Catalog tables include `company_id`. A template catalog is copied to new companies, allowing independent modification.\n    -   **User Isolation**: Admins only see users from their own company.\n    -   **Roles**: Three-tier system (user, admin, super_admin).\n    -   **Super Admin Features**: Company management dashboard with approval capabilities, dedicated profile, app settings (including text customization for `app_title`, `sendgrid_from_name`, etc.), activity logs, and extended statistics. New companies are created via a 2-step wizard.\n    -   **Authentication Flow**: Checks user and company status.\n-   **Data Structure**: Accessories are stored as `{name: quantity}` objects. Multi-item quotes store configurations in a `breakdown.items` array. `User` table includes a mandatory `email` field.\n-   **Offline Functionality**: All CSS/JS files are local, and a Service Worker provides full offline PWA functionality.\n-   **CSS Build System**: Uses Tailwind CSS v4 standalone binary with pure CSS configuration. **100% Python stack - no Node.js or npm required**. Tailwind builds via `./tailwindcss` binary with CSS-based config in `tailwind-input.css`.\n-   **Internationalization (i18n)**: Multi-language support via JSON translation files. Default languages: French (fr) and English (en). Super admins can upload new language files via the admin interface. Languages are stored in `app/locales/` and automatically scanned at startup. API endpoints: `/api/languages/available`, `/api/languages/current`, `/api/languages/set`, `/api/languages/upload`. Frontend includes a language switcher and translation system (`i18n.js`).\n-   **Backup System**: Automated and manual database backup functionality for both SQLite and PostgreSQL. Features include:\n    -   **Manual Backup**: Super admins can create backups on-demand via the dashboard\n    -   **Auto Backup**: Automatic backup before system updates\n    -   **Backup Catalog**: Tracks all backups with metadata (timestamp, size, description, status)\n    -   **Restore Capability**: Restore from any successful backup\n    -   **Storage Management**: Automatic cleanup (keeps last 10 backups by default)\n    -   Service located in `app/services/backup.py`\n    -   API endpoints: `/api/super-admin/backup/create`, `/api/super-admin/backup/list`, `/api/super-admin/backup/restore`\n-   **GitHub Update System**: Automated application updates from GitHub repository with database migration support. Features include:\n    -   **Update Detection**: Checks for available updates from https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\n    -   **Auto Migration**: Runs Flask-Migrate database migrations automatically\n    -   **Dependency Update**: Automatically installs new requirements\n    -   **Git Integration**: Pull updates from specified branch (default: main)\n    -   **Update History**: Tracks all update attempts with detailed logs\n    -   **Rollback Support**: Ability to rollback to previous commits\n    -   **Pre-Update Backup**: Creates automatic backup before updating\n    -   Service located in `app/services/updater.py`\n    -   API endpoints: `/api/super-admin/update/check`, `/api/super-admin/update/perform`, `/api/super-admin/update/history`, `/api/super-admin/update/rollback`\n\n## External Dependencies\n-   **Database**: SQLite (default, local) or PostgreSQL (production, Replit).\n-   **SQLAlchemy**: ORM for database interaction.\n-   **Flask-Migrate**: For database schema migrations.\n-   **ReportLab**: For PDF document generation.\n-   **Requests**: HTTP library.\n-   **SendGrid**: Email delivery service, integrated via Replit Connector.\n-   **python-dotenv**: Environment variable management from `.env` file.\n\n## Installation Support\n-   **Windows**: Fully supported with winget-based installation (Python 3.11, Git, SQLite). Complete instructions in README.md.\n-   **Linux/Mac**: Standard Python venv workflow with SQLite or PostgreSQL.\n-   **Replit**: Native PostgreSQL database support with automatic configuration. The application is fully configured and ready to run on Replit with:\n    -   PostgreSQL database (automatically connected via DATABASE_URL environment variable)\n    -   All Python dependencies installed (Flask, SQLAlchemy, ReportLab, etc.)\n    -   Flask workflow configured to run on port 5000\n    -   Production deployment configured with Gunicorn for autoscaling\n    -   Database auto-initialization on first run with default super admin credentials\n\n## Replit Environment Setup (Completed)\n-   **Database**: PostgreSQL database created and configured\n-   **Python**: Python 3.11 with all required packages installed\n-   **Workflow**: Flask App running on port 5000 (development mode)\n-   **Deployment**: Configured for autoscale deployment with Gunicorn\n-   **Default Credentials**: \n    -   Super Admin: `superadmin` / `admin123`\n    -   Admin: `admin` / `admin123` (if created)","size_bytes":8515},"seed_db.py":{"content":"from app import create_app, db\nfrom app.models import (\n    ChassisType, ProfileSeries, GlazingType, Finish, \n    Accessory, Pricing, Config, User\n)\n\napp = create_app()\n\nwith app.app_context():\n    db.drop_all()\n    db.create_all()\n    \n    chassis_types_data = [\n        {\"name\": \"Baie vitrée coulissante\", \"description\": \"Grande ouverture coulissante\", \"min_width\": 1000, \"max_width\": 5000, \"min_height\": 1000, \"max_height\": 3000},\n        {\"name\": \"Châssis fixe\", \"description\": \"Vitrage fixe sans ouverture\", \"min_width\": 300, \"max_width\": 3000, \"min_height\": 300, \"max_height\": 2500},\n        {\"name\": \"Fenêtre 1/2 vantaux\", \"description\": \"Fenêtre à un ou deux vantaux\", \"min_width\": 500, \"max_width\": 1800, \"min_height\": 500, \"max_height\": 1500},\n        {\"name\": \"Fenêtre oscillo-battant\", \"description\": \"Ouverture en soufflet et battante\", \"min_width\": 500, \"max_width\": 1200, \"min_height\": 600, \"max_height\": 1800},\n        {\"name\": \"Porte avec imposte\", \"description\": \"Porte avec partie vitrée supérieure\", \"min_width\": 800, \"max_width\": 1200, \"min_height\": 2000, \"max_height\": 2800},\n        {\"name\": \"Porte double\", \"description\": \"Deux vantaux\", \"min_width\": 1400, \"max_width\": 2400, \"min_height\": 2000, \"max_height\": 2800},\n        {\"name\": \"Porte simple\", \"description\": \"Un vantail\", \"min_width\": 700, \"max_width\": 1200, \"min_height\": 2000, \"max_height\": 2800}\n    ]\n    \n    for data in chassis_types_data:\n        chassis = ChassisType(**data)\n        db.session.add(chassis)\n    \n    series_data = [\n        {\"name\": \"Série Fine\", \"description\": \"Profilé élégant pour utilisation standard\", \"price_per_meter\": 35.00},\n        {\"name\": \"Série Renforcée\", \"description\": \"Profilé renforcé pour grandes dimensions\", \"price_per_meter\": 45.00},\n        {\"name\": \"Série Thermique\", \"description\": \"Profilé à rupture de pont thermique, isolation optimale\", \"price_per_meter\": 55.00}\n    ]\n    \n    for data in series_data:\n        series = ProfileSeries(**data)\n        db.session.add(series)\n    \n    glazing_data = [\n        {\"name\": \"10mm - Simple\", \"description\": \"Simple vitrage 10mm\", \"thickness_mm\": 10, \"price_per_m2\": 85.00},\n        {\"name\": \"4mm - Simple\", \"description\": \"Simple vitrage 4mm\", \"thickness_mm\": 4, \"price_per_m2\": 45.00},\n        {\"name\": \"6mm - Simple\", \"description\": \"Simple vitrage 6mm\", \"thickness_mm\": 6, \"price_per_m2\": 55.00},\n        {\"name\": \"4/6/4 - Double\", \"description\": \"Double vitrage 4/6/4\", \"thickness_mm\": 14, \"price_per_m2\": 95.00},\n        {\"name\": \"6/8/6 - Double\", \"description\": \"Double vitrage 6/8/6\", \"thickness_mm\": 20, \"price_per_m2\": 115.00},\n        {\"name\": \"8mm - Simple\", \"description\": \"Simple vitrage 8mm\", \"thickness_mm\": 8, \"price_per_m2\": 70.00},\n        {\"name\": \"Feuilleté 4mm - Sécurité\", \"description\": \"Vitrage feuilleté sécurité\", \"thickness_mm\": 8, \"price_per_m2\": 85.00},\n        {\"name\": \"Sécurité 6mm - Dépoli\", \"description\": \"Vitrage sécurité dépoli\", \"thickness_mm\": 6, \"price_per_m2\": 120.00}\n    ]\n    \n    for data in glazing_data:\n        glazing = GlazingType(**data)\n        db.session.add(glazing)\n    \n    finishes_data = [\n        {\"name\": \"Anodisé bronze\", \"description\": \"Finition anodisée bronze\", \"price_coefficient\": 1.25},\n        {\"name\": \"Anodisé naturel\", \"description\": \"Finition anodisée naturelle\", \"price_coefficient\": 1.20},\n        {\"name\": \"Aluminium brut\", \"description\": \"Aluminium brut standard\", \"price_coefficient\": 1.0},\n        {\"name\": \"Imitation bois chêne\", \"description\": \"Aspect bois chêne\", \"price_coefficient\": 1.50},\n        {\"name\": \"Imitation bois noyer\", \"description\": \"Aspect bois noyer\", \"price_coefficient\": 1.50},\n        {\"name\": \"Thermolaqué noir\", \"description\": \"Peinture thermolaquée noir\", \"price_coefficient\": 1.30}\n    ]\n    \n    for data in finishes_data:\n        finish = Finish(**data)\n        db.session.add(finish)\n    \n    accessories_data = [\n        {\"name\": \"Charnière invisible (unité)\", \"unit_price\": 18.00, \"incompatible_series\": None},\n        {\"name\": \"Charnière standard (unité)\", \"unit_price\": 12.00, \"incompatible_series\": None},\n        {\"name\": \"Crémone renforcée\", \"unit_price\": 55.00, \"incompatible_series\": None},\n        {\"name\": \"Crémone standard\", \"unit_price\": 35.00, \"incompatible_series\": None}\n    ]\n    \n    for data in accessories_data:\n        acc = Accessory(**data)\n        db.session.add(acc)\n    \n    pricing_data = [\n        {\"category\": \"labor\", \"subcategory\": None, \"unit\": \"unit\", \"price\": 80.00, \"coefficient\": 1.0}\n    ]\n    \n    for data in pricing_data:\n        pricing = Pricing(**data)\n        db.session.add(pricing)\n    \n    config_data = [\n        {\"key\": \"vat_rate\", \"value\": \"20\"},\n        {\"key\": \"loss_coefficient\", \"value\": \"1.1\"}\n    ]\n    \n    for data in config_data:\n        config = Config(**data)\n        db.session.add(config)\n    \n    admin = User(username='admin', full_name='Administrateur', role='admin')\n    admin.set_password('admin123')\n    db.session.add(admin)\n    \n    db.session.commit()\n    \n    print(\"✅ Database seeded successfully with PostgreSQL!\")\n    print(\"👤 Admin user: admin / admin123\")\n","size_bytes":5169},"app/__init__.py":{"content":"from flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\nfrom flask_cors import CORS\nimport os\n\ndb = SQLAlchemy()\nmigrate = Migrate()\n\nfrom app.i18n import i18n\n\ndef create_app():\n    app = Flask(__name__, \n                template_folder='templates',\n                static_folder='static')\n    \n    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')\n    \n    # Database configuration - SQLite for local, PostgreSQL for production\n    database_url = os.environ.get('DATABASE_URL')\n    if database_url:\n        # Production (Replit/PostgreSQL)\n        app.config['SQLALCHEMY_DATABASE_URI'] = database_url\n        app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {\n            'pool_pre_ping': True,\n            'pool_recycle': 300,\n            'pool_size': 10,\n            'max_overflow': 20\n        }\n    else:\n        # Local development (SQLite)\n        app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///devis_menuiserie.db'\n        app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {}\n    \n    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n    app.config['JSON_AS_ASCII'] = False\n    app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'\n    app.config['SESSION_COOKIE_SECURE'] = False\n    app.config['PERMANENT_SESSION_LIFETIME'] = 86400\n    \n    db.init_app(app)\n    migrate.init_app(app, db)\n    CORS(app)\n    \n    # Initialize i18n\n    i18n.init_app(app)\n    \n    from app.routes import auth, catalog, quotes, users, settings, super_admin, email, languages\n    \n    app.register_blueprint(auth.bp)\n    app.register_blueprint(catalog.bp)\n    app.register_blueprint(quotes.bp)\n    app.register_blueprint(users.bp)\n    app.register_blueprint(settings.bp)\n    app.register_blueprint(super_admin.bp)\n    app.register_blueprint(email.bp)\n    app.register_blueprint(languages.bp)\n    \n    from flask import render_template\n    \n    @app.route('/')\n    def index():\n        return render_template('dashboard.html')\n    \n    @app.route('/dashboard.html')\n    def dashboard():\n        return render_template('dashboard.html')\n    \n    @app.route('/quote.html')\n    def quote():\n        return render_template('quote.html')\n    \n    @app.route('/login.html')\n    def login():\n        return render_template('login.html')\n    \n    @app.route('/settings.html')\n    def settings_page():\n        return render_template('settings.html')\n    \n    @app.route('/profile.html')\n    def profile_page():\n        return render_template('profile.html')\n    \n    @app.route('/super-admin.html')\n    def super_admin_page():\n        return render_template('super_admin.html')\n    \n    @app.route('/super-admin-profile.html')\n    def super_admin_profile_page():\n        return render_template('super_admin_profile.html')\n    \n    @app.route('/super-admin-app-settings.html')\n    def super_admin_app_settings_page():\n        return render_template('super_admin_app_settings.html')\n    \n    @app.route('/super-admin-activity-logs.html')\n    def super_admin_activity_logs_page():\n        return render_template('super_admin_activity_logs.html')\n    \n    @app.route('/sw.js')\n    def service_worker():\n        from flask import send_from_directory\n        return send_from_directory('static', 'sw.js', mimetype='application/javascript')\n    \n    @app.after_request\n    def add_header(response):\n        response.headers['Cache-Control'] = 'no-store, no-cache, must-revalidate, max-age=0'\n        response.headers['Pragma'] = 'no-cache'\n        response.headers['Expires'] = '0'\n        return response\n    \n    return app\n","size_bytes":3568},"app/config.py":{"content":"import os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev-secret-key-change-in-production')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    JSON_AS_ASCII = False\n    \nclass DevelopmentConfig(Config):\n    DEBUG = True\n    \nclass ProductionConfig(Config):\n    DEBUG = False\n    \nconfig = {\n    'development': DevelopmentConfig,\n    'production': ProductionConfig,\n    'default': DevelopmentConfig\n}\n","size_bytes":475},"app/models.py":{"content":"from app import db\nfrom datetime import datetime\nfrom hashlib import pbkdf2_hmac\nimport secrets\n\n\nclass ChassisType(db.Model):\n    __tablename__ = 'chassis_types'\n    __table_args__ = (\n        db.UniqueConstraint('company_id', 'name', name='uq_chassis_types_company_name'),\n    )\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer, db.ForeignKey('companies.id'), nullable=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    min_width = db.Column(db.Integer, nullable=False)\n    max_width = db.Column(db.Integer, nullable=False)\n    min_height = db.Column(db.Integer, nullable=False)\n    max_height = db.Column(db.Integer, nullable=False)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'name': self.name,\n            'description': self.description,\n            'min_width': self.min_width,\n            'max_width': self.max_width,\n            'min_height': self.min_height,\n            'max_height': self.max_height\n        }\n\n\nclass ProfileSeries(db.Model):\n    __tablename__ = 'profile_series'\n    __table_args__ = (\n        db.UniqueConstraint('company_id', 'name', name='uq_profile_series_company_name'),\n    )\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer, db.ForeignKey('companies.id'), nullable=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    price_per_meter = db.Column(db.Float, nullable=False)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'name': self.name,\n            'description': self.description,\n            'price_per_meter': self.price_per_meter\n        }\n\n\nclass GlazingType(db.Model):\n    __tablename__ = 'glazing_types'\n    __table_args__ = (\n        db.UniqueConstraint('company_id', 'name', name='uq_glazing_types_company_name'),\n    )\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer, db.ForeignKey('companies.id'), nullable=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    thickness_mm = db.Column(db.Integer)\n    price_per_m2 = db.Column(db.Float, nullable=False)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'name': self.name,\n            'description': self.description,\n            'thickness_mm': self.thickness_mm,\n            'price_per_m2': self.price_per_m2\n        }\n\n\nclass Finish(db.Model):\n    __tablename__ = 'finishes'\n    __table_args__ = (\n        db.UniqueConstraint('company_id', 'name', name='uq_finishes_company_name'),\n    )\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer, db.ForeignKey('companies.id'), nullable=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    price_coefficient = db.Column(db.Float, nullable=False, default=1.0)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'name': self.name,\n            'description': self.description,\n            'price_coefficient': self.price_coefficient\n        }\n\n\nclass Accessory(db.Model):\n    __tablename__ = 'accessories'\n    __table_args__ = (\n        db.UniqueConstraint('company_id', 'name', name='uq_accessories_company_name'),\n    )\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer, db.ForeignKey('companies.id'), nullable=True)\n    name = db.Column(db.String(100), nullable=False)\n    unit_price = db.Column(db.Float, nullable=False)\n    incompatible_series = db.Column(db.Text)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'name': self.name,\n            'unit_price': self.unit_price,\n            'incompatible_series': self.incompatible_series\n        }\n\n\nclass Pricing(db.Model):\n    __tablename__ = 'pricing'\n\n    id = db.Column(db.Integer, primary_key=True)\n    category = db.Column(db.String(100), nullable=False)\n    subcategory = db.Column(db.String(100))\n    unit = db.Column(db.String(20), nullable=False)\n    price = db.Column(db.Float, nullable=False)\n    coefficient = db.Column(db.Float, default=1.0)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'category': self.category,\n            'subcategory': self.subcategory,\n            'unit': self.unit,\n            'price': self.price,\n            'coefficient': self.coefficient\n        }\n\n\nclass Quote(db.Model):\n    __tablename__ = 'quotes'\n\n    id = db.Column(db.Integer, primary_key=True)\n    quote_number = db.Column(db.String(50), nullable=False, unique=True)\n    quote_date = db.Column(db.String(20), nullable=False)\n    chassis_type = db.Column(db.String(100), nullable=False)\n    width = db.Column(db.Integer, nullable=False)\n    height = db.Column(db.Integer, nullable=False)\n    profile_series = db.Column(db.String(100), nullable=False)\n    glazing_type = db.Column(db.String(100), nullable=False)\n    finish = db.Column(db.String(100), nullable=False)\n    accessories = db.Column(db.Text)\n    discount_percent = db.Column(db.Float, default=0)\n    price_ht = db.Column(db.Float, nullable=False)\n    price_ttc = db.Column(db.Float, nullable=False)\n    details = db.Column(db.Text, nullable=False)\n    company_id = db.Column(db.Integer,\n                           db.ForeignKey('companies.id'),\n                           nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'quote_number': self.quote_number,\n            'quote_date': self.quote_date,\n            'chassis_type': self.chassis_type,\n            'width': self.width,\n            'height': self.height,\n            'profile_series': self.profile_series,\n            'glazing_type': self.glazing_type,\n            'finish': self.finish,\n            'accessories': self.accessories,\n            'discount_percent': self.discount_percent,\n            'price_ht': self.price_ht,\n            'price_ttc': self.price_ttc,\n            'details': self.details,\n            'company_id': self.company_id,\n            'created_at':\n            self.created_at.isoformat() if self.created_at else None\n        }\n\n\nclass Config(db.Model):\n    __tablename__ = 'config'\n\n    key = db.Column(db.String(100), primary_key=True)\n    value = db.Column(db.Text, nullable=False)\n\n    def to_dict(self):\n        return {'key': self.key, 'value': self.value}\n\n\nclass AuditLog(db.Model):\n    __tablename__ = 'audit_log'\n\n    id = db.Column(db.Integer, primary_key=True)\n    action = db.Column(db.String(100), nullable=False)\n    details = db.Column(db.Text)\n    timestamp = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'action': self.action,\n            'details': self.details,\n            'timestamp': self.timestamp.isoformat() if self.timestamp else None\n        }\n\n\nclass User(db.Model):\n    __tablename__ = 'users'\n\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    password_hash = db.Column(db.String(200), nullable=False)\n    full_name = db.Column(db.String(200))\n    email = db.Column(db.String(200), nullable=False)\n    role = db.Column(db.String(20), nullable=False, default='user')\n    company_id = db.Column(db.Integer,\n                           db.ForeignKey('companies.id'),\n                           nullable=True)\n    is_active = db.Column(db.Boolean, default=True, nullable=False)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def set_password(self, password):\n        salt = secrets.token_bytes(32)\n        self.password_hash = salt.hex() + pbkdf2_hmac(\n            'sha256', password.encode(), salt, 100000).hex()\n\n    def check_password(self, password):\n        salt = bytes.fromhex(self.password_hash[:64])\n        stored_hash = self.password_hash[64:]\n        computed_hash = pbkdf2_hmac('sha256', password.encode(), salt,\n                                    100000).hex()\n        return computed_hash == stored_hash\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'username': self.username,\n            'full_name': self.full_name,\n            'email': self.email,\n            'role': self.role,\n            'company_id': self.company_id,\n            'is_active': self.is_active,\n            'created_at':\n            self.created_at.isoformat() if self.created_at else None\n        }\n\n\nclass Setting(db.Model):\n    __tablename__ = 'settings'\n\n    id = db.Column(db.Integer, primary_key=True)\n    section = db.Column(db.String(50), nullable=False)\n    key = db.Column(db.String(100), nullable=False)\n    value = db.Column(db.Text)\n    company_id = db.Column(db.Integer,\n                           db.ForeignKey('companies.id'),\n                           nullable=True)\n\n    __table_args__ = (db.UniqueConstraint('section',\n                                          'key',\n                                          'company_id',\n                                          name='_section_key_company_uc'), )\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'section': self.section,\n            'key': self.key,\n            'value': self.value,\n            'company_id': self.company_id\n        }\n\n\nclass Company(db.Model):\n    __tablename__ = 'companies'\n\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(200), nullable=False, unique=True)\n    status = db.Column(db.String(20), nullable=False, default='pending')\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n    approved_at = db.Column(db.DateTime, nullable=True)\n    approved_by = db.Column(db.Integer,\n                            db.ForeignKey('users.id'),\n                            nullable=True)\n\n    users = db.relationship('User',\n                            foreign_keys='User.company_id',\n                            backref='company',\n                            lazy=True)\n    quotes = db.relationship('Quote',\n                             foreign_keys='Quote.company_id',\n                             backref='company',\n                             lazy=True)\n    settings = db.relationship('Setting',\n                               foreign_keys='Setting.company_id',\n                               backref='company',\n                               lazy=True)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'status': self.status,\n            'created_at':\n            self.created_at.isoformat() if self.created_at else None,\n            'approved_at':\n            self.approved_at.isoformat() if self.approved_at else None,\n            'approved_by': self.approved_by\n        }\n\n\nclass Settings(db.Model):\n    __tablename__ = 'company_settings'\n\n    id = db.Column(db.Integer, primary_key=True)\n    company_id = db.Column(db.Integer,\n                           db.ForeignKey('companies.id'),\n                           nullable=False,\n                           unique=True)\n    company_name = db.Column(db.String(200), nullable=False)\n    address = db.Column(db.Text)\n    phone = db.Column(db.Text)\n    email = db.Column(db.Text)\n    ice = db.Column(db.Text)\n    min_width = db.Column(db.Integer, default=300)\n    max_width = db.Column(db.Integer, default=3000)\n    min_height = db.Column(db.Integer, default=300)\n    max_height = db.Column(db.Integer, default=3000)\n\n    def to_dict(self):\n        from app.crypto_utils import decrypt_data\n        return {\n            'id': self.id,\n            'company_id': self.company_id,\n            'company_name': self.company_name,\n            'address': decrypt_data(self.address) if self.address else '',\n            'phone': decrypt_data(self.phone) if self.phone else '',\n            'email': decrypt_data(self.email) if self.email else '',\n            'ice': decrypt_data(self.ice) if self.ice else '',\n            'min_width': self.min_width or 300,\n            'max_width': self.max_width or 3000,\n            'min_height': self.min_height or 300,\n            'max_height': self.max_height or 3000\n        }\n\n\nclass AppSettings(db.Model):\n    __tablename__ = 'app_settings'\n\n    id = db.Column(db.Integer, primary_key=True)\n    key = db.Column(db.String(100), nullable=False, unique=True)\n    value = db.Column(db.Text)\n    updated_at = db.Column(db.DateTime,\n                           default=datetime.utcnow,\n                           onupdate=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'key': self.key,\n            'value': self.value,\n            'updated_at':\n            self.updated_at.isoformat() if self.updated_at else None\n        }\n\n\nclass ActivityLog(db.Model):\n    __tablename__ = 'activity_logs'\n\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=True)\n    action = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text)\n    ip_address = db.Column(db.String(45))\n    user_agent = db.Column(db.Text)\n    created_at = db.Column(db.DateTime, default=datetime.utcnow)\n\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'user_id': self.user_id,\n            'action': self.action,\n            'description': self.description,\n            'ip_address': self.ip_address,\n            'created_at':\n            self.created_at.isoformat() if self.created_at else None\n        }\n","size_bytes":13803},"docs/API.md":{"content":"# API Documentation - Devis Châssis Aluminium\n\n## Base URL\n```\nhttp://localhost:5000/api\n```\n\n## Authentication\n\nToutes les routes marquées 🔒 nécessitent une authentification via session.\nLes routes marquées 🔑 nécessitent le rôle admin.\n\n### Session Management\nL'authentification utilise les sessions Flask. Après un login réussi, un cookie de session est automatiquement créé.\n\n---\n\n## Endpoints\n\n### 1. Authentication\n\n#### POST /api/auth/login\nConnexion utilisateur\n\n**Request Body:**\n```json\n{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}\n```\n\n**Response 200:**\n```json\n{\n  \"success\": true,\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"full_name\": \"Administrateur\",\n    \"role\": \"admin\",\n    \"created_at\": \"2025-10-03T20:00:00\"\n  }\n}\n```\n\n**Error 401:**\n```json\n{\n  \"error\": \"Invalid credentials\"\n}\n```\n\n---\n\n#### POST /api/auth/logout 🔒\nDéconnexion utilisateur\n\n**Response 200:**\n```json\n{\n  \"success\": true\n}\n```\n\n---\n\n#### GET /api/auth/check\nVérifier le statut d'authentification\n\n**Response 200 (authentifié):**\n```json\n{\n  \"authenticated\": true,\n  \"user\": {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"role\": \"admin\",\n    \"full_name\": \"Administrateur\"\n  }\n}\n```\n\n**Response 200 (non authentifié):**\n```json\n{\n  \"authenticated\": false\n}\n```\n\n---\n\n### 2. Catalog\n\n#### GET /api/catalog/chassis-types\nListe des types de châssis\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"Baie vitrée coulissante\",\n    \"description\": \"Grande ouverture coulissante\",\n    \"min_width\": 1000,\n    \"max_width\": 5000,\n    \"min_height\": 1000,\n    \"max_height\": 3000\n  }\n]\n```\n\n---\n\n#### GET /api/catalog/profile-series\nListe des séries de profilés\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"Série Fine\",\n    \"description\": \"Profilé élégant pour utilisation standard\",\n    \"price_per_meter\": 35.00\n  }\n]\n```\n\n---\n\n#### GET /api/catalog/glazing-types\nListe des types de vitrage\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"10mm - Simple\",\n    \"description\": \"Simple vitrage 10mm\",\n    \"thickness_mm\": 10,\n    \"price_per_m2\": 85.00\n  }\n]\n```\n\n---\n\n#### GET /api/catalog/finishes\nListe des finitions\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"Anodisé bronze\",\n    \"description\": \"Finition anodisée bronze\",\n    \"price_coefficient\": 1.25\n  }\n]\n```\n\n---\n\n#### GET /api/catalog/accessories\nListe des accessoires\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"name\": \"Charnière invisible (unité)\",\n    \"unit_price\": 18.00,\n    \"incompatible_series\": null\n  }\n]\n```\n\n---\n\n#### GET /api/config\nConfiguration générale (TVA, coefficient de pertes)\n\n**Response 200:**\n```json\n{\n  \"vat_rate\": 20.0,\n  \"loss_coefficient\": 1.1\n}\n```\n\n---\n\n### 3. Quotes\n\n#### POST /api/calculate 🔒\nCalcul du prix d'un devis\n\n**Request Body:**\n```json\n{\n  \"width\": 1200,\n  \"height\": 1000,\n  \"chassis_type\": \"Fenêtre 1/2 vantaux\",\n  \"profile_series\": \"Série Fine\",\n  \"glazing_type\": \"4/6/4 - Double\",\n  \"finish\": \"Anodisé bronze\",\n  \"accessories\": [\"Charnière standard (unité)\"],\n  \"discount\": 0\n}\n```\n\n**Response 200:**\n```json\n{\n  \"surface_m2\": 1.200,\n  \"perimeter_m\": 4.40,\n  \"base_surface\": 125.40,\n  \"base_linear\": 154.00,\n  \"accessories\": [\n    {\n      \"name\": \"Charnière standard (unité)\",\n      \"price\": 12.00\n    }\n  ],\n  \"accessories_total\": 12.00,\n  \"finish_coefficient\": 1.25,\n  \"subtotal_with_finish\": 364.25,\n  \"labor\": 80.00,\n  \"total_before_discount\": 444.25,\n  \"discount_percent\": 0,\n  \"discount_amount\": 0.00,\n  \"total_ht\": 444.25,\n  \"vat_rate\": 20.00,\n  \"vat_amount\": 88.85,\n  \"total_ttc\": 533.10\n}\n```\n\n**Error 400:**\n```json\n{\n  \"error\": \"Width must be between 500 and 1800 mm\"\n}\n```\n\n---\n\n#### POST /api/quotes 🔒\nCréer un nouveau devis\n\n**Request Body:**\n```json\n{\n  \"chassis_type\": \"Fenêtre 1/2 vantaux\",\n  \"width\": 1200,\n  \"height\": 1000,\n  \"profile_series\": \"Série Fine\",\n  \"glazing_type\": \"4/6/4 - Double\",\n  \"finish\": \"Anodisé bronze\",\n  \"accessories\": [\"Charnière standard (unité)\"],\n  \"discount\": 0,\n  \"price_ht\": 444.25,\n  \"price_ttc\": 533.10,\n  \"breakdown\": {\n    \"surface_m2\": 1.200,\n    \"total_ttc\": 533.10\n  }\n}\n```\n\n**Response 200:**\n```json\n{\n  \"quote_number\": \"DEV-20251003-0001\",\n  \"quote_id\": 1\n}\n```\n\n---\n\n#### GET /api/quotes/stats 🔒\nStatistiques des devis\n\n**Response 200:**\n```json\n{\n  \"total\": 15,\n  \"thisMonth\": 8,\n  \"totalAmount\": 8500.50,\n  \"avgAmount\": 566.70\n}\n```\n\n---\n\n#### GET /api/quotes/recent?limit=10 🔒\nListe des devis récents\n\n**Query Parameters:**\n- `limit` (optional): Nombre de devis à retourner (défaut: 10)\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"quote_number\": \"DEV-20251003-0001\",\n    \"quote_date\": \"2025-10-03\",\n    \"total_price\": 533.10,\n    \"chassis_type_name\": \"Fenêtre 1/2 vantaux\",\n    \"client_name\": \"Entreprise ABC\",\n    \"created_at\": \"2025-10-03T20:30:00\"\n  }\n]\n```\n\n---\n\n#### GET /api/quotes/{quote_id}/pdf 🔒\nGénérer et télécharger le PDF d'un devis\n\n**Response 200:**\n- Content-Type: application/pdf\n- Content-Disposition: attachment\n- Fichier PDF du devis\n\n**Error 404:**\n```json\n{\n  \"error\": \"Quote not found\"\n}\n```\n\n**Error 507:**\n```json\n{\n  \"error\": \"PDF too large (550.2KB > 500KB limit)\"\n}\n```\n\n---\n\n### 4. Users\n\n#### GET /api/users 🔑\nListe de tous les utilisateurs\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"username\": \"admin\",\n    \"full_name\": \"Administrateur\",\n    \"role\": \"admin\",\n    \"created_at\": \"2025-10-03T20:00:00\"\n  }\n]\n```\n\n---\n\n#### POST /api/users 🔑\nCréer un nouvel utilisateur\n\n**Request Body:**\n```json\n{\n  \"username\": \"john.doe\",\n  \"password\": \"secure_password\",\n  \"full_name\": \"John Doe\",\n  \"role\": \"user\"\n}\n```\n\n**Response 200:**\n```json\n{\n  \"success\": true,\n  \"user\": {\n    \"id\": 2,\n    \"username\": \"john.doe\",\n    \"full_name\": \"John Doe\",\n    \"role\": \"user\",\n    \"created_at\": \"2025-10-03T21:00:00\"\n  }\n}\n```\n\n**Error 400:**\n```json\n{\n  \"error\": \"Username already exists\"\n}\n```\n\n---\n\n#### DELETE /api/users/{user_id} 🔑\nSupprimer un utilisateur\n\n**Response 200:**\n```json\n{\n  \"success\": true,\n  \"message\": \"User deleted\"\n}\n```\n\n**Error 400:**\n```json\n{\n  \"error\": \"Cannot delete your own account\"\n}\n```\n\n---\n\n### 5. Settings\n\n#### GET /api/settings?section=company 🔒\nRécupérer les paramètres\n\n**Query Parameters:**\n- `section` (optional): Filtrer par section (company, quote, pdf, currency, theme)\n\n**Response 200:**\n```json\n[\n  {\n    \"id\": 1,\n    \"section\": \"company\",\n    \"key\": \"name\",\n    \"value\": \"Mon Entreprise\"\n  }\n]\n```\n\n---\n\n#### POST /api/settings 🔑\nMettre à jour les paramètres\n\n**Request Body:**\n```json\n{\n  \"section\": \"company\",\n  \"settings\": {\n    \"name\": \"Mon Entreprise\",\n    \"address\": \"123 Rue Example\",\n    \"phone\": \"+212 5 12 34 56 78\"\n  }\n}\n```\n\n**Response 200:**\n```json\n{\n  \"success\": true\n}\n```\n\n---\n\n## Error Codes\n\n| Code | Description |\n|------|-------------|\n| 200 | Succès |\n| 400 | Mauvaise requête |\n| 401 | Non authentifié |\n| 403 | Accès interdit (admin requis) |\n| 404 | Resource non trouvée |\n| 500 | Erreur serveur |\n| 507 | Fichier trop volumineux |\n\n---\n\n## Data Models\n\n### User\n```typescript\n{\n  id: number\n  username: string\n  full_name: string\n  role: \"admin\" | \"user\"\n  created_at: datetime\n}\n```\n\n### ChassisType\n```typescript\n{\n  id: number\n  name: string\n  description: string\n  min_width: number\n  max_width: number\n  min_height: number\n  max_height: number\n}\n```\n\n### Quote\n```typescript\n{\n  id: number\n  quote_number: string\n  quote_date: string\n  chassis_type: string\n  width: number\n  height: number\n  profile_series: string\n  glazing_type: string\n  finish: string\n  accessories: string[]\n  discount_percent: number\n  price_ht: number\n  price_ttc: number\n  details: object\n  created_at: datetime\n}\n```\n\n---\n\n## Notes\n\n- Tous les montants sont en MAD (Dirham Marocain)\n- Les dimensions sont en millimètres\n- Les surfaces sont en m²\n- Les périmètres sont en mètres\n- La TVA par défaut est de 20%\n","size_bytes":7899},"app/routes/__init__.py":{"content":"# Routes package initialization\n","size_bytes":32},"app/routes/auth.py":{"content":"from flask import Blueprint, request, jsonify, session\nfrom app.models import User\nfrom app import db\nfrom functools import wraps\n\nbp = Blueprint('auth', __name__, url_prefix='/api/auth')\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return jsonify({'error': 'Authentication required'}), 401\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return jsonify({'error': 'Authentication required'}), 401\n        if session.get('role') not in ['admin', 'super_admin']:\n            return jsonify({'error': 'Admin access required'}), 403\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef super_admin_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if 'user_id' not in session:\n            return jsonify({'error': 'Authentication required'}), 401\n        if session.get('role') != 'super_admin':\n            return jsonify({'error': 'Super admin access required'}), 403\n        return f(*args, **kwargs)\n    return decorated_function\n\n@bp.route('/login', methods=['POST'])\ndef login():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    \n    if not username or not password:\n        return jsonify({'error': 'Username and password required'}), 400\n    \n    user = User.query.filter_by(username=username).first()\n    \n    if not user or not user.check_password(password):\n        return jsonify({'error': 'Invalid credentials'}), 401\n    \n    if not user.is_active:\n        return jsonify({'error': 'Account is not active'}), 403\n    \n    if user.role != 'super_admin' and user.company_id:\n        from app.models import Company\n        company = Company.query.get(user.company_id)\n        if not company or company.status != 'approved':\n            return jsonify({'error': 'Company is not approved'}), 403\n    \n    session.permanent = True\n    session['user_id'] = user.id\n    session['username'] = user.username\n    session['role'] = user.role\n    session['full_name'] = user.full_name\n    session['company_id'] = user.company_id\n    \n    return jsonify({\n        'success': True,\n        'user': user.to_dict()\n    })\n\n@bp.route('/logout', methods=['POST'])\ndef logout():\n    session.clear()\n    return jsonify({'success': True})\n\n@bp.route('/check', methods=['GET'])\ndef check():\n    if 'user_id' in session:\n        return jsonify({\n            'authenticated': True,\n            'user': {\n                'id': session.get('user_id'),\n                'username': session.get('username'),\n                'role': session.get('role'),\n                'full_name': session.get('full_name'),\n                'company_id': session.get('company_id')\n            }\n        })\n    return jsonify({'authenticated': False})\n","size_bytes":2946},"app/routes/catalog.py":{"content":"from flask import Blueprint, jsonify, request, session\nfrom app.models import ChassisType, ProfileSeries, GlazingType, Finish, Accessory, Config\nfrom app.routes.auth import login_required, admin_required\nfrom app import db\n\nbp = Blueprint('catalog', __name__, url_prefix='/api/catalog')\n\n@bp.route('/chassis-types', methods=['GET'])\ndef get_chassis_types():\n    company_id = session.get('company_id')\n    chassis_types = ChassisType.query.filter_by(company_id=company_id).all()\n    return jsonify([ct.to_dict() for ct in chassis_types])\n\n@bp.route('/profile-series', methods=['GET'])\ndef get_profile_series():\n    company_id = session.get('company_id')\n    series = ProfileSeries.query.filter_by(company_id=company_id).all()\n    return jsonify([s.to_dict() for s in series])\n\n@bp.route('/glazing-types', methods=['GET'])\ndef get_glazing_types():\n    company_id = session.get('company_id')\n    glazing = GlazingType.query.filter_by(company_id=company_id).all()\n    return jsonify([g.to_dict() for g in glazing])\n\n@bp.route('/finishes', methods=['GET'])\ndef get_finishes():\n    company_id = session.get('company_id')\n    finishes = Finish.query.filter_by(company_id=company_id).all()\n    return jsonify([f.to_dict() for f in finishes])\n\n@bp.route('/accessories', methods=['GET'])\ndef get_accessories():\n    company_id = session.get('company_id')\n    accessories = Accessory.query.filter_by(company_id=company_id).all()\n    return jsonify([a.to_dict() for a in accessories])\n\n@bp.route('/config', methods=['GET'])\ndef get_config():\n    configs = Config.query.all()\n    return jsonify({c.key: float(c.value) for c in configs})\n\n@bp.route('/chassis-types', methods=['POST'])\n@admin_required\ndef create_chassis_type():\n    data = request.json\n    data['company_id'] = session.get('company_id')\n    chassis = ChassisType(**data)\n    db.session.add(chassis)\n    db.session.commit()\n    return jsonify(chassis.to_dict()), 201\n\n@bp.route('/chassis-types/<int:id>', methods=['PUT'])\n@admin_required\ndef update_chassis_type(id):\n    company_id = session.get('company_id')\n    chassis = ChassisType.query.filter_by(id=id, company_id=company_id).first_or_404()\n    data = request.json\n    for key, value in data.items():\n        if key != 'company_id':\n            setattr(chassis, key, value)\n    db.session.commit()\n    return jsonify(chassis.to_dict())\n\n@bp.route('/chassis-types/<int:id>', methods=['DELETE'])\n@admin_required\ndef delete_chassis_type(id):\n    company_id = session.get('company_id')\n    chassis = ChassisType.query.filter_by(id=id, company_id=company_id).first_or_404()\n    db.session.delete(chassis)\n    db.session.commit()\n    return jsonify({'success': True})\n\n@bp.route('/profile-series', methods=['POST'])\n@admin_required\ndef create_profile_series():\n    data = request.json\n    data['company_id'] = session.get('company_id')\n    series = ProfileSeries(**data)\n    db.session.add(series)\n    db.session.commit()\n    return jsonify(series.to_dict()), 201\n\n@bp.route('/profile-series/<int:id>', methods=['PUT'])\n@admin_required\ndef update_profile_series(id):\n    company_id = session.get('company_id')\n    series = ProfileSeries.query.filter_by(id=id, company_id=company_id).first_or_404()\n    data = request.json\n    for key, value in data.items():\n        if key != 'company_id':\n            setattr(series, key, value)\n    db.session.commit()\n    return jsonify(series.to_dict())\n\n@bp.route('/profile-series/<int:id>', methods=['DELETE'])\n@admin_required\ndef delete_profile_series(id):\n    company_id = session.get('company_id')\n    series = ProfileSeries.query.filter_by(id=id, company_id=company_id).first_or_404()\n    db.session.delete(series)\n    db.session.commit()\n    return jsonify({'success': True})\n\n@bp.route('/glazing-types', methods=['POST'])\n@admin_required\ndef create_glazing_type():\n    data = request.json\n    data['company_id'] = session.get('company_id')\n    glazing = GlazingType(**data)\n    db.session.add(glazing)\n    db.session.commit()\n    return jsonify(glazing.to_dict()), 201\n\n@bp.route('/glazing-types/<int:id>', methods=['PUT'])\n@admin_required\ndef update_glazing_type(id):\n    company_id = session.get('company_id')\n    glazing = GlazingType.query.filter_by(id=id, company_id=company_id).first_or_404()\n    data = request.json\n    for key, value in data.items():\n        if key != 'company_id':\n            setattr(glazing, key, value)\n    db.session.commit()\n    return jsonify(glazing.to_dict())\n\n@bp.route('/glazing-types/<int:id>', methods=['DELETE'])\n@admin_required\ndef delete_glazing_type(id):\n    company_id = session.get('company_id')\n    glazing = GlazingType.query.filter_by(id=id, company_id=company_id).first_or_404()\n    db.session.delete(glazing)\n    db.session.commit()\n    return jsonify({'success': True})\n\n@bp.route('/finishes', methods=['POST'])\n@admin_required\ndef create_finish():\n    data = request.json\n    data['company_id'] = session.get('company_id')\n    finish = Finish(**data)\n    db.session.add(finish)\n    db.session.commit()\n    return jsonify(finish.to_dict()), 201\n\n@bp.route('/finishes/<int:id>', methods=['PUT'])\n@admin_required\ndef update_finish(id):\n    company_id = session.get('company_id')\n    finish = Finish.query.filter_by(id=id, company_id=company_id).first_or_404()\n    data = request.json\n    for key, value in data.items():\n        if key != 'company_id':\n            setattr(finish, key, value)\n    db.session.commit()\n    return jsonify(finish.to_dict())\n\n@bp.route('/finishes/<int:id>', methods=['DELETE'])\n@admin_required\ndef delete_finish(id):\n    company_id = session.get('company_id')\n    finish = Finish.query.filter_by(id=id, company_id=company_id).first_or_404()\n    db.session.delete(finish)\n    db.session.commit()\n    return jsonify({'success': True})\n\n@bp.route('/accessories', methods=['POST'])\n@admin_required\ndef create_accessory():\n    data = request.json\n    data['company_id'] = session.get('company_id')\n    accessory = Accessory(**data)\n    db.session.add(accessory)\n    db.session.commit()\n    return jsonify(accessory.to_dict()), 201\n\n@bp.route('/accessories/<int:id>', methods=['PUT'])\n@admin_required\ndef update_accessory(id):\n    company_id = session.get('company_id')\n    accessory = Accessory.query.filter_by(id=id, company_id=company_id).first_or_404()\n    data = request.json\n    for key, value in data.items():\n        if key != 'company_id':\n            setattr(accessory, key, value)\n    db.session.commit()\n    return jsonify(accessory.to_dict())\n\n@bp.route('/accessories/<int:id>', methods=['DELETE'])\n@admin_required\ndef delete_accessory(id):\n    company_id = session.get('company_id')\n    accessory = Accessory.query.filter_by(id=id, company_id=company_id).first_or_404()\n    db.session.delete(accessory)\n    db.session.commit()\n    return jsonify({'success': True})\n","size_bytes":6794},"app/routes/quotes.py":{"content":"from flask import Blueprint, request, jsonify\nfrom app.models import Quote, ChassisType, ProfileSeries, GlazingType, Finish, Accessory, Config, Setting\nfrom app.routes.auth import login_required\nfrom app import db\nfrom datetime import datetime\nimport json\nimport io\nfrom reportlab.lib.pagesizes import A4\nfrom reportlab.lib import colors\nfrom reportlab.lib.units import mm\nfrom reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer\nfrom reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle\nfrom reportlab.lib.enums import TA_CENTER, TA_RIGHT\nfrom flask import send_file\n\nbp = Blueprint('quotes', __name__, url_prefix='/api/quotes')\n\n@bp.route('/calculate', methods=['POST'])\n@login_required\ndef calculate_price():\n    data = request.json or {}\n    \n    # Validate and convert required fields\n    try:\n        width_mm = float(data.get('width', 0))\n        height_mm = float(data.get('height', 0))\n    except (ValueError, TypeError):\n        return jsonify({'error': 'Width and height must be valid numbers'}), 400\n    \n    if width_mm <= 0 or height_mm <= 0:\n        return jsonify({'error': 'Width and height must be greater than 0'}), 400\n    \n    chassis_type = data.get('chassisType')\n    profile_series = data.get('profileSeries')\n    glazing_type = data.get('glazingType')\n    finish = data.get('finish')\n    accessories = data.get('accessories', {})\n    discount = data.get('discount', 0)\n    \n    if not chassis_type:\n        return jsonify({'error': 'Chassis type is required'}), 400\n    \n    chassis_limits = ChassisType.query.filter_by(name=chassis_type).first()\n    if not chassis_limits:\n        return jsonify({'error': f'Invalid chassis type: {chassis_type}'}), 400\n    \n    if not (chassis_limits.min_width <= width_mm <= chassis_limits.max_width):\n        return jsonify({'error': f'Width must be between {chassis_limits.min_width} and {chassis_limits.max_width} mm'}), 400\n    if not (chassis_limits.min_height <= height_mm <= chassis_limits.max_height):\n        return jsonify({'error': f'Height must be between {chassis_limits.min_height} and {chassis_limits.max_height} mm'}), 400\n    \n    surface_m2 = (width_mm * height_mm) / 1000000\n    perimeter_m = 2 * (width_mm + height_mm) / 1000\n    \n    vat_config = Config.query.filter_by(key='vat_rate').first()\n    loss_config = Config.query.filter_by(key='loss_coefficient').first()\n    \n    vat_rate = float(vat_config.value) / 100 if vat_config else 0.20\n    loss_coef = float(loss_config.value) if loss_config else 1.1\n    \n    glazing_obj = GlazingType.query.filter_by(name=glazing_type).first()\n    surface_price = glazing_obj.price_per_m2 if glazing_obj else 100.0\n    \n    profile_obj = ProfileSeries.query.filter_by(name=profile_series).first()\n    linear_price = profile_obj.price_per_meter if profile_obj else 50.0\n    \n    finish_obj = Finish.query.filter_by(name=finish).first()\n    finish_coef = finish_obj.price_coefficient if finish_obj else 1.0\n    \n    base_surface = surface_m2 * surface_price * loss_coef\n    base_linear = perimeter_m * linear_price\n    \n    accessories_total = 0\n    accessories_detail = []\n    # accessories is now a dict: {accessoryName: quantity}\n    for acc_name, quantity in accessories.items():\n        acc_obj = Accessory.query.filter_by(name=acc_name).first()\n        if acc_obj and quantity > 0:\n            price = acc_obj.unit_price * quantity\n            accessories_total += price\n            accessories_detail.append({\n                'name': acc_name,\n                'quantity': quantity,\n                'unit_price': round(acc_obj.unit_price, 2),\n                'total_price': round(price, 2)\n            })\n    \n    subtotal = (base_surface + base_linear + accessories_total) * finish_coef\n    \n    labor_config = Config.query.filter_by(key='labor_cost').first()\n    labor_price = float(labor_config.value) if labor_config else 50.0\n    \n    total_before_discount = subtotal + labor_price\n    discount_amount = total_before_discount * (discount / 100)\n    total_ht = total_before_discount - discount_amount\n    total_ttc = total_ht * (1 + vat_rate)\n    \n    breakdown = {\n        'surface_m2': round(surface_m2, 3),\n        'perimeter_m': round(perimeter_m, 2),\n        'base_price': round(base_surface + base_linear, 2),\n        'glazing_cost': round(base_surface, 2),\n        'profile_cost': round(base_linear, 2),\n        'accessories': accessories_detail,\n        'accessories_cost': round(accessories_total, 2),\n        'finish_coefficient': finish_coef,\n        'finish_supplement': round((base_surface + base_linear) * (finish_coef - 1), 2),\n        'subtotal': round(subtotal, 2),\n        'labor': round(labor_price, 2),\n        'total_before_discount': round(total_before_discount, 2),\n        'discount_percent': discount,\n        'discount_amount': round(discount_amount, 2),\n        'total_ht': round(total_ht, 2),\n        'vat_rate': round(vat_rate * 100, 2),\n        'vat_amount': round(total_ttc - total_ht, 2),\n        'total_price': round(total_ttc, 2)\n    }\n    \n    return jsonify(breakdown)\n\n@bp.route('', methods=['POST'])\n@login_required\ndef create_quote():\n    from flask import session\n    data = request.json or {}\n    breakdown = data.get('breakdown', {})\n    \n    company_id = session.get('company_id')\n    \n    today = datetime.now().strftime('%Y%m%d')\n    quote_date = datetime.now().strftime('%Y-%m-%d')\n    \n    # Get the last quote number for today to avoid duplicates\n    prefix = f\"DEV-{today}-\"\n    if company_id:\n        last_quote = Quote.query.filter(\n            Quote.company_id == company_id,\n            Quote.quote_number.like(f\"{prefix}%\")\n        ).order_by(Quote.quote_number.desc()).first()\n    else:\n        last_quote = Quote.query.filter(\n            Quote.company_id.is_(None),\n            Quote.quote_number.like(f\"{prefix}%\")\n        ).order_by(Quote.quote_number.desc()).first()\n    \n    if last_quote:\n        # Extract the sequence number and increment\n        last_number = int(last_quote.quote_number.split('-')[-1])\n        quote_number = f\"{prefix}{last_number + 1:04d}\"\n    else:\n        # First quote of the day\n        quote_number = f\"{prefix}0001\"\n    \n    # Store accessories as JSON with quantities\n    accessories_data = data.get('accessories', {})\n    \n    # Create details with client info\n    details = {\n        **breakdown,\n        'client_name': data.get('clientName', ''),\n        'client_email': data.get('clientEmail', ''),\n        'client_phone': data.get('clientPhone', ''),\n        'client_notes': data.get('clientNotes', '')\n    }\n    \n    quote = Quote(\n        quote_number=quote_number,\n        quote_date=quote_date,\n        chassis_type=data.get('chassisType', ''),\n        width=data.get('width', 0),\n        height=data.get('height', 0),\n        profile_series=data.get('profileSeries', ''),\n        glazing_type=data.get('glazingType', ''),\n        finish=data.get('finish', ''),\n        accessories=json.dumps(accessories_data),\n        discount_percent=data.get('discount', 0),\n        price_ht=breakdown.get('total_ht', 0),\n        price_ttc=breakdown.get('total_price', 0),\n        details=json.dumps(details),\n        company_id=company_id\n    )\n    \n    db.session.add(quote)\n    db.session.commit()\n    \n    return jsonify({'quote_number': quote_number, 'quote_id': quote.id})\n\n@bp.route('/stats', methods=['GET'])\n@login_required\ndef get_quotes_stats():\n    from flask import session\n    from datetime import timedelta\n    company_id = session.get('company_id')\n    role = session.get('role')\n    \n    if role == 'super_admin':\n        query = Quote.query\n    elif company_id:\n        query = Quote.query.filter_by(company_id=company_id)\n    else:\n        query = Quote.query.filter_by(company_id=None)\n    \n    total = query.count()\n    \n    now = datetime.now()\n    current_month = now.strftime('%Y-%m')\n    this_month_quotes = query.filter(Quote.quote_date.like(f'{current_month}%')).all()\n    this_month_count = len(this_month_quotes)\n    this_month_amount = sum(q.price_ttc for q in this_month_quotes)\n    \n    week_start = (now - timedelta(days=now.weekday())).strftime('%Y-%m-%d')\n    this_week_quotes = query.filter(Quote.quote_date >= week_start).all()\n    this_week_count = len(this_week_quotes)\n    this_week_amount = sum(q.price_ttc for q in this_week_quotes)\n    \n    if role == 'super_admin':\n        total_amount = db.session.query(db.func.sum(Quote.price_ttc)).scalar() or 0\n    else:\n        total_amount = db.session.query(db.func.sum(Quote.price_ttc)).filter(\n            Quote.company_id == company_id\n        ).scalar() or 0\n    \n    total_items = 0\n    top_client = None\n    \n    all_quotes = query.all()\n    \n    if all_quotes:\n        client_count = {}\n        \n        for quote in all_quotes:\n            try:\n                details = json.loads(quote.details) if quote.details else {}\n                items = details.get('items', [])\n                total_items += len(items) if items else 1\n                \n                client_name = details.get('client_name', '')\n                if client_name and client_name != '-':\n                    client_count[client_name] = client_count.get(client_name, 0) + 1\n            except:\n                total_items += 1\n        \n        if client_count:\n            top_client = max(client_count.items(), key=lambda x: x[1])[0]\n    \n    return jsonify({\n        'total': total,\n        'totalAmount': round(total_amount, 2),\n        'thisMonth': this_month_count,\n        'thisMonthAmount': round(this_month_amount, 2),\n        'thisWeek': this_week_count,\n        'thisWeekAmount': round(this_week_amount, 2),\n        'totalItems': total_items,\n        'topClient': top_client or '-'\n    })\n\n@bp.route('/recent', methods=['GET'])\n@login_required\ndef get_recent_quotes():\n    from flask import session\n    limit = request.args.get('limit', 10, type=int)\n    company_id = session.get('company_id')\n    role = session.get('role')\n    \n    if role == 'super_admin':\n        query = Quote.query\n    elif company_id:\n        query = Quote.query.filter_by(company_id=company_id)\n    else:\n        query = Quote.query.filter_by(company_id=None)\n    \n    quotes = query.order_by(Quote.created_at.desc()).limit(limit).all()\n    \n    result = []\n    for quote in quotes:\n        try:\n            details = json.loads(quote.details) if quote.details else {}\n            client_name = details.get('client_name', '-')\n        except:\n            client_name = '-'\n        \n        chassis_type_obj = ChassisType.query.filter_by(name=quote.chassis_type).first()\n        chassis_type_name = chassis_type_obj.name if chassis_type_obj else quote.chassis_type\n            \n        result.append({\n            'id': quote.id,\n            'quote_number': quote.quote_number,\n            'quote_date': quote.quote_date,\n            'total_price': round(quote.price_ttc, 2),\n            'chassis_type_name': chassis_type_name,\n            'client_name': client_name,\n            'created_at': quote.created_at.isoformat() if quote.created_at else None\n        })\n    \n    return jsonify(result)\n\n@bp.route('/<int:quote_id>', methods=['GET'])\n@login_required\ndef get_quote(quote_id):\n    from flask import session\n    quote = Quote.query.get_or_404(quote_id)\n    \n    company_id = session.get('company_id')\n    role = session.get('role')\n    \n    if role != 'super_admin' and quote.company_id != company_id:\n        return jsonify({'error': 'Access denied'}), 403\n    \n    try:\n        details = json.loads(quote.details) if quote.details else {}\n        accessories = json.loads(quote.accessories) if quote.accessories else {}\n        \n        return jsonify({\n            'id': quote.id,\n            'quote_number': quote.quote_number,\n            'quote_date': quote.quote_date,\n            'chassis_type': quote.chassis_type,\n            'width': quote.width,\n            'height': quote.height,\n            'profile_series': quote.profile_series,\n            'glazing_type': quote.glazing_type,\n            'finish': quote.finish,\n            'accessories': accessories,\n            'discount_percent': quote.discount_percent,\n            'price_ht': quote.price_ht,\n            'price_ttc': quote.price_ttc,\n            'details': details,\n            'created_at': quote.created_at.isoformat() if quote.created_at else None\n        }), 200\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@bp.route('/<int:quote_id>', methods=['DELETE'])\n@login_required\ndef delete_quote(quote_id):\n    from flask import session\n    quote = Quote.query.get_or_404(quote_id)\n    \n    company_id = session.get('company_id')\n    role = session.get('role')\n    \n    if role != 'super_admin' and quote.company_id != company_id:\n        return jsonify({'error': 'Access denied'}), 403\n    \n    try:\n        db.session.delete(quote)\n        db.session.commit()\n        return jsonify({'message': 'Quote deleted successfully'}), 200\n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@bp.route('/<int:quote_id>/pdf', methods=['GET'])\n@login_required\ndef generate_pdf(quote_id):\n    from flask import session\n    quote = Quote.query.get_or_404(quote_id)\n    \n    company_id = session.get('company_id')\n    role = session.get('role')\n    \n    if role != 'super_admin' and quote.company_id != company_id:\n        return jsonify({'error': 'Access denied'}), 403\n    \n    # Get company info from settings\n    company_settings = Setting.query.filter_by(section='company', company_id=quote.company_id).all()\n    company_info = {s.key: s.value for s in company_settings}\n    \n    buffer = io.BytesIO()\n    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=20*mm, leftMargin=20*mm, topMargin=15*mm, bottomMargin=20*mm)\n    \n    elements = []\n    styles = getSampleStyleSheet()\n    \n    # Header with new layout\n    breakdown = json.loads(quote.details)\n    \n    # Style for large quote number\n    quote_number_style = ParagraphStyle(\n        'QuoteNumber',\n        parent=styles['Normal'],\n        fontSize=22,\n        textColor=colors.HexColor('#1a5490'),\n        fontName='Helvetica-Bold',\n        leading=26\n    )\n    \n    # Company info (left side)\n    company_name = company_info.get('company_name', 'MENUISERIE ALUMINIUM')\n    company_address = company_info.get('company_address', '')\n    company_phone = company_info.get('company_phone', '')\n    company_email = company_info.get('company_email', '')\n    \n    company_text = f\"<b>{company_name}</b><br/>\"\n    if company_address:\n        company_text += f\"{company_address}<br/>\"\n    if company_phone:\n        company_text += f\"Tél: {company_phone}<br/>\"\n    if company_email:\n        company_text += f\"Email: {company_email}\"\n    \n    # Client info (right side)\n    client_name = breakdown.get('client_name', '')\n    client_email = breakdown.get('client_email', '')\n    client_phone = breakdown.get('client_phone', '')\n    \n    client_text = \"<b>CLIENT</b><br/>\"\n    if client_name:\n        client_text += f\"{client_name}<br/>\"\n    if client_phone:\n        client_text += f\"Tél: {client_phone}<br/>\"\n    if client_email:\n        client_text += f\"Email: {client_email}\"\n    \n    # Date and validity (right side, bottom aligned)\n    date_validity_style = ParagraphStyle(\n        'DateValidity',\n        parent=styles['Normal'],\n        fontSize=9,\n        alignment=TA_RIGHT\n    )\n    \n    date_validity_text = f\"<b>Date:</b> {quote.quote_date}<br/><b>Validité:</b> 30 jours\"\n    \n    # Build header as 2-row, 2-column table\n    # Row 1: Devis N° (left) | Date/Validité (right)\n    # Row 2: Info Entreprise (left) | Info Client (right)\n    \n    header_data = [\n        [\n            Paragraph(f\"Devis N°: {quote.quote_number}\", quote_number_style),\n            Paragraph(date_validity_text, date_validity_style)\n        ],\n        [\n            Paragraph(company_text, styles['Normal']),\n            Paragraph(client_text, styles['Normal'])\n        ]\n    ]\n    \n    header_table = Table(header_data, colWidths=[85*mm, 85*mm])\n    header_table.setStyle(TableStyle([\n        ('LEFTPADDING', (0, 0), (0, -1), 0),\n        ('RIGHTPADDING', (1, 0), (1, -1), 0),\n        ('VALIGN', (0, 0), (-1, -1), 'TOP'),\n        ('FONTSIZE', (0, 1), (0, 1), 9),\n        ('FONTSIZE', (1, 1), (1, 1), 9),\n        ('TOPPADDING', (0, 1), (-1, 1), 8),\n    ]))\n    \n    elements.append(header_table)\n    elements.append(Spacer(1, 10*mm))\n    \n    # Check if this is a multi-item quote\n    items = breakdown.get('items', [])\n    \n    if items:\n        # Multi-item quote\n        elements.append(Paragraph('Articles du devis', styles['Heading2']))\n        elements.append(Spacer(1, 5*mm))\n        \n        # Create summary table with all items\n        summary_data = [['#', 'Type', 'Dimensions', 'Qté', 'Prix (MAD)']]\n        \n        for idx, item in enumerate(items, 1):\n            item_type = item.get('chassisType', '')\n            dimensions = f\"{item.get('width', 0)} × {item.get('height', 0)} mm\"\n            item_breakdown = item.get('breakdown', {})\n            quantity = item.get('quantity', 1)\n            unit_price = item_breakdown.get('total_price', 0)\n            total_price = unit_price * quantity\n            price = f\"{total_price:.2f}\"\n            summary_data.append([str(idx), item_type, dimensions, str(quantity), price])\n        \n        summary_table = Table(summary_data, colWidths=[12*mm, 55*mm, 45*mm, 15*mm, 35*mm])\n        summary_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, -1), 9),\n            ('ALIGN', (0, 0), (0, -1), 'CENTER'),\n            ('ALIGN', (3, 0), (3, -1), 'RIGHT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),\n            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f0f0f0')),\n            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),\n            ('TOPPADDING', (0, 0), (-1, -1), 8),\n        ]))\n        elements.append(summary_table)\n        elements.append(Spacer(1, 10*mm))\n        \n        # Detailed section for each item\n        for idx, item in enumerate(items, 1):\n            elements.append(Paragraph(f'Article {idx} - {item.get(\"chassisType\", \"\")}', styles['Heading3']))\n            elements.append(Spacer(1, 3*mm))\n            \n            accessories_dict = item.get('accessories', {})\n            accessories_list = [f\"{name} (Qté: {qty})\" for name, qty in accessories_dict.items()]\n            accessories_text = ', '.join(accessories_list) if accessories_list else 'Aucun'\n            \n            item_breakdown = item.get('breakdown', {})\n            quantity = item.get('quantity', 1)\n            details_data = [\n                ['Type de châssis:', Paragraph(item.get('chassisType', ''), styles['Normal'])],\n                ['Dimensions:', f\"{item.get('width', 0)} mm × {item.get('height', 0)} mm\"],\n                ['Surface:', f\"{item_breakdown.get('surface_m2', 0)} m²\"],\n                ['Périmètre:', f\"{item_breakdown.get('perimeter_m', 0)} m\"],\n                ['Série de profilés:', Paragraph(item.get('profileSeries', ''), styles['Normal'])],\n                ['Type de vitrage:', Paragraph(item.get('glazingType', ''), styles['Normal'])],\n                ['Finition:', Paragraph(item.get('finish', ''), styles['Normal'])],\n                ['Accessoires:', Paragraph(accessories_text, styles['Normal'])],\n                ['Quantité:', str(quantity)]\n            ]\n            \n            details_table = Table(details_data, colWidths=[50*mm, 120*mm])\n            details_table.setStyle(TableStyle([\n                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),\n                ('FONTSIZE', (0, 0), (-1, -1), 9),\n                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),\n                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),\n                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),\n                ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),\n            ]))\n            elements.append(details_table)\n            elements.append(Spacer(1, 5*mm))\n            \n            # Price breakdown for this item\n            item_breakdown = item.get('breakdown', {})\n            unit_price = item_breakdown.get('total_price', 0)\n            total_item_price = unit_price * quantity\n            item_price_data = [\n                ['Prix de base', f\"{item_breakdown.get('base_price', 0):.2f} MAD\"],\n                ['Vitrage', f\"{item_breakdown.get('glazing_cost', 0):.2f} MAD\"],\n                ['Accessoires', f\"{item_breakdown.get('accessories_cost', 0):.2f} MAD\"],\n                ['Supplément finition', f\"{item_breakdown.get('finish_supplement', 0):.2f} MAD\"],\n                ['Prix unitaire', f\"{unit_price:.2f} MAD\"],\n                ['Quantité', f\"× {quantity}\"],\n                ['Total article', f\"{total_item_price:.2f} MAD\"]\n            ]\n            \n            item_price_table = Table(item_price_data, colWidths=[120*mm, 50*mm])\n            item_price_table.setStyle(TableStyle([\n                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),\n                ('FONTSIZE', (0, 0), (-1, -1), 9),\n                ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n                ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),\n                ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#e0e0e0')),\n                ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),\n                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),\n                ('TOPPADDING', (0, 0), (-1, -1), 6),\n            ]))\n            elements.append(item_price_table)\n            elements.append(Spacer(1, 8*mm))\n        \n        # Global total\n        elements.append(Paragraph('Total du devis', styles['Heading2']))\n        elements.append(Spacer(1, 5*mm))\n        \n        total_price = sum(item.get('breakdown', {}).get('total_price', 0) * item.get('quantity', 1) for item in items)\n        total_data = [\n            ['TOTAL TTC', f\"{total_price:.2f} MAD\"]\n        ]\n        \n        total_table = Table(total_data, colWidths=[120*mm, 50*mm])\n        total_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, -1), 12),\n            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#3B82F6')),\n            ('TEXTCOLOR', (0, 0), (-1, -1), colors.white),\n            ('BOTTOMPADDING', (0, 0), (-1, -1), 10),\n            ('TOPPADDING', (0, 0), (-1, -1), 10),\n        ]))\n        elements.append(total_table)\n        \n    else:\n        # Single-item quote (backwards compatibility)\n        elements.append(Paragraph('Détails du châssis', styles['Heading2']))\n        elements.append(Spacer(1, 5*mm))\n        \n        accessories_dict = json.loads(quote.accessories) if quote.accessories else {}\n        accessories_list = [f\"{name} (Qté: {qty})\" for name, qty in accessories_dict.items()]\n        accessories_text = ', '.join(accessories_list) if accessories_list else 'Aucun'\n        \n        details_data = [\n            ['Type de châssis:', Paragraph(quote.chassis_type, styles['Normal'])],\n            ['Dimensions:', f\"{quote.width} mm × {quote.height} mm\"],\n            ['Surface:', f\"{breakdown['surface_m2']} m²\"],\n            ['Périmètre:', f\"{breakdown['perimeter_m']} m\"],\n            ['Série de profilés:', Paragraph(quote.profile_series, styles['Normal'])],\n            ['Type de vitrage:', Paragraph(quote.glazing_type, styles['Normal'])],\n            ['Finition:', Paragraph(quote.finish, styles['Normal'])],\n            ['Accessoires:', Paragraph(accessories_text, styles['Normal'])]\n        ]\n        \n        details_table = Table(details_data, colWidths=[50*mm, 120*mm])\n        details_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),\n            ('FONTSIZE', (0, 0), (-1, -1), 9),\n            ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),\n            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('BOTTOMPADDING', (0, 0), (-1, -1), 6),\n            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),\n            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#f0f0f0')),\n        ]))\n        elements.append(details_table)\n        elements.append(Spacer(1, 10*mm))\n        \n        elements.append(Paragraph('Détail du prix', styles['Heading2']))\n        elements.append(Spacer(1, 5*mm))\n        \n        price_data = [\n            ['Description', 'Montant (MAD)'],\n            ['Prix de base', f\"{breakdown.get('base_price', 0):.2f} MAD\"],\n            ['Vitrage', f\"{breakdown.get('glazing_cost', 0):.2f} MAD\"],\n            ['Accessoires', f\"{breakdown.get('accessories_cost', 0):.2f} MAD\"],\n            ['Supplément finition', f\"{breakdown.get('finish_supplement', 0):.2f} MAD\"],\n            ['Total TTC', f\"{breakdown.get('total_price', 0):.2f} MAD\"]\n        ]\n        \n        price_table = Table(price_data, colWidths=[120*mm, 50*mm])\n        price_table.setStyle(TableStyle([\n            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),\n            ('FONTSIZE', (0, 0), (-1, -1), 9),\n            ('ALIGN', (1, 0), (1, -1), 'RIGHT'),\n            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),\n            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),\n            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#f0f0f0')),\n            ('BACKGROUND', (0, -1), (-1, -1), colors.HexColor('#e0e0e0')),\n            ('FONTNAME', (0, -1), (-1, -1), 'Helvetica-Bold'),\n            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),\n            ('TOPPADDING', (0, 0), (-1, -1), 8),\n        ]))\n        elements.append(price_table)\n    \n    doc.build(elements)\n    buffer.seek(0)\n    \n    pdf_size = len(buffer.getvalue())\n    if pdf_size > 500000:\n        return jsonify({'error': f'PDF too large ({pdf_size/1000:.1f}KB > 500KB limit)'}), 507\n    \n    return send_file(buffer, mimetype='application/pdf', as_attachment=True, download_name=f'devis_{quote.quote_number}.pdf')\n","size_bytes":26091},"app/routes/settings.py":{"content":"from flask import Blueprint, request, jsonify\nfrom app.models import Setting\nfrom app.routes.auth import login_required, admin_required\nfrom app import db\n\nbp = Blueprint('settings', __name__, url_prefix='/api/settings')\n\n@bp.route('', methods=['GET'])\n@login_required\ndef get_settings():\n    from flask import session\n    section = request.args.get('section')\n    company_id = session.get('company_id')\n    \n    if section:\n        settings = Setting.query.filter_by(section=section, company_id=company_id).all()\n    else:\n        settings = Setting.query.filter_by(company_id=company_id).all()\n    \n    return jsonify([s.to_dict() for s in settings])\n\n@bp.route('', methods=['POST'])\n@admin_required\ndef update_settings():\n    from flask import session\n    data = request.json\n    section = data.get('section')\n    settings_data = data.get('settings', {})\n    company_id = session.get('company_id')\n    \n    if not section:\n        return jsonify({'error': 'Section required'}), 400\n    \n    for key, value in settings_data.items():\n        setting = Setting.query.filter_by(section=section, key=key, company_id=company_id).first()\n        if setting:\n            setting.value = value\n        else:\n            setting = Setting(section=section, key=key, value=value, company_id=company_id)\n            db.session.add(setting)\n    \n    db.session.commit()\n    \n    return jsonify({'success': True})\n","size_bytes":1402},"app/routes/users.py":{"content":"from flask import Blueprint, request, jsonify, session\nfrom app.models import User\nfrom app.routes.auth import admin_required, login_required\nfrom app import db\n\nbp = Blueprint('users', __name__, url_prefix='/api/users')\n\n@bp.route('', methods=['GET'])\n@admin_required\ndef get_users():\n    role = session.get('role')\n    company_id = session.get('company_id')\n    \n    # Super admin sees all users\n    if role == 'super_admin':\n        users = User.query.all()\n    # Company admin sees only users from their company (not super_admins)\n    else:\n        users = User.query.filter_by(company_id=company_id).filter(User.role != 'super_admin').all()\n    \n    return jsonify([user.to_dict() for user in users])\n\n@bp.route('', methods=['POST'])\n@admin_required\ndef create_user():\n    data = request.json\n    username = data.get('username')\n    password = data.get('password')\n    full_name = data.get('full_name', '')\n    role = data.get('role', 'user')\n    email = data.get('email', '')\n    \n    if not username or not password:\n        return jsonify({'error': 'Username and password required'}), 400\n    \n    if not email:\n        return jsonify({'error': 'Email is required'}), 400\n    \n    if User.query.filter_by(username=username).first():\n        return jsonify({'error': 'Username already exists'}), 400\n    \n    # Get company_id from session (for company admins)\n    company_id = session.get('company_id')\n    \n    user = User(\n        username=username, \n        full_name=full_name, \n        role=role,\n        email=email,\n        company_id=company_id\n    )\n    user.set_password(password)\n    \n    db.session.add(user)\n    db.session.commit()\n    \n    return jsonify({'success': True, 'user': user.to_dict()})\n\n@bp.route('/<int:user_id>', methods=['DELETE'])\n@admin_required\ndef delete_user(user_id):\n    if user_id == session.get('user_id'):\n        return jsonify({'error': 'Cannot delete your own account'}), 400\n    \n    role = session.get('role')\n    company_id = session.get('company_id')\n    \n    # Company admin can only delete users from their company\n    if role != 'super_admin':\n        user = User.query.filter_by(id=user_id, company_id=company_id).first_or_404()\n    else:\n        user = User.query.get_or_404(user_id)\n    \n    db.session.delete(user)\n    db.session.commit()\n    \n    return jsonify({'success': True, 'message': 'User deleted'})\n\n@bp.route('/me', methods=['GET'])\n@login_required\ndef get_current_user():\n    user_id = session.get('user_id')\n    user = User.query.get_or_404(user_id)\n    return jsonify(user.to_dict())\n\n@bp.route('/me', methods=['PUT'])\n@login_required\ndef update_current_user():\n    user_id = session.get('user_id')\n    user = User.query.get_or_404(user_id)\n    \n    data = request.json\n    full_name = data.get('full_name')\n    current_password = data.get('current_password')\n    new_password = data.get('new_password')\n    \n    if full_name:\n        user.full_name = full_name\n    \n    if new_password:\n        if not current_password:\n            return jsonify({'error': 'Current password required'}), 400\n        \n        if not user.check_password(current_password):\n            return jsonify({'error': 'Current password incorrect'}), 400\n        \n        user.set_password(new_password)\n    \n    db.session.commit()\n    \n    return jsonify({'success': True, 'user': user.to_dict()})\n","size_bytes":3348},"app/static/sw.js":{"content":"const CACHE_NAME = 'devis-menuiserie-v2-20251004';\nconst urlsToCache = [\n  '/',\n  '/static/css/styles.css',\n  '/static/css/tailwind.css',\n  '/static/js/app.js',\n  '/static/js/dashboard.js',\n  '/static/js/settings.js',\n  '/static/js/profile.js',\n  '/static/js/super_admin.js'\n];\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Service Worker: Caching files');\n        return cache.addAll(urlsToCache);\n      })\n      .then(() => self.skipWaiting())\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Service Worker: Clearing old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    }).then(() => self.clients.claim())\n  );\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        if (response) {\n          return response;\n        }\n        return fetch(event.request).then(response => {\n          if (!response || response.status !== 200 || response.type !== 'basic') {\n            return response;\n          }\n          const responseToCache = response.clone();\n          caches.open(CACHE_NAME)\n            .then(cache => {\n              cache.put(event.request, responseToCache);\n            });\n          return response;\n        });\n      })\n      .catch(() => {\n        return caches.match('/');\n      })\n  );\n});\n","size_bytes":1627},"app/static/css/styles.css":{"content":":root {\n    --primary: #3B82F6;\n    --primary-hover: #2563EB;\n    --secondary: #6B7280;\n    --success: #10B981;\n    --danger: #EF4444;\n    --bg-light: #F9FAFB;\n    --bg-white: #FFFFFF;\n    --text-dark: #111827;\n    --text-medium: #4B5563;\n    --text-light: #9CA3AF;\n    --border: #E5E7EB;\n    --border-hover: #D1D5DB;\n    --border-radius: 12px;\n    --border-radius-sm: 8px;\n    --border-radius-lg: 16px;\n    --shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n    --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);\n    --shadow-lg: 0 10px 15px rgba(0, 0, 0, 0.1);\n}\n\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;\n    background: var(--bg-light);\n    min-height: 100vh;\n    color: var(--text-dark);\n    line-height: 1.6;\n    position: relative;\n}\n\n/* Subtle Background Pattern */\nbody::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    z-index: -1;\n    background-color: rgb(245, 247, 250);\n    background-image: \n        repeating-linear-gradient(45deg, transparent, transparent 35px, rgba(59, 130, 246, 0.02) 35px, rgba(59, 130, 246, 0.02) 70px),\n        repeating-linear-gradient(-45deg, transparent, transparent 35px, rgba(59, 130, 246, 0.016) 35px, rgba(59, 130, 246, 0.016) 70px);\n    pointer-events: none;\n}\n\nbody.with-pattern::before {\n    display: block;\n}\n\n.app-container {\n    min-height: 100vh;\n    background: transparent;\n    display: flex;\n    flex-direction: column;\n}\n\n/* Header Styles */\n.modern-header {\n    background: var(--bg-white);\n    border-bottom: 1px solid var(--border);\n    padding: 1.25rem 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 1rem;\n    border-radius: var(--border-radius) var(--border-radius) 0 0;\n}\n\n.header-left {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.header-icon {\n    width: 24px;\n    height: 24px;\n    color: var(--primary);\n}\n\n.modern-header h1 {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.header-right {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.btn-new-quote {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.625rem 1.25rem;\n    background: var(--primary);\n    color: white;\n    border: none;\n    border-radius: var(--border-radius);\n    font-size: 0.9375rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: background 0.2s ease;\n}\n\n.btn-new-quote:hover {\n    background: var(--primary-hover);\n}\n\n.btn-new-quote svg {\n    width: 18px;\n    height: 18px;\n}\n\n.btn-settings {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.625rem 1.25rem;\n    background: transparent;\n    color: var(--text-medium);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    font-size: 0.9375rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.btn-settings:hover {\n    background: var(--bg-light);\n    border-color: var(--border-hover);\n}\n\n.btn-settings svg {\n    width: 18px;\n    height: 18px;\n}\n\n/* Step Indicator Horizontal */\n.step-indicator-container {\n    background: var(--bg-white);\n    padding: 2rem 2rem 1.5rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.step-indicator-horizontal {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    max-width: 1200px;\n    margin: 0 auto;\n    overflow-x: auto;\n    padding: 0.5rem 0;\n}\n\n.step-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n    flex-shrink: 0;\n}\n\n.step-circle {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: var(--bg-light);\n    border: 2px solid var(--border);\n    color: var(--text-medium);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 600;\n    font-size: 0.875rem;\n    transition: all 0.3s ease;\n}\n\n.step-item.active .step-circle {\n    background: var(--primary);\n    border-color: var(--primary);\n    color: white;\n}\n\n.step-item.completed .step-circle {\n    background: var(--bg-light);\n    border-color: var(--primary);\n    color: var(--primary);\n}\n\n.step-label {\n    font-size: 0.8125rem;\n    color: var(--text-medium);\n    text-align: center;\n    white-space: nowrap;\n    font-weight: 500;\n}\n\n.step-item.active .step-label {\n    color: var(--primary);\n    font-weight: 600;\n}\n\n.step-line {\n    width: 30px;\n    height: 2px;\n    background: var(--border);\n    margin: 0 0.25rem;\n    flex-shrink: 0;\n    align-self: flex-start;\n    margin-top: 19px;\n}\n\n/* Main Content */\nmain {\n    flex: 1;\n    padding: 3rem 2rem;\n    max-width: 1200px;\n    margin: 0 auto;\n    width: 100%;\n}\n\n.step {\n    display: none;\n}\n\n.step.active {\n    display: block;\n    animation: fadeIn 0.3s ease;\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(10px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.step-title {\n    font-size: 1.5rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n}\n\n.step-subtitle {\n    color: var(--text-medium);\n    margin-bottom: 2rem;\n    font-size: 1rem;\n}\n\n/* Product Grid */\n.product-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n    gap: 1.25rem;\n    margin-top: 2rem;\n}\n\n.product-card {\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.75rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    background: var(--bg-white);\n}\n\n.product-card:hover {\n    border-color: var(--primary);\n    box-shadow: var(--shadow-md);\n}\n\n.product-card.selected {\n    border-color: var(--primary);\n    background: #EFF6FF;\n    box-shadow: var(--shadow-md);\n}\n\n.product-card h3 {\n    font-size: 1.0625rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n}\n\n.product-card p {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    line-height: 1.5;\n}\n\n/* Options List */\n.options-list {\n    display: flex;\n    flex-direction: column;\n    gap: 0.875rem;\n    margin-top: 2rem;\n}\n\n.option-item {\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.25rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    background: var(--bg-white);\n}\n\n.option-item:hover {\n    border-color: var(--primary);\n    box-shadow: var(--shadow);\n}\n\n.option-item.selected {\n    border-color: var(--primary);\n    background: #EFF6FF;\n}\n\n.option-item h4 {\n    font-size: 1rem;\n    color: var(--text-dark);\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n}\n\n.option-item p {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n}\n\n/* Form Styles */\n.form-group {\n    margin-bottom: 1.5rem;\n}\n\n.form-group label {\n    display: block;\n    font-weight: 600;\n    margin-bottom: 0.5rem;\n    color: var(--text-dark);\n    font-size: 0.9375rem;\n}\n\n.form-group input,\n.form-group textarea,\n.form-group select {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    font-size: 1rem;\n    font-family: inherit;\n    transition: border-color 0.2s ease;\n    background: var(--bg-white);\n}\n\n.form-group input:focus,\n.form-group textarea:focus,\n.form-group select:focus {\n    outline: none;\n    border-color: var(--primary);\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.form-group input.error,\n.form-group textarea.error,\n.form-group select.error {\n    border-color: var(--danger);\n}\n\n.form-group textarea {\n    resize: vertical;\n    min-height: 80px;\n}\n\n.form-group small {\n    display: block;\n    margin-top: 0.25rem;\n    color: var(--text-light);\n    font-size: 0.875rem;\n}\n\n.error-message {\n    display: block;\n    color: var(--danger);\n    font-size: 0.875rem;\n    margin-top: 0.25rem;\n    min-height: 1.2rem;\n}\n\n.dimension-info {\n    background: var(--bg-light);\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    margin-bottom: 1.5rem;\n    font-size: 0.9rem;\n    color: var(--text-medium);\n    border: 1px solid var(--border);\n}\n\n.calculated-values {\n    background: #EFF6FF;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    margin-top: 1.5rem;\n    border: 1px solid #BFDBFE;\n}\n\n/* Accessories */\n.accessories-list {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n    margin-top: 2rem;\n}\n\n.accessory-item {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    padding: 1rem;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    transition: all 0.2s ease;\n    cursor: pointer;\n}\n\n.accessory-item:hover {\n    background: var(--bg-light);\n}\n\n.accessory-item.selected {\n    background: #EFF6FF;\n    border-color: var(--primary);\n}\n\n.accessory-item.disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n    background: var(--bg-light);\n}\n\n.accessory-item input[type=\"checkbox\"] {\n    width: 18px;\n    height: 18px;\n    cursor: pointer;\n}\n\n.accessory-info {\n    flex: 1;\n}\n\n.accessory-info h4 {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.25rem;\n}\n\n.accessory-info p {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n}\n\n.accessory-price {\n    font-weight: 600;\n    color: var(--primary);\n    font-size: 1rem;\n}\n\n.incompatibility-warning {\n    margin-top: 1rem;\n    padding: 0.75rem;\n    background: #FEF3C7;\n    border: 1px solid #F59E0B;\n    border-radius: var(--border-radius);\n    color: #92400E;\n    font-size: 0.875rem;\n    display: none;\n}\n\n.incompatibility-warning.show {\n    display: block;\n}\n\n/* Summary */\n.summary {\n    background: var(--bg-light);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    margin-bottom: 1.5rem;\n    border: 1px solid var(--border);\n}\n\n.summary h3 {\n    font-size: 1.125rem;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n    font-weight: 600;\n}\n\n.summary-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.5rem 0;\n    border-bottom: 1px solid var(--border);\n}\n\n.summary-item:last-child {\n    border-bottom: none;\n}\n\n.summary-label {\n    color: var(--text-medium);\n    font-weight: 500;\n}\n\n.summary-value {\n    color: var(--text-dark);\n    font-weight: 600;\n}\n\n.price-breakdown {\n    background: var(--bg-white);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    border: 1px solid var(--border);\n}\n\n.price-breakdown h3 {\n    font-size: 1.125rem;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n    font-weight: 600;\n}\n\n.price-item {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.5rem 0;\n}\n\n.price-label {\n    color: var(--text-medium);\n}\n\n.price-value {\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.price-total {\n    border-top: 2px solid var(--border);\n    margin-top: 0.75rem;\n    padding-top: 0.75rem;\n    font-size: 1.25rem;\n}\n\n.price-total .price-value {\n    color: var(--primary);\n    font-size: 1.5rem;\n}\n\n/* Navigation */\n.navigation {\n    padding: 1.5rem 2rem;\n    background: var(--bg-white);\n    border-top: 1px solid var(--border);\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n}\n\n.btn {\n    padding: 0.75rem 1.5rem;\n    border: none;\n    border-radius: var(--border-radius);\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.btn svg {\n    width: 18px;\n    height: 18px;\n}\n\n.btn-primary {\n    background: var(--primary);\n    color: white;\n    margin-left: auto;\n}\n\n.btn-primary:hover {\n    background: var(--primary-hover);\n    box-shadow: var(--shadow-md);\n}\n\n.btn-secondary {\n    background: transparent;\n    color: var(--text-medium);\n    border: 1px solid var(--border);\n}\n\n.btn-secondary:hover {\n    background: var(--bg-light);\n    border-color: var(--border-hover);\n}\n\n.btn-accent {\n    background: #F59E0B;\n    color: white;\n}\n\n.btn-accent:hover {\n    background: #D97706;\n}\n\n.btn-success {\n    background: var(--success);\n    color: white;\n}\n\n.btn-success:hover {\n    background: #059669;\n}\n\n.btn:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n/* Admin Link */\n.admin-link {\n    padding: 1rem 2rem;\n    text-align: center;\n    background: var(--bg-light);\n    border-top: 1px solid var(--border);\n}\n\n.btn-link {\n    background: none;\n    border: none;\n    color: var(--primary);\n    text-decoration: underline;\n    cursor: pointer;\n    font-size: 0.875rem;\n}\n\n.btn-link:hover {\n    color: var(--primary-hover);\n}\n\n/* Modal */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    align-items: center;\n    justify-content: center;\n}\n\n.modal.show {\n    display: flex;\n}\n\n.modal-content {\n    background: var(--bg-white);\n    padding: 2rem;\n    border-radius: var(--border-radius);\n    max-width: 500px;\n    width: 90%;\n    max-height: 90vh;\n    overflow-y: auto;\n    box-shadow: var(--shadow-lg);\n    position: relative;\n}\n\n.modal-content h2 {\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n    font-size: 1.5rem;\n}\n\n.modal-content p {\n    color: var(--text-medium);\n    margin-bottom: 1.5rem;\n    font-size: 0.9375rem;\n}\n\n.close {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    font-size: 1.5rem;\n    cursor: pointer;\n    color: var(--text-medium);\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: var(--border-radius-sm);\n    transition: all 0.2s ease;\n}\n\n.close:hover {\n    background: var(--bg-light);\n    color: var(--text-dark);\n}\n\n#importResult {\n    margin-top: 1rem;\n    padding: 1rem;\n    border-radius: var(--border-radius);\n    font-size: 0.9375rem;\n}\n\n#importResult.success {\n    background: #D1FAE5;\n    color: #065F46;\n    border: 1px solid #10B981;\n}\n\n#importResult.error {\n    background: #FEE2E2;\n    color: #991B1B;\n    border: 1px solid #EF4444;\n}\n\n/* Loading */\n.loading {\n    display: none;\n    position: fixed;\n    z-index: 2000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(255, 255, 255, 0.9);\n    align-items: center;\n    justify-content: center;\n}\n\n.loading.show {\n    display: flex;\n}\n\n.spinner {\n    width: 50px;\n    height: 50px;\n    border: 4px solid var(--border);\n    border-top-color: var(--primary);\n    border-radius: 50%;\n    animation: spin 0.8s linear infinite;\n}\n\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n\n/* Responsive */\n@media (max-width: 768px) {\n    .modern-header {\n        padding: 1rem;\n    }\n\n    .modern-header h1 {\n        font-size: 1.125rem;\n    }\n\n    .header-right {\n        width: 100%;\n        justify-content: flex-end;\n    }\n\n    .btn-new-quote, .btn-settings {\n        font-size: 0.875rem;\n        padding: 0.5rem 1rem;\n    }\n\n    .btn-settings span {\n        display: none;\n    }\n\n    .step-indicator-horizontal {\n        justify-content: flex-start;\n        padding: 0;\n    }\n\n    .step-circle {\n        width: 36px;\n        height: 36px;\n        font-size: 0.8125rem;\n    }\n\n    .step-label {\n        font-size: 0.75rem;\n    }\n\n    .step-line {\n        width: 40px;\n        margin-top: 17px;\n    }\n\n    main {\n        padding: 2rem 1rem;\n    }\n\n    .step-title {\n        font-size: 1.25rem;\n    }\n\n    .product-grid {\n        grid-template-columns: 1fr;\n    }\n\n    .navigation {\n        padding: 1rem;\n    }\n}\n\n/* Login Page */\n.login-page {\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-height: 100vh;\n}\n\n.login-container {\n    width: 100%;\n    max-width: 420px;\n    padding: 1rem;\n}\n\n.login-card {\n    background: var(--bg-white);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    padding: 2.5rem;\n}\n\n.login-header {\n    text-align: center;\n    margin-bottom: 2rem;\n}\n\n.login-icon {\n    width: 64px;\n    height: 64px;\n    color: var(--primary);\n    margin: 0 auto 1rem;\n}\n\n.login-header h1 {\n    font-size: 1.5rem;\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n}\n\n.login-header p {\n    color: var(--text-medium);\n    font-size: 0.9375rem;\n}\n\n.login-form {\n    margin-bottom: 1.5rem;\n}\n\n.error-message-box {\n    background: #FEE2E2;\n    color: #991B1B;\n    padding: 0.75rem;\n    border-radius: var(--border-radius);\n    margin-bottom: 1rem;\n    font-size: 0.875rem;\n    display: none;\n}\n\n.btn-block {\n    width: 100%;\n}\n\n.login-footer {\n    text-align: center;\n    font-size: 0.875rem;\n    color: var(--text-medium);\n}\n\n/* Settings Layout */\n.settings-layout {\n    display: flex;\n    min-height: calc(100vh - 73px);\n}\n\n.settings-sidebar {\n    width: 280px;\n    background: var(--bg-light);\n    border-right: 1px solid var(--border);\n    padding: 1.5rem 0;\n    border-radius: var(--border-radius) 0 0 var(--border-radius);\n}\n\n.settings-menu {\n    display: flex;\n    flex-direction: column;\n}\n\n.settings-menu-item {\n    background: none;\n    border: none;\n    padding: 0.875rem 1.5rem;\n    text-align: left;\n    font-size: 0.9375rem;\n    color: var(--text-medium);\n    cursor: pointer;\n    transition: all 0.2s ease;\n    border-left: 3px solid transparent;\n}\n\n.settings-menu-item:hover {\n    background: var(--bg-white);\n    color: var(--text-dark);\n}\n\n.settings-menu-item.active {\n    background: var(--bg-white);\n    color: var(--primary);\n    border-left-color: var(--primary);\n    font-weight: 600;\n}\n\n.settings-content {\n    flex: 1;\n    padding: 2.5rem;\n    overflow-y: auto;\n    border-radius: 0 var(--border-radius) var(--border-radius) 0;\n}\n\n.settings-section {\n    max-width: 800px;\n}\n\n.settings-section h2 {\n    font-size: 1.75rem;\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n}\n\n.section-subtitle {\n    color: var(--text-medium);\n    font-size: 1rem;\n    margin-bottom: 2rem;\n}\n\n/* Toast Notifications */\n.toast {\n    position: fixed;\n    bottom: 2rem;\n    right: 2rem;\n    background: var(--text-dark);\n    color: white;\n    padding: 1rem 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    opacity: 0;\n    transform: translateY(20px);\n    transition: all 0.3s ease;\n    z-index: 3000;\n}\n\n.toast.show {\n    opacity: 1;\n    transform: translateY(0);\n}\n\n.toast.success {\n    background: var(--success);\n}\n\n.toast.error {\n    background: var(--danger);\n}\n\n/* Users List */\n.users-list {\n    margin-top: 1.5rem;\n}\n\n.user-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem;\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    margin-bottom: 0.75rem;\n}\n\n.user-info {\n    display: flex;\n    flex-direction: column;\n    gap: 0.25rem;\n}\n\n.user-role {\n    display: inline-block;\n    padding: 0.25rem 0.5rem;\n    border-radius: var(--border-radius-sm);\n    font-size: 0.75rem;\n    font-weight: 600;\n}\n\n.user-role.admin {\n    background: #DBEAFE;\n    color: #1E40AF;\n}\n\n.user-role.user {\n    background: #E5E7EB;\n    color: #4B5563;\n}\n\n.btn-icon {\n    background: none;\n    border: none;\n    font-size: 1.25rem;\n    cursor: pointer;\n    padding: 0.5rem;\n}\n\n/* Catalog Tabs */\n.catalog-tabs {\n    display: flex;\n    gap: 0.5rem;\n    margin-bottom: 1.5rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.tab-button {\n    background: none;\n    border: none;\n    padding: 0.75rem 1rem;\n    font-size: 0.9375rem;\n    color: var(--text-medium);\n    cursor: pointer;\n    border-bottom: 2px solid transparent;\n    transition: all 0.2s ease;\n}\n\n.tab-button:hover {\n    color: var(--text-dark);\n}\n\n.tab-button.active {\n    color: var(--primary);\n    border-bottom-color: var(--primary);\n    font-weight: 600;\n}\n\n.catalog-content {\n    min-height: 200px;\n}\n\n.catalog-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1.5rem;\n}\n\n.catalog-header h3 {\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.catalog-list {\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n.catalog-item {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.25rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    gap: 1rem;\n    transition: all 0.2s ease;\n}\n\n.catalog-item:hover {\n    box-shadow: var(--shadow-md);\n    border-color: var(--border-hover);\n}\n\n.catalog-item-info {\n    flex: 1;\n}\n\n.catalog-item-info h4 {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.25rem;\n}\n\n.catalog-item-info p {\n    color: var(--text-medium);\n    font-size: 0.875rem;\n    margin-bottom: 0.25rem;\n}\n\n.catalog-item-info small {\n    color: var(--text-light);\n    font-size: 0.8125rem;\n}\n\n.catalog-item-actions {\n    display: flex;\n    gap: 0.5rem;\n    flex-shrink: 0;\n}\n\n/* Import/Export Box */\n.import-export-box {\n    background: var(--bg-light);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    margin-bottom: 1.5rem;\n}\n\n.import-export-box h3 {\n    font-size: 1.125rem;\n    margin-bottom: 0.75rem;\n}\n\n.import-export-box input[type=\"file\"] {\n    display: block;\n    margin: 1rem 0;\n}\n\n/* Coefficients List */\n.coefficients-list {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n}\n\n.coefficient-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 0.75rem 1rem;\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n}\n\n.coefficient-item span {\n    font-weight: 500;\n}\n\n.coefficient-item input {\n    width: 100px;\n    text-align: right;\n}\n\n/* Radio & Checkbox Groups */\n.radio-group {\n    display: flex;\n    gap: 1.5rem;\n}\n\n.radio-group label,\n.checkbox-group label {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    cursor: pointer;\n}\n\n/* About Info */\n.about-info {\n    background: var(--bg-light);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n}\n\n.about-info p {\n    margin-bottom: 0.75rem;\n}\n\n/* Responsive Settings */\n@media (max-width: 768px) {\n    .settings-layout {\n        flex-direction: column;\n    }\n    \n    .settings-sidebar {\n        width: 100%;\n        border-right: none;\n        border-bottom: 1px solid var(--border);\n    }\n    \n    .settings-content {\n        padding: 1.5rem;\n    }\n    \n    .toast {\n        bottom: 1rem;\n        right: 1rem;\n        left: 1rem;\n    }\n}\n\n/* Dashboard Styles */\n.dashboard-content {\n    flex: 1;\n    padding: 2rem;\n    max-width: 1400px;\n    margin: 0 auto;\n    width: 100%;\n}\n\n.dashboard-header {\n    margin-bottom: 2rem;\n}\n\n.dashboard-header h2 {\n    font-size: 1.875rem;\n    font-weight: 700;\n    color: var(--text-dark);\n    margin-bottom: 0.5rem;\n}\n\n.dashboard-subtitle {\n    color: var(--text-medium);\n    font-size: 0.938rem;\n}\n\n.metrics-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n    gap: 1.5rem;\n    margin-bottom: 3rem;\n}\n\n.metric-card {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    display: flex;\n    align-items: flex-start;\n    gap: 1rem;\n    transition: all 0.2s;\n}\n\n.metric-card:hover {\n    box-shadow: var(--shadow-md);\n    border-color: var(--border-hover);\n}\n\n.metric-icon {\n    width: 48px;\n    height: 48px;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-shrink: 0;\n}\n\n.metric-content {\n    flex: 1;\n}\n\n.metric-label {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    margin-bottom: 0.25rem;\n}\n\n.metric-value {\n    font-size: 2rem;\n    font-weight: 700;\n    color: var(--text-dark);\n}\n\n.recent-quotes-section {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.section-header {\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\n.section-header h3 {\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.quotes-table {\n    min-height: 200px;\n    border-radius: var(--border-radius);\n    overflow: hidden;\n}\n\n.quotes-table table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.quotes-table thead {\n    background: var(--bg-light);\n}\n\n.quotes-table th {\n    padding: 0.75rem 1.5rem;\n    text-align: left;\n    font-weight: 600;\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    border-bottom: 1px solid var(--border);\n}\n\n.quotes-table td {\n    padding: 1rem 1.5rem;\n    border-bottom: 1px solid var(--border);\n    color: var(--text-dark);\n    font-size: 0.938rem;\n}\n\n.quotes-table tbody tr:hover {\n    background: var(--bg-light);\n}\n\n.quotes-table tbody tr:last-child td {\n    border-bottom: none;\n}\n\n.btn-icon {\n    background: none;\n    border: none;\n    padding: 0.5rem;\n    cursor: pointer;\n    color: var(--text-medium);\n    border-radius: var(--border-radius-sm);\n    transition: all 0.2s;\n}\n\n.btn-icon:hover {\n    background: var(--bg-light);\n    color: var(--primary);\n}\n\n.loading {\n    padding: 3rem;\n    text-align: center;\n    color: var(--text-medium);\n}\n\n.empty-state {\n    padding: 3rem;\n    text-align: center;\n}\n\n.empty-state svg {\n    color: var(--text-light);\n    margin-bottom: 1rem;\n}\n\n.empty-state p {\n    color: var(--text-medium);\n    margin-bottom: 1.5rem;\n}\n\n.error-state {\n    padding: 3rem;\n    text-align: center;\n}\n\n.error-state svg {\n    margin-bottom: 1rem;\n}\n\n.error-state p {\n    color: var(--text-medium);\n}\n\n.app-header {\n    background: var(--bg-white);\n    border-bottom: 1px solid var(--border);\n    padding: 1.25rem 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 1rem;\n}\n\n.header-title {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.header-title svg {\n    width: 24px;\n    height: 24px;\n    color: var(--primary);\n}\n\n.header-title h1 {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n@media (max-width: 768px) {\n    .dashboard-content {\n        padding: 1.5rem;\n    }\n    \n    .metrics-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .quotes-table {\n        overflow-x: auto;\n    }\n    \n    .quotes-table table {\n        min-width: 600px;\n    }\n    \n    .app-header {\n        padding: 1rem;\n    }\n    \n    .header-actions {\n        width: 100%;\n    }\n    \n    .header-actions button {\n        flex: 1;\n    }\n}\n/* Profile Page Styles */\n.profile-content {\n    flex: 1;\n    padding: 2rem;\n    max-width: 800px;\n    margin: 0 auto;\n    width: 100%;\n}\n\n.profile-card {\n    background: var(--bg-white);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-md);\n    padding: 2rem;\n}\n\n.profile-header {\n    display: flex;\n    align-items: center;\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n    padding-bottom: 2rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.profile-avatar {\n    width: 80px;\n    height: 80px;\n    border-radius: 50%;\n    background: var(--bg-light);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: var(--primary);\n}\n\n.profile-info h2 {\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n}\n\n.role-badge {\n    display: inline-block;\n    padding: 0.25rem 0.75rem;\n    border-radius: 12px;\n    font-size: 0.875rem;\n    font-weight: 500;\n}\n\n.role-admin {\n    background: #FEF3C7;\n    color: #92400E;\n}\n\n.role-user {\n    background: #DBEAFE;\n    color: #1E40AF;\n}\n\n.profile-form {\n    margin-bottom: 2rem;\n}\n\n.form-section {\n    margin-bottom: 2rem;\n}\n\n.form-section h3 {\n    font-size: 1.125rem;\n    margin-bottom: 1rem;\n    color: var(--text-dark);\n}\n\n.form-section small {\n    display: block;\n    margin-top: 0.25rem;\n    color: var(--text-light);\n    font-size: 0.875rem;\n}\n\n.form-actions {\n    display: flex;\n    gap: 1rem;\n    justify-content: flex-end;\n    margin-top: 2rem;\n}\n\n.profile-danger-zone {\n    padding-top: 2rem;\n    border-top: 1px solid var(--border);\n}\n\n.profile-danger-zone h3 {\n    font-size: 1.125rem;\n    margin-bottom: 0.5rem;\n    color: var(--danger);\n}\n\n.profile-danger-zone p {\n    color: var(--text-medium);\n    margin-bottom: 1rem;\n}\n\n.btn-danger {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.625rem 1.25rem;\n    background: var(--danger);\n    color: white;\n    border: none;\n    border-radius: var(--border-radius);\n    font-size: 0.9375rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n}\n\n.btn-danger:hover {\n    background: #DC2626;\n}\n\n.btn-danger svg {\n    width: 16px;\n    height: 16px;\n}\n\n.notification {\n    position: fixed;\n    top: 2rem;\n    right: 2rem;\n    padding: 1rem 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    font-weight: 500;\n    z-index: 1000;\n    animation: slideIn 0.3s ease;\n}\n\n.notification-success {\n    background: #D1FAE5;\n    color: #065F46;\n    border: 1px solid #6EE7B7;\n}\n\n.notification-error {\n    background: #FEE2E2;\n    color: #991B1B;\n    border: 1px solid #FCA5A5;\n}\n\n.notification-info {\n    background: #DBEAFE;\n    color: #1E40AF;\n    border: 1px solid #93C5FD;\n}\n\n@keyframes slideIn {\n    from {\n        transform: translateX(100%);\n        opacity: 0;\n    }\n    to {\n        transform: translateX(0);\n        opacity: 1;\n    }\n}\n\n/* Standardized Button Styles */\n.btn-primary,\n.btn-secondary {\n    display: inline-flex;\n    align-items: center;\n    gap: 0.5rem;\n    padding: 0.625rem 1.25rem;\n    border-radius: var(--border-radius);\n    font-size: 0.9375rem;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    border: none;\n}\n\n.btn-primary {\n    background: var(--primary);\n    color: white;\n}\n\n.btn-primary:hover {\n    background: var(--primary-hover);\n}\n\n.btn-secondary {\n    background: transparent;\n    color: var(--text-medium);\n    border: 1px solid var(--border);\n}\n\n.btn-secondary:hover {\n    background: var(--bg-light);\n    border-color: var(--border-hover);\n}\n\n.btn-primary svg,\n.btn-secondary svg {\n    width: 16px;\n    height: 16px;\n}\n\n/* App Header unified */\n.app-header {\n    background: var(--bg-white);\n    border-bottom: 1px solid var(--border);\n    padding: 1.25rem 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 1rem;\n}\n\n.header-title {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.header-title h1 {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.header-title svg {\n    width: 24px;\n    height: 24px;\n    color: var(--primary);\n}\n\n.header-actions {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n/* Dimension Form Layout */\n.dimension-form {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1.5rem;\n    margin-top: 2rem;\n}\n\n.dim-limits {\n    display: block;\n    font-size: 0.8125rem;\n    color: var(--text-light);\n    margin-top: 0.25rem;\n}\n\n/* Glazing Grid Layout */\n.glazing-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n    margin-top: 2rem;\n}\n\n.glazing-card {\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.25rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    background: var(--bg-white);\n}\n\n.glazing-card:hover {\n    border-color: var(--primary);\n    box-shadow: var(--shadow);\n}\n\n.glazing-card.selected {\n    border-color: var(--primary);\n    background: #EFF6FF;\n}\n\n.glazing-card h4 {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 0.25rem;\n}\n\n.glazing-card .description {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    margin-bottom: 0.75rem;\n}\n\n.glazing-card .price-info {\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n}\n\n.glazing-card .price-primary {\n    font-size: 1.125rem;\n    font-weight: 700;\n    color: var(--primary);\n}\n\n.glazing-card .price-secondary {\n    font-size: 0.875rem;\n    color: var(--text-light);\n}\n\n/* Accessories with Quantities */\n.accessories-container {\n    margin-top: 2rem;\n}\n\n.accessory-category {\n    margin-bottom: 2rem;\n}\n\n.accessory-category-title {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n    padding-bottom: 0.5rem;\n    border-bottom: 2px solid var(--border);\n}\n\n.accessory-item-new {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 0.875rem 1rem;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    margin-bottom: 0.75rem;\n    background: var(--bg-white);\n}\n\n.accessory-item-new.disabled {\n    opacity: 0.5;\n    pointer-events: none;\n    background: var(--bg-light);\n}\n\n.accessory-details {\n    flex: 1;\n}\n\n.accessory-name {\n    font-size: 0.9375rem;\n    font-weight: 500;\n    color: var(--text-dark);\n}\n\n.accessory-price {\n    font-size: 0.875rem;\n    color: var(--text-light);\n    margin-top: 0.125rem;\n}\n\n.quantity-controls {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n}\n\n.qty-btn {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    border: 1px solid var(--border);\n    background: var(--bg-white);\n    color: var(--text-medium);\n    font-size: 1.125rem;\n    font-weight: 600;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s ease;\n}\n\n.qty-btn:hover {\n    background: var(--primary);\n    color: white;\n    border-color: var(--primary);\n}\n\n.qty-btn:disabled {\n    opacity: 0.3;\n    cursor: not-allowed;\n}\n\n.qty-btn:disabled:hover {\n    background: var(--bg-white);\n    color: var(--text-medium);\n    border-color: var(--border);\n}\n\n.qty-display {\n    min-width: 32px;\n    text-align: center;\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.accessory-total {\n    padding: 1rem;\n    background: #EFF6FF;\n    border: 1px solid #BFDBFE;\n    border-radius: var(--border-radius);\n    text-align: right;\n}\n\n.accessory-total-label {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    margin-right: 1rem;\n}\n\n.accessory-total-price {\n    font-size: 1.25rem;\n    font-weight: 700;\n    color: var(--primary);\n}\n\n/* Finishes Grid with Groups */\n.finish-groups {\n    margin-top: 2rem;\n}\n\n.finish-group {\n    margin-bottom: 2rem;\n}\n\n.finish-group-title {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n}\n\n.finish-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1rem;\n}\n\n.finish-card {\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.25rem;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    background: var(--bg-white);\n}\n\n.finish-card:hover {\n    border-color: var(--primary);\n    box-shadow: var(--shadow);\n}\n\n.finish-card.selected {\n    border-color: var(--primary);\n    background: #EFF6FF;\n}\n\n.finish-card-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: flex-start;\n    margin-bottom: 0.5rem;\n}\n\n.finish-name {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.finish-badge {\n    font-size: 0.75rem;\n    font-weight: 600;\n    color: var(--primary);\n    padding: 0.25rem 0.5rem;\n    background: #EFF6FF;\n    border-radius: var(--border-radius-sm);\n}\n\n.finish-description {\n    font-size: 0.875rem;\n    color: var(--text-light);\n}\n\n/* Client Form */\n.client-form {\n    max-width: 700px;\n    margin-top: 2rem;\n}\n\n.required {\n    color: var(--danger);\n}\n\n/* Summary Section */\n.summary {\n    margin-top: 2rem;\n}\n\n.summary-section {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    margin-bottom: 1.5rem;\n}\n\n.summary-section-title {\n    font-size: 0.75rem;\n    font-weight: 700;\n    text-transform: uppercase;\n    letter-spacing: 0.05em;\n    color: var(--text-light);\n    margin-bottom: 0.75rem;\n}\n\n.summary-grid {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    gap: 1.5rem;\n}\n\n.summary-item {\n    margin-bottom: 0.75rem;\n}\n\n.summary-label {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    margin-bottom: 0.25rem;\n}\n\n.summary-value {\n    font-size: 1rem;\n    font-weight: 600;\n    color: var(--text-dark);\n}\n\n.summary-accessories {\n    list-style: none;\n    padding: 0;\n    margin: 0.5rem 0;\n}\n\n.summary-accessories li {\n    font-size: 0.9375rem;\n    color: var(--text-dark);\n    padding: 0.25rem 0;\n}\n\n.price-breakdown {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n}\n\n.price-breakdown-title {\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n    padding-bottom: 0.75rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.price-line {\n    display: flex;\n    justify-content: space-between;\n    padding: 0.75rem 0;\n    font-size: 0.9375rem;\n}\n\n.price-line-label {\n    color: var(--text-medium);\n}\n\n.price-line-value {\n    font-weight: 600;\n    color: var(--primary);\n}\n\n.price-total {\n    display: flex;\n    justify-content: space-between;\n    padding: 1rem 0;\n    margin-top: 0.75rem;\n    border-top: 2px solid var(--border);\n    font-size: 1.25rem;\n    font-weight: 700;\n}\n\n.price-total-label {\n    color: var(--text-dark);\n}\n\n.price-total-value {\n    color: var(--primary);\n}\n\n/* Items List */\n.items-list {\n    margin-bottom: 2rem;\n}\n\n.items-list-title {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n}\n\n.current-item-title {\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin-bottom: 1rem;\n}\n\n.item-card {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    margin-bottom: 1rem;\n    transition: box-shadow 0.2s;\n}\n\n.item-card:hover {\n    box-shadow: var(--shadow-md);\n}\n\n.item-card-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1rem;\n    padding-bottom: 0.75rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.item-card-header h4 {\n    font-size: 1.125rem;\n    font-weight: 600;\n    color: var(--text-dark);\n    margin: 0;\n}\n\n.item-card-actions {\n    display: flex;\n    gap: 0.5rem;\n}\n\n.btn-icon {\n    background: none;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius-sm);\n    padding: 0.5rem;\n    cursor: pointer;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s;\n}\n\n.btn-icon svg {\n    width: 1.25rem;\n    height: 1.25rem;\n    color: var(--text-medium);\n}\n\n.btn-icon:hover {\n    background: var(--bg-light);\n    border-color: var(--border-hover);\n}\n\n.btn-icon-danger:hover {\n    background: #FEE2E2;\n    border-color: var(--danger);\n}\n\n.btn-icon-danger:hover svg {\n    color: var(--danger);\n}\n\n.item-card-body {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n}\n\n.item-info-row {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    font-size: 0.9375rem;\n}\n\n.item-info-label {\n    color: var(--text-medium);\n    font-weight: 500;\n}\n\n.item-info-value {\n    color: var(--text-dark);\n    font-weight: 600;\n    text-align: right;\n}\n\n.item-price {\n    margin-top: 0.75rem;\n    padding-top: 0.75rem;\n    border-top: 1px solid var(--border);\n    font-size: 1.25rem;\n    font-weight: 700;\n    color: var(--primary);\n    text-align: right;\n}\n\n.items-total {\n    background: linear-gradient(135deg, var(--primary) 0%, #2563EB 100%);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 1rem;\n}\n\n.items-total-label {\n    font-size: 1.25rem;\n    font-weight: 600;\n    color: white;\n}\n\n.items-total-value {\n    font-size: 1.5rem;\n    font-weight: 700;\n    color: white;\n}\n\n/* Modal Styles */\n.modal-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n    animation: fadeIn 0.2s ease-in;\n}\n\n.modal-content {\n    background: var(--bg-white);\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-lg);\n    width: 90%;\n    max-width: 600px;\n    animation: slideUp 0.3s ease-out;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.modal-header h3 {\n    margin: 0;\n    font-size: 1.5rem;\n    color: var(--text-dark);\n}\n\n.modal-body {\n    padding: 1.5rem;\n}\n\n.modal-footer {\n    display: flex;\n    justify-content: flex-end;\n    gap: 1rem;\n    padding: 1.5rem;\n    border-top: 1px solid var(--border);\n}\n\n@keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(20px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n@media (max-width: 768px) {\n    .profile-header {\n        flex-direction: column;\n        text-align: center;\n    }\n    \n    .form-actions {\n        flex-direction: column;\n    }\n    \n    .form-actions button {\n        width: 100%;\n    }\n    \n    .header-actions {\n        width: 100%;\n        justify-content: stretch;\n    }\n    \n    .header-actions button {\n        flex: 1;\n        justify-content: center;\n    }\n    \n    .dimension-form,\n    .summary-grid,\n    .glazing-grid,\n    .finish-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .product-grid {\n        grid-template-columns: 1fr;\n    }\n}\n\n/* Super Admin Dashboard Styles */\n.container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 2rem;\n}\n\n.container header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 2rem;\n    padding-bottom: 1rem;\n    border-bottom: 2px solid var(--border);\n}\n\n.container header h1 {\n    font-size: 1.75rem;\n    color: var(--text-dark);\n}\n\n.container header nav {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n}\n\n.stats-grid {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    gap: 1.5rem;\n    margin-bottom: 2rem;\n}\n\n.stat-card {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    box-shadow: var(--shadow);\n    transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.stat-card:hover {\n    transform: translateY(-2px);\n    box-shadow: var(--shadow-md);\n}\n\n.stat-card h3 {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n}\n\n.stat-value {\n    font-size: 2rem;\n    font-weight: 700;\n    color: var(--primary);\n    margin: 0;\n}\n\n.section {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    padding: 1.5rem;\n    box-shadow: var(--shadow);\n    margin-bottom: 2rem;\n}\n\n.section h2 {\n    font-size: 1.25rem;\n    margin-bottom: 1rem;\n    color: var(--text-dark);\n}\n\n.filter-buttons {\n    display: flex;\n    gap: 0.5rem;\n    margin-bottom: 1.5rem;\n    flex-wrap: wrap;\n}\n\n.filter-buttons button {\n    padding: 0.5rem 1rem;\n    font-size: 0.875rem;\n}\n\n.filter-buttons button.active {\n    background: var(--primary);\n    color: white;\n    border-color: var(--primary);\n}\n\n.table-container {\n    overflow-x: auto;\n    border-radius: var(--border-radius);\n}\n\n.table-container table {\n    width: 100%;\n    border-collapse: collapse;\n    font-size: 0.875rem;\n}\n\n.table-container thead {\n    background: var(--bg-light);\n}\n\n.table-container th {\n    padding: 0.75rem;\n    text-align: left;\n    font-weight: 600;\n    color: var(--text-dark);\n    border-bottom: 2px solid var(--border);\n}\n\n.table-container td {\n    padding: 0.75rem;\n    border-bottom: 1px solid var(--border);\n}\n\n.table-container tbody tr:hover {\n    background: var(--bg-light);\n}\n\n.table-container button {\n    padding: 0.375rem 0.75rem;\n    font-size: 0.75rem;\n    margin-right: 0.25rem;\n}\n\n/* Stat Card Colors & Icons */\n.stat-card {\n    position: relative;\n    overflow: hidden;\n    background: white;\n}\n\n.stat-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    opacity: 0.12;\n    z-index: 0;\n}\n\n.stat-card > * {\n    position: relative;\n    z-index: 1;\n}\n\n.stat-icon {\n    font-size: 2.5rem;\n    margin-bottom: 0.5rem;\n    opacity: 0.8;\n}\n\n.stat-blue::before { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }\n.stat-green::before { background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%); }\n.stat-orange::before { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }\n.stat-red::before { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }\n.stat-purple::before { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%); }\n.stat-indigo::before { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%); }\n.stat-teal::before { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%); }\n.stat-cyan::before { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%); }\n.stat-lime::before { background: linear-gradient(135deg, #30cfd0 0%, #330867 100%); }\n.stat-amber::before { background: linear-gradient(135deg, #fddb92 0%, #d1fdff 100%); }\n.stat-pink::before { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); }\n.stat-rose::before { background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%); }\n\n.stat-card h3 {\n    color: var(--text-dark) !important;\n    font-weight: 600;\n}\n\n.stat-card .stat-value {\n    color: var(--text-dark) !important;\n    font-weight: 700;\n}\n\n.stat-amount {\n    font-size: 1.3rem !important;\n    font-weight: 700;\n}\n\n.stat-amount::after {\n    font-size: 0.9rem;\n}\n\n/* Modal Styles */\n.modal {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1000;\n}\n\n.modal-content {\n    background: var(--bg-white);\n    border-radius: var(--border-radius);\n    padding: 2rem;\n    max-width: 500px;\n    width: 90%;\n    max-height: 90vh;\n    overflow-y: auto;\n    box-shadow: var(--shadow-lg);\n}\n\n.modal-large {\n    max-width: 700px;\n}\n\n.modal-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 1.5rem;\n    padding-bottom: 1rem;\n    border-bottom: 2px solid var(--border);\n}\n\n.modal-header h2 {\n    margin: 0;\n    font-size: 1.5rem;\n    color: var(--text-dark);\n}\n\n.modal-close {\n    background: none;\n    border: none;\n    font-size: 2rem;\n    color: var(--text-medium);\n    cursor: pointer;\n    padding: 0;\n    width: 30px;\n    height: 30px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: color 0.2s;\n}\n\n.modal-close:hover {\n    color: var(--danger);\n}\n\n.form-group {\n    margin-bottom: 1.25rem;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: 500;\n    color: var(--text-dark);\n}\n\n.form-group input,\n.form-group select {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    font-size: 0.875rem;\n    transition: border-color 0.2s;\n}\n\n.form-group input:focus,\n.form-group select:focus {\n    outline: none;\n    border-color: var(--primary);\n}\n\n.form-group input:disabled {\n    background: var(--bg-light);\n    cursor: not-allowed;\n}\n\n.form-actions {\n    display: flex;\n    gap: 0.75rem;\n    justify-content: flex-end;\n    margin-top: 1.5rem;\n}\n\n/* Form Steps */\n.form-steps {\n    margin-bottom: 2rem;\n}\n\n.step-indicator {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 2rem;\n}\n\n.step-item {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.step-number {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    background: var(--bg-light);\n    color: var(--text-medium);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-weight: 600;\n    font-size: 1.1rem;\n    transition: all 0.3s;\n}\n\n.step-item.active .step-number {\n    background: var(--primary);\n    color: white;\n    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.3);\n}\n\n.step-label {\n    font-size: 0.875rem;\n    color: var(--text-medium);\n    font-weight: 500;\n}\n\n.step-item.active .step-label {\n    color: var(--primary);\n    font-weight: 600;\n}\n\n.step-line {\n    width: 80px;\n    height: 2px;\n    background: var(--border);\n    margin: 0 1rem;\n}\n\n.form-step {\n    display: none;\n}\n\n.form-step.active {\n    display: block;\n}\n\n.form-step h3 {\n    margin-top: 0;\n    margin-bottom: 0.5rem;\n    color: var(--text-dark);\n}\n\n.step-description {\n    color: var(--text-medium);\n    font-size: 0.875rem;\n    margin-bottom: 1.5rem;\n}\n\n.form-row {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 1rem;\n}\n\n.settings-form {\n    background: var(--bg-white);\n    padding: 1.5rem;\n    border-radius: var(--border-radius);\n    box-shadow: var(--shadow-sm);\n}\n\n.settings-form textarea {\n    width: 100%;\n    padding: 0.75rem;\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius);\n    font-family: inherit;\n    resize: vertical;\n}\n\n.pagination {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 1rem;\n    margin-top: 1rem;\n}\n\n.pagination button:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n}\n\n#pageInfo {\n    font-weight: 500;\n    color: var(--text-dark);\n}\n\n/* Hamburger Button */\n.hamburger-btn {\n    background: var(--bg-white);\n    border: 1px solid var(--border);\n    border-radius: var(--border-radius-sm);\n    cursor: pointer;\n    padding: 0.625rem 1rem;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    z-index: 10;\n    position: relative;\n    font-size: 0.875rem;\n    font-weight: 500;\n    color: var(--text-dark);\n    transition: all 0.2s;\n}\n\n.hamburger-btn:hover {\n    background: var(--bg-light);\n    border-color: var(--border-hover);\n}\n\n.hamburger-icon {\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    width: 1.25rem;\n    height: 1rem;\n}\n\n.hamburger-icon span {\n    width: 100%;\n    height: 2px;\n    background: var(--text-dark);\n    border-radius: 2px;\n    transition: all 0.3s ease;\n}\n\n.hamburger-btn:hover .hamburger-icon span {\n    background: var(--primary);\n}\n\n.hamburger-text {\n    font-weight: 500;\n    color: var(--text-dark);\n    font-size: 0.875rem;\n    transition: color 0.3s ease;\n}\n\n.hamburger-btn:hover .hamburger-text {\n    color: var(--primary);\n}\n\n/* Sidebar */\n.sidebar {\n    position: fixed;\n    top: 0;\n    right: -450px;\n    width: 450px;\n    height: 100vh;\n    background: var(--bg-white);\n    box-shadow: -4px 0 20px rgba(0, 0, 0, 0.1);\n    z-index: 1000;\n    transition: right 0.3s ease;\n    overflow-y: auto;\n}\n\n.sidebar.active {\n    right: 0;\n}\n\n.sidebar-overlay {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.5);\n    z-index: 999;\n    opacity: 0;\n    visibility: hidden;\n    transition: all 0.3s ease;\n}\n\n.sidebar-overlay.active {\n    opacity: 1;\n    visibility: visible;\n}\n\n.sidebar-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1.5rem;\n    border-bottom: 1px solid var(--border);\n    background: linear-gradient(135deg, var(--primary) 0%, #0056b3 100%);\n    color: white;\n}\n\n.sidebar-header h2 {\n    margin: 0;\n    font-size: 1.5rem;\n}\n\n.close-btn {\n    background: transparent;\n    border: none;\n    color: white;\n    font-size: 1.75rem;\n    cursor: pointer;\n    padding: 0.25rem 0.5rem;\n    transition: transform 0.2s ease;\n}\n\n.close-btn:hover {\n    transform: rotate(90deg);\n}\n\n.sidebar-nav {\n    display: flex;\n    flex-direction: column;\n    padding: 1rem 0;\n    border-bottom: 1px solid var(--border);\n}\n\n.nav-item {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 1rem 1.5rem;\n    background: transparent;\n    border: none;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    text-align: left;\n    font-size: 1rem;\n    color: var(--text-dark);\n    position: relative;\n}\n\n.nav-item:hover {\n    background: rgba(0, 123, 255, 0.05);\n}\n\n.nav-item.active {\n    background: rgba(0, 123, 255, 0.1);\n    border-left: 4px solid var(--primary);\n    font-weight: 600;\n}\n\n.nav-icon {\n    font-size: 1.5rem;\n}\n\n.nav-text {\n    flex: 1;\n}\n\n.sidebar-content {\n    padding: 1.5rem;\n}\n\n.sidebar-section {\n    display: none;\n}\n\n.sidebar-section.active {\n    display: block;\n    animation: fadeIn 0.3s ease;\n}\n\n.sidebar-section-content {\n    position: fixed;\n    top: 0;\n    right: 0;\n    width: 600px;\n    max-width: 90vw;\n    height: 100vh;\n    background: white;\n    box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n    overflow-y: auto;\n    padding: 2rem;\n    z-index: 2000;\n}\n\n@keyframes fadeIn {\n    from {\n        opacity: 0;\n        transform: translateY(10px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.sidebar-section h3 {\n    margin: 0 0 1.5rem 0;\n    color: var(--text-dark);\n    font-size: 1.25rem;\n    padding-bottom: 0.75rem;\n    border-bottom: 2px solid var(--primary);\n}\n\n@media (max-width: 768px) {\n    .container {\n        padding: 1rem;\n    }\n    \n    .stats-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .container header {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 1rem;\n    }\n    \n    .container header nav {\n        flex-direction: column;\n        width: 100%;\n    }\n    \n    .container header nav button {\n        width: 100%;\n    }\n    \n    .filter-buttons {\n        flex-direction: column;\n    }\n    \n    .filter-buttons button {\n        width: 100%;\n    }\n    \n    .modal-content {\n        width: 95%;\n        padding: 1.5rem;\n    }\n    \n    .form-actions {\n        flex-direction: column;\n    }\n    \n    .form-actions button {\n        width: 100%;\n    }\n}\n\n/* Modern Login Page Styles */\n.modern-login-page {\n    margin: 0;\n    padding: 0;\n    overflow-x: hidden;\n}\n\n.modern-login-container {\n    display: flex;\n    min-height: 100vh;\n    background: #f5f7fa;\n}\n\n.login-left {\n    flex: 1;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 2rem;\n    background: white;\n    position: relative;\n}\n\n.login-content {\n    width: 100%;\n    max-width: 450px;\n}\n\n.login-logo {\n    width: 50px;\n    height: 50px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 2rem;\n}\n\n.login-logo svg {\n    width: 28px;\n    height: 28px;\n    color: white;\n}\n\n.login-title {\n    font-size: 2rem;\n    font-weight: 700;\n    color: #1a202c;\n    margin-bottom: 0.5rem;\n}\n\n.login-subtitle {\n    font-size: 1rem;\n    color: #718096;\n    margin-bottom: 2rem;\n}\n\n.modern-login-form {\n    margin-bottom: 2rem;\n}\n\n.input-group {\n    position: relative;\n    margin-bottom: 1.5rem;\n}\n\n.input-icon {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 20px;\n    height: 20px;\n    color: #a0aec0;\n    pointer-events: none;\n}\n\n.input-group input {\n    width: 100%;\n    padding: 0.875rem 1rem 0.875rem 3rem;\n    border: 1.5px solid #e2e8f0;\n    border-radius: 10px;\n    font-size: 0.95rem;\n    transition: all 0.2s ease;\n    background: #f8fafc;\n}\n\n.input-group input:focus {\n    outline: none;\n    border-color: var(--primary);\n    background: white;\n    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);\n}\n\n.input-group input::placeholder {\n    color: #a0aec0;\n}\n\n.toggle-password {\n    position: absolute;\n    right: 1rem;\n    top: 50%;\n    transform: translateY(-50%);\n    width: 20px;\n    height: 20px;\n    color: #a0aec0;\n    cursor: pointer;\n    transition: color 0.2s ease;\n}\n\n.toggle-password:hover {\n    color: var(--primary);\n}\n\n.modern-error-message {\n    display: none;\n    padding: 0.875rem 1rem;\n    background: #fef2f2;\n    border: 1px solid #fecaca;\n    border-radius: 8px;\n    color: #dc2626;\n    font-size: 0.875rem;\n    margin-bottom: 1.5rem;\n}\n\n.btn-modern-primary {\n    width: 100%;\n    padding: 0.875rem 1.5rem;\n    background: linear-gradient(135deg, var(--primary) 0%, #2563EB 100%);\n    color: white;\n    border: none;\n    border-radius: 10px;\n    font-size: 1rem;\n    font-weight: 600;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    box-shadow: 0 4px 6px rgba(59, 130, 246, 0.2);\n}\n\n.btn-modern-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 6px 12px rgba(59, 130, 246, 0.3);\n}\n\n.btn-modern-primary:active {\n    transform: translateY(0);\n}\n\n.login-options {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-top: 1.5rem;\n}\n\n.checkbox-label {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    cursor: pointer;\n    font-size: 0.875rem;\n    color: #4a5568;\n}\n\n.checkbox-label input[type=\"checkbox\"] {\n    width: 16px;\n    height: 16px;\n    cursor: pointer;\n}\n\n.forgot-password {\n    font-size: 0.875rem;\n    color: var(--primary);\n    text-decoration: none;\n    transition: color 0.2s ease;\n}\n\n.forgot-password:hover {\n    color: #2563EB;\n    text-decoration: underline;\n}\n\n.login-help {\n    margin-top: 2rem;\n    padding-top: 2rem;\n    border-top: 1px solid #e2e8f0;\n}\n\n.login-help > p {\n    font-size: 0.875rem;\n    color: #718096;\n    margin-bottom: 1rem;\n    font-weight: 500;\n}\n\n.test-accounts {\n    display: flex;\n    flex-direction: column;\n    gap: 0.75rem;\n}\n\n.test-accounts span {\n    font-size: 0.8125rem;\n    color: #4a5568;\n    padding: 0.625rem 1rem;\n    background: #f7fafc;\n    border-radius: var(--border-radius-sm);\n    border: 1px solid #e2e8f0;\n}\n\n.test-accounts strong {\n    color: var(--primary);\n    font-weight: 600;\n}\n\n.login-right {\n    flex: 1;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 3rem;\n    position: relative;\n    overflow: hidden;\n}\n\n.login-visual {\n    position: relative;\n    z-index: 1;\n    max-width: 500px;\n}\n\n.visual-content h2 {\n    font-size: 2.5rem;\n    font-weight: 700;\n    color: white;\n    margin-bottom: 1rem;\n    line-height: 1.2;\n}\n\n.visual-content > p {\n    font-size: 1.125rem;\n    color: rgba(255, 255, 255, 0.9);\n    margin-bottom: 2.5rem;\n    line-height: 1.6;\n}\n\n.feature-list {\n    display: flex;\n    flex-direction: column;\n    gap: 1.25rem;\n}\n\n.feature-item {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    padding: 1rem 1.5rem;\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border-radius: 12px;\n    border: 1px solid rgba(255, 255, 255, 0.2);\n    color: white;\n    font-size: 1rem;\n    transition: all 0.3s ease;\n}\n\n.feature-item:hover {\n    background: rgba(255, 255, 255, 0.15);\n    transform: translateX(10px);\n}\n\n.feature-icon {\n    font-size: 1.5rem;\n}\n\n.visual-gradient {\n    position: absolute;\n    top: -50%;\n    right: -50%;\n    width: 150%;\n    height: 150%;\n    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);\n    pointer-events: none;\n}\n\n@media (max-width: 968px) {\n    .modern-login-container {\n        flex-direction: column;\n    }\n    \n    .login-right {\n        min-height: 300px;\n    }\n    \n    .visual-content h2 {\n        font-size: 2rem;\n    }\n    \n    .feature-list {\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n        gap: 1rem;\n    }\n    \n    .feature-item {\n        padding: 0.75rem 1rem;\n        font-size: 0.875rem;\n    }\n}\n\n@media (max-width: 640px) {\n    .login-left {\n        padding: 1.5rem;\n    }\n    \n    .login-content {\n        max-width: 100%;\n    }\n    \n    .login-title {\n        font-size: 1.75rem;\n    }\n    \n    .login-right {\n        padding: 2rem;\n    }\n    \n    .visual-content h2 {\n        font-size: 1.5rem;\n    }\n    \n    .visual-content > p {\n        font-size: 1rem;\n    }\n    \n    .feature-list {\n        grid-template-columns: 1fr;\n    }\n    \n    .login-options {\n        flex-direction: column;\n        align-items: flex-start;\n        gap: 1rem;\n    }\n}\n\n/* Pattern for dashboard and admin pages */\nbody.with-pattern::before {\n    display: block;\n}\n\n.metric-emoji {\n    font-size: 2rem;\n    margin-bottom: 0.5rem;\n}\n\n/* Modern header for dashboard */\n.modern-header {\n    background: white;\n    border-bottom: 1px solid var(--border);\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);\n}\n","size_bytes":60931},"app/static/js/app.js":{"content":"// Global State\nconst state = {\n    currentStep: 1,\n    totalSteps: 8,\n    items: [], // Array of completed items in the quote\n    editingItemIndex: null, // Index of item being edited, null if adding new\n    data: {\n        chassisType: null,\n        width: null,\n        height: null,\n        profileSeries: null,\n        glazingType: null,\n        finish: null,\n        accessories: {}, // Format: {accessoryName: quantity}\n        clientName: '',\n        clientEmail: '',\n        clientPhone: '',\n        clientNotes: ''\n    },\n    catalog: {\n        chassisTypes: [],\n        profileSeries: [],\n        glazingTypes: [],\n        finishes: [],\n        accessories: []\n    },\n    breakdown: null\n};\n\n// Utility: Format price in MAD\nfunction formatMAD(amount) {\n    if (amount === null || amount === undefined) return '0,00 MAD';\n    return amount.toLocaleString('fr-MA', {\n        minimumFractionDigits: 2,\n        maximumFractionDigits: 2\n    }) + ' MAD';\n}\n\n// Authentication\nasync function checkAuth() {\n    try {\n        const response = await fetch('/api/auth/check', { credentials: 'include' });\n        if (!response.ok) {\n            window.location.href = '/login.html';\n            return false;\n        }\n        return true;\n    } catch (error) {\n        window.location.href = '/login.html';\n        return false;\n    }\n}\n\n// Loading Indicator\nfunction showLoading(show) {\n    document.getElementById('loading').style.display = show ? 'flex' : 'none';\n}\n\n// Load Catalog\nasync function loadCatalog() {\n    try {\n        const [chassisTypes, profileSeries, glazingTypes, finishes, accessories] = await Promise.all([\n            fetch('/api/catalog/chassis-types', { credentials: 'include' }).then(r => r.json()),\n            fetch('/api/catalog/profile-series', { credentials: 'include' }).then(r => r.json()),\n            fetch('/api/catalog/glazing-types', { credentials: 'include' }).then(r => r.json()),\n            fetch('/api/catalog/finishes', { credentials: 'include' }).then(r => r.json()),\n            fetch('/api/catalog/accessories', { credentials: 'include' }).then(r => r.json())\n        ]);\n        \n        state.catalog = { chassisTypes, profileSeries, glazingTypes, finishes, accessories };\n        \n        renderChassisTypes();\n        renderProfileSeries();\n        renderGlazingTypes();\n        renderFinishes();\n        renderAccessories();\n        \n    } catch (error) {\n        console.error('Error loading catalog:', error);\n        alert('Erreur lors du chargement du catalogue');\n    }\n}\n\n// Step 1: Render Chassis Types\nfunction renderChassisTypes() {\n    const container = document.getElementById('chassisTypeOptions');\n    container.innerHTML = state.catalog.chassisTypes.map(type => `\n        <div class=\"product-card ${state.data.chassisType === type.name ? 'selected' : ''}\" data-value=\"${type.name}\">\n            <h3>${type.name}</h3>\n            <p>${type.description || ''}</p>\n        </div>\n    `).join('');\n    \n    container.querySelectorAll('.product-card').forEach(card => {\n        card.addEventListener('click', () => {\n            container.querySelectorAll('.product-card').forEach(c => c.classList.remove('selected'));\n            card.classList.add('selected');\n            state.data.chassisType = card.dataset.value;\n            updateDimensionLimits();\n            updateNavigation();\n        });\n    });\n    \n    // Update dimension limits if already selected\n    if (state.data.chassisType) {\n        updateDimensionLimits();\n    }\n}\n\nfunction updateDimensionLimits() {\n    const type = state.catalog.chassisTypes.find(t => t.name === state.data.chassisType);\n    if (type) {\n        const container = document.getElementById('dimensionLimits');\n        container.innerHTML = `\n            <strong>Limites pour ${type.name}:</strong><br>\n            Largeur: ${type.min_width} - ${type.max_width} mm<br>\n            Hauteur: ${type.min_height} - ${type.max_height} mm\n        `;\n        \n        document.getElementById('width').min = type.min_width;\n        document.getElementById('width').max = type.max_width;\n        document.getElementById('height').min = type.min_height;\n        document.getElementById('height').max = type.max_height;\n        \n        // Update dim-limits text\n        document.querySelectorAll('.dim-limits')[0].textContent = `Min: ${type.min_height}mm, Max: ${type.max_height}mm`;\n        document.querySelectorAll('.dim-limits')[1].textContent = `Min: ${type.min_width}mm, Max: ${type.max_width}mm`;\n    }\n}\n\n// Step 3: Render Profile Series\nfunction renderProfileSeries() {\n    const container = document.getElementById('seriesOptions');\n    container.innerHTML = state.catalog.profileSeries.map(series => `\n        <div class=\"option-item ${state.data.profileSeries === series.name ? 'selected' : ''}\" data-value=\"${series.name}\">\n            <h4>${series.name}</h4>\n            <p>${series.description}</p>\n            <p style=\"color: var(--primary); font-weight: 600; margin-top: 0.5rem;\">${formatMAD(series.price_per_meter)}/ml</p>\n        </div>\n    `).join('');\n    \n    container.querySelectorAll('.option-item').forEach(item => {\n        item.addEventListener('click', () => {\n            container.querySelectorAll('.option-item').forEach(i => i.classList.remove('selected'));\n            item.classList.add('selected');\n            state.data.profileSeries = item.dataset.value;\n            checkAccessoryCompatibility();\n            updateNavigation();\n        });\n    });\n}\n\n// Step 4: Render Glazing Types with MAD prices\nfunction renderGlazingTypes() {\n    const container = document.getElementById('glazingOptions');\n    \n    // Group glazing by type\n    const typeGroups = {};\n    state.catalog.glazingTypes.forEach(glaze => {\n        const mainType = glaze.name.includes('mm') ? 'Type de verre' : 'Teinte du verre';\n        if (!typeGroups[mainType]) typeGroups[mainType] = [];\n        typeGroups[mainType].push(glaze);\n    });\n    \n    let html = '<h3 style=\"font-size: 1rem; font-weight: 600; margin-bottom: 1rem;\">Type de verre</h3>';\n    html += '<div class=\"glazing-grid\">';\n    \n    const glassTypes = state.catalog.glazingTypes.filter(g => g.name.includes('mm') || g.name.includes('Feuilleté') || g.name.includes('Sécurité'));\n    glassTypes.forEach(glaze => {\n        const pricePerM2 = glaze.price_per_m2 || 0;\n        html += `\n            <div class=\"glazing-card\" data-value=\"${glaze.name}\">\n                <h4>${glaze.name}</h4>\n                <p class=\"description\">${glaze.description || ''}</p>\n                <div class=\"price-info\">\n                    <span class=\"price-primary\">${formatMAD(pricePerM2)}/m²</span>\n                </div>\n            </div>\n        `;\n    });\n    html += '</div>';\n    \n    // Glazing tints\n    const tints = state.catalog.glazingTypes.filter(g => !g.name.includes('mm') && !g.name.includes('Feuilleté') && !g.name.includes('Sécurité'));\n    if (tints.length > 0) {\n        html += '<h3 style=\"font-size: 1rem; font-weight: 600; margin: 2rem 0 1rem;\">Teinte du verre</h3>';\n        html += '<div class=\"glazing-grid\">';\n        tints.forEach(tint => {\n            const coefficient = tint.coefficient || 1;\n            const badge = coefficient > 1 ? `+${((coefficient - 1) * 100).toFixed(0)}%` : 'Standard';\n            html += `\n                <div class=\"glazing-card\" data-value=\"${tint.name}\">\n                    <h4>${tint.name}</h4>\n                    <p class=\"finish-badge\">${badge}</p>\n                </div>\n            `;\n        });\n        html += '</div>';\n    }\n    \n    container.innerHTML = html;\n    \n    container.querySelectorAll('.glazing-card').forEach(card => {\n        // Restore selected state if already chosen\n        if (state.data.glazingType === card.dataset.value) {\n            card.classList.add('selected');\n        }\n        \n        card.addEventListener('click', () => {\n            container.querySelectorAll('.glazing-card').forEach(c => c.classList.remove('selected'));\n            card.classList.add('selected');\n            state.data.glazingType = card.dataset.value;\n            updateNavigation();\n        });\n    });\n}\n\n// Step 5: Render Accessories with Quantities\nfunction renderAccessories() {\n    const container = document.getElementById('accessoriesOptions');\n    \n    // Group accessories by category\n    const categories = {\n        'Charnières': [],\n        'Crémones': [],\n        'Gonds': [],\n        'Joints': [],\n        'Poignées': [],\n        'Rails': [],\n        'Serrures': []\n    };\n    \n    state.catalog.accessories.forEach(acc => {\n        const name = acc.name;\n        if (name.includes('Charnière')) categories['Charnières'].push(acc);\n        else if (name.includes('Crémone')) categories['Crémones'].push(acc);\n        else if (name.includes('Gond')) categories['Gonds'].push(acc);\n        else if (name.includes('Joint') || name.includes('étanchéité')) categories['Joints'].push(acc);\n        else if (name.includes('Poignée')) categories['Poignées'].push(acc);\n        else if (name.includes('Rail')) categories['Rails'].push(acc);\n        else if (name.includes('Serrure')) categories['Serrures'].push(acc);\n    });\n    \n    let html = '<div class=\"accessories-container\">';\n    \n    Object.keys(categories).forEach(category => {\n        if (categories[category].length > 0) {\n            html += `\n                <div class=\"accessory-category\">\n                    <div class=\"accessory-category-title\">${category}</div>\n            `;\n            \n            categories[category].forEach(acc => {\n                const qty = state.data.accessories[acc.name] || 0;\n                html += `\n                    <div class=\"accessory-item-new\" data-name=\"${acc.name}\" data-price=\"${acc.unit_price}\" data-incompatible=\"${acc.incompatible_series || ''}\">\n                        <div class=\"accessory-details\">\n                            <div class=\"accessory-name\">${acc.name}</div>\n                            <div class=\"accessory-price\">${formatMAD(acc.unit_price)}</div>\n                        </div>\n                        <div class=\"quantity-controls\">\n                            <button class=\"qty-btn qty-minus\" data-name=\"${acc.name}\">−</button>\n                            <span class=\"qty-display\" data-name=\"${acc.name}\">${qty}</span>\n                            <button class=\"qty-btn qty-plus\" data-name=\"${acc.name}\">+</button>\n                        </div>\n                    </div>\n                `;\n            });\n            \n            html += '</div>';\n        }\n    });\n    \n    html += '<div class=\"accessory-total\"><span class=\"accessory-total-label\">Total accessoires:</span><span class=\"accessory-total-price\" id=\"accessoryTotalPrice\">' + formatMAD(0) + '</span></div>';\n    html += '</div>';\n    \n    container.innerHTML = html;\n    \n    // Add event listeners for quantity buttons\n    container.querySelectorAll('.qty-minus').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const name = btn.dataset.name;\n            if (state.data.accessories[name] && state.data.accessories[name] > 0) {\n                state.data.accessories[name]--;\n                if (state.data.accessories[name] === 0) {\n                    delete state.data.accessories[name];\n                }\n                updateAccessoryDisplay(name);\n                updateAccessoryTotal();\n            }\n        });\n    });\n    \n    container.querySelectorAll('.qty-plus').forEach(btn => {\n        btn.addEventListener('click', () => {\n            const name = btn.dataset.name;\n            const item = btn.closest('.accessory-item-new');\n            if (!item.classList.contains('disabled')) {\n                state.data.accessories[name] = (state.data.accessories[name] || 0) + 1;\n                updateAccessoryDisplay(name);\n                updateAccessoryTotal();\n            }\n        });\n    });\n}\n\nfunction updateAccessoryDisplay(name) {\n    const qty = state.data.accessories[name] || 0;\n    const displays = document.querySelectorAll(`.qty-display[data-name=\"${name}\"]`);\n    displays.forEach(display => {\n        display.textContent = qty;\n    });\n}\n\nfunction updateAccessoryTotal() {\n    let total = 0;\n    Object.keys(state.data.accessories).forEach(name => {\n        const acc = state.catalog.accessories.find(a => a.name === name);\n        if (acc) {\n            total += acc.unit_price * state.data.accessories[name];\n        }\n    });\n    \n    const totalElement = document.getElementById('accessoryTotalPrice');\n    if (totalElement) {\n        totalElement.textContent = formatMAD(total);\n    }\n}\n\nfunction checkAccessoryCompatibility() {\n    const container = document.getElementById('accessoriesOptions');\n    const warning = document.getElementById('incompatibilityWarning');\n    let hasIncompatibility = false;\n    \n    container.querySelectorAll('.accessory-item-new').forEach(item => {\n        const incompatible = item.dataset.incompatible;\n        \n        if (incompatible && incompatible === state.data.profileSeries) {\n            item.classList.add('disabled');\n            const name = item.dataset.name;\n            delete state.data.accessories[name];\n            updateAccessoryDisplay(name);\n            hasIncompatibility = true;\n        } else {\n            item.classList.remove('disabled');\n        }\n    });\n    \n    if (hasIncompatibility) {\n        warning.textContent = `Certains accessoires ne sont pas compatibles avec ${state.data.profileSeries}`;\n        warning.classList.add('show');\n    } else {\n        warning.classList.remove('show');\n    }\n    \n    updateAccessoryTotal();\n}\n\n// Step 6: Render Finishes grouped\nfunction renderFinishes() {\n    const container = document.getElementById('finishOptions');\n    \n    // Group finishes by category\n    const groups = {\n        'Anodisé': [],\n        'Aluminium Brut': [],\n        'Imitation Bois': [],\n        'Thermolaqué': []\n    };\n    \n    state.catalog.finishes.forEach(finish => {\n        const name = finish.name;\n        if (name.includes('Anodisé')) groups['Anodisé'].push(finish);\n        else if (name.includes('Aluminium brut')) groups['Aluminium Brut'].push(finish);\n        else if (name.includes('Imitation bois')) groups['Imitation Bois'].push(finish);\n        else if (name.includes('Thermolaqué') || name.includes('RAL')) groups['Thermolaqué'].push(finish);\n    });\n    \n    let html = '<div class=\"finish-groups\">';\n    \n    Object.keys(groups).forEach(groupName => {\n        if (groups[groupName].length > 0) {\n            html += `\n                <div class=\"finish-group\">\n                    <div class=\"finish-group-title\">${groupName}</div>\n                    <div class=\"finish-grid\">\n            `;\n            \n            groups[groupName].forEach(finish => {\n                const coefficient = finish.coefficient || 1;\n                const badge = coefficient > 1 ? `+${((coefficient - 1) * 100).toFixed(0)}%` : 'Standard';\n                html += `\n                    <div class=\"finish-card\" data-value=\"${finish.name}\">\n                        <div class=\"finish-card-header\">\n                            <div class=\"finish-name\">${finish.name}</div>\n                            <div class=\"finish-badge\">${badge}</div>\n                        </div>\n                        <div class=\"finish-description\">${finish.description || ''}</div>\n                    </div>\n                `;\n            });\n            \n            html += '</div></div>';\n        }\n    });\n    \n    html += '</div>';\n    container.innerHTML = html;\n    \n    container.querySelectorAll('.finish-card').forEach(card => {\n        // Restore selected state if already chosen\n        if (state.data.finish === card.dataset.value) {\n            card.classList.add('selected');\n        }\n        \n        card.addEventListener('click', () => {\n            container.querySelectorAll('.finish-card').forEach(c => c.classList.remove('selected'));\n            card.classList.add('selected');\n            state.data.finish = card.dataset.value;\n            updateNavigation();\n        });\n    });\n}\n\n// Dimension validation\nfunction validateDimensions() {\n    const type = state.catalog.chassisTypes.find(t => t.name === state.data.chassisType);\n    if (!type) return false;\n    \n    const width = parseInt(document.getElementById('width').value);\n    const height = parseInt(document.getElementById('height').value);\n    \n    const widthError = document.getElementById('widthError');\n    const heightError = document.getElementById('heightError');\n    const widthInput = document.getElementById('width');\n    const heightInput = document.getElementById('height');\n    \n    let valid = true;\n    \n    if (!height || height < type.min_height || height > type.max_height) {\n        heightError.textContent = `Hauteur invalide (${type.min_height}-${type.max_height} mm)`;\n        heightInput.classList.add('error');\n        valid = false;\n    } else {\n        heightError.textContent = '';\n        heightInput.classList.remove('error');\n    }\n    \n    if (!width || width < type.min_width || width > type.max_width) {\n        widthError.textContent = `Largeur invalide (${type.min_width}-${type.max_width} mm)`;\n        widthInput.classList.add('error');\n        valid = false;\n    } else {\n        widthError.textContent = '';\n        widthInput.classList.remove('error');\n    }\n    \n    if (valid) {\n        state.data.width = width;\n        state.data.height = height;\n    }\n    \n    return valid;\n}\n\nfunction updateCalculatedValues() {\n    if (!state.data.width || !state.data.height) return;\n    \n    const container = document.getElementById('calculatedValues');\n    const surface = (state.data.width * state.data.height) / 1000000;\n    \n    container.innerHTML = `\n        <p style=\"font-weight: 600; color: var(--primary);\"><strong>Surface:</strong> ${surface.toFixed(2)} m²</p>\n    `;\n}\n\n// Progress & Navigation\nfunction updateProgress() {\n    document.querySelectorAll('.step-item').forEach((item, index) => {\n        const stepNum = index + 1;\n        if (stepNum < state.currentStep) {\n            item.classList.add('completed');\n            item.classList.remove('active');\n        } else if (stepNum === state.currentStep) {\n            item.classList.add('active');\n            item.classList.remove('completed');\n        } else {\n            item.classList.remove('active', 'completed');\n        }\n    });\n}\n\nfunction showStep(stepNumber) {\n    document.querySelectorAll('.step').forEach(step => step.classList.remove('active'));\n    document.getElementById(`step${stepNumber}`).classList.add('active');\n    \n    state.currentStep = stepNumber;\n    updateProgress();\n    updateNavigation();\n}\n\nfunction updateNavigation() {\n    const prevBtn = document.getElementById('prevBtn');\n    const nextBtn = document.getElementById('nextBtn');\n    const viewSummaryBtn = document.getElementById('viewSummaryBtn');\n    const addItemBtn = document.getElementById('addItemBtn');\n    const addAnotherBtn = document.getElementById('addAnotherBtn');\n    const saveQuoteBtn = document.getElementById('saveQuoteBtn');\n    \n    prevBtn.style.display = state.currentStep === 1 ? 'none' : 'block';\n    nextBtn.style.display = state.currentStep < 7 ? 'block' : 'none';\n    viewSummaryBtn.style.display = state.currentStep === 7 ? 'block' : 'none';\n    \n    // Step 8: Show appropriate buttons\n    if (state.currentStep === 8) {\n        // Show current item section\n        document.getElementById('currentItem').style.display = 'block';\n        document.getElementById('quantitySection').style.display = 'block';\n        addItemBtn.style.display = 'block';\n        addAnotherBtn.style.display = 'none';\n        saveQuoteBtn.style.display = state.items.length > 0 ? 'block' : 'none';\n    } else {\n        addItemBtn.style.display = 'none';\n        addAnotherBtn.style.display = 'none';\n        saveQuoteBtn.style.display = 'none';\n        if (document.getElementById('quantitySection')) {\n            document.getElementById('quantitySection').style.display = 'none';\n        }\n    }\n    \n    const canProgress = canProgressToNextStep();\n    nextBtn.disabled = !canProgress;\n    viewSummaryBtn.disabled = !canProgressToNextStep();\n}\n\nfunction canProgressToNextStep() {\n    switch(state.currentStep) {\n        case 1:\n            return state.data.chassisType !== null;\n        case 2:\n            return state.data.width !== null && state.data.height !== null;\n        case 3:\n            return state.data.profileSeries !== null;\n        case 4:\n            return state.data.glazingType !== null;\n        case 5:\n            return true; // Accessories optional\n        case 6:\n            return state.data.finish !== null;\n        case 7:\n            return state.data.clientName.trim() !== '';\n        default:\n            return false;\n    }\n}\n\nfunction getValidationMessage() {\n    switch(state.currentStep) {\n        case 1:\n            return 'Veuillez sélectionner un type de châssis';\n        case 2:\n            return 'Veuillez entrer les dimensions (largeur et hauteur)';\n        case 3:\n            return 'Veuillez sélectionner une série de profilés';\n        case 4:\n            return 'Veuillez sélectionner un type de vitrage';\n        case 6:\n            return 'Veuillez sélectionner une finition';\n        case 7:\n            return 'Veuillez entrer le nom du client';\n        default:\n            return 'Veuillez compléter cette étape';\n    }\n}\n\nfunction showError(message) {\n    const errorDiv = document.createElement('div');\n    errorDiv.style.cssText = 'position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background: #ef4444; color: white; padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 9999; animation: slideDown 0.3s ease-out;';\n    errorDiv.textContent = message;\n    document.body.appendChild(errorDiv);\n    \n    setTimeout(() => {\n        errorDiv.style.animation = 'slideUp 0.3s ease-in';\n        setTimeout(() => errorDiv.remove(), 300);\n    }, 3000);\n}\n\nfunction showToast(message, type = 'info') {\n    const colors = {\n        success: '#10b981',\n        error: '#ef4444',\n        info: '#3b82f6',\n        warning: '#f59e0b'\n    };\n    \n    const toastDiv = document.createElement('div');\n    toastDiv.style.cssText = `position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background: ${colors[type] || colors.info}; color: white; padding: 1rem 1.5rem; border-radius: 8px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); z-index: 9999; animation: slideDown 0.3s ease-out;`;\n    toastDiv.textContent = message;\n    document.body.appendChild(toastDiv);\n    \n    setTimeout(() => {\n        toastDiv.style.animation = 'slideUp 0.3s ease-in';\n        setTimeout(() => toastDiv.remove(), 300);\n    }, 3000);\n}\n\n// Calculate Price\nasync function calculateAndShowSummary() {\n    // Collect client data\n    state.data.clientName = document.getElementById('clientName').value;\n    state.data.clientEmail = document.getElementById('clientEmail').value;\n    state.data.clientPhone = document.getElementById('clientPhone').value;\n    state.data.clientNotes = document.getElementById('clientNotes').value;\n    \n    if (!state.data.clientName.trim()) {\n        showError('Veuillez renseigner le nom du client');\n        return;\n    }\n    \n    showLoading(true);\n    \n    try {\n        const response = await fetch('/api/quotes/calculate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(state.data),\n            credentials: 'include'\n        });\n        \n        if (!response.ok) {\n            const error = await response.json().catch(() => ({}));\n            throw new Error(error.error || 'Erreur lors du calcul');\n        }\n        \n        state.breakdown = await response.json();\n        renderSummary();\n        showStep(8);\n        \n    } catch (error) {\n        console.error('Error calculating price:', error);\n        showError(error.message || 'Erreur lors du calcul du prix. Vérifiez toutes les données.');\n    } finally {\n        showLoading(false);\n    }\n}\n\n// Render Summary\nfunction renderSummary() {\n    const summaryContent = document.getElementById('summaryContent');\n    const priceBreakdown = document.getElementById('priceBreakdown');\n    \n    // Summary sections\n    let summaryHTML = '';\n    \n    // Product info\n    summaryHTML += `\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">PRODUIT</div>\n            <div class=\"summary-item\">\n                <div class=\"summary-value\">${state.data.chassisType}</div>\n            </div>\n        </div>\n    `;\n    \n    // Dimensions\n    const surface = (state.data.width * state.data.height) / 1000000;\n    summaryHTML += `\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">DIMENSIONS</div>\n            <div class=\"summary-grid\">\n                <div class=\"summary-item\">\n                    <div class=\"summary-value\">${state.data.width} x ${state.data.height} mm</div>\n                    <div class=\"summary-label\">${surface.toFixed(2)} m²</div>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    // Profile & Glazing\n    summaryHTML += `\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">PROFILÉ</div>\n            <div class=\"summary-value\">${state.data.profileSeries}</div>\n        </div>\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">VITRAGE</div>\n            <div class=\"summary-value\">${state.data.glazingType}</div>\n        </div>\n    `;\n    \n    // Finish\n    summaryHTML += `\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">FINITION</div>\n            <div class=\"summary-value\">${state.data.finish}</div>\n        </div>\n    `;\n    \n    // Accessories\n    const accList = Object.keys(state.data.accessories).map(name => \n        `${name} (unité) x ${state.data.accessories[name]}`\n    ).join('<br>');\n    \n    if (accList) {\n        summaryHTML += `\n            <div class=\"summary-section\">\n                <div class=\"summary-section-title\">ACCESSOIRES</div>\n                <div class=\"summary-value\" style=\"font-size: 0.9375rem; line-height: 1.6;\">${accList}</div>\n            </div>\n        `;\n    }\n    \n    // Client\n    summaryHTML += `\n        <div class=\"summary-section\">\n            <div class=\"summary-section-title\">CLIENT</div>\n            <div class=\"summary-value\">${state.data.clientName}</div>\n            ${state.data.clientEmail ? `<div class=\"summary-label\">${state.data.clientEmail}</div>` : ''}\n            ${state.data.clientPhone ? `<div class=\"summary-label\">${state.data.clientPhone}</div>` : ''}\n            ${state.data.clientNotes ? `<div class=\"summary-label\" style=\"margin-top: 0.5rem; font-style: italic;\">${state.data.clientNotes}</div>` : ''}\n        </div>\n    `;\n    \n    summaryContent.innerHTML = summaryHTML;\n    \n    // Price breakdown\n    if (state.breakdown) {\n        let priceHTML = `\n            <div class=\"price-breakdown-title\">Détail des prix</div>\n            <div class=\"price-line\">\n                <span class=\"price-line-label\">Prix de base</span>\n                <span class=\"price-line-value\">${formatMAD(state.breakdown.base_price)}</span>\n            </div>\n            <div class=\"price-line\">\n                <span class=\"price-line-label\">Vitrage</span>\n                <span class=\"price-line-value\">${formatMAD(state.breakdown.glazing_cost)}</span>\n            </div>\n            <div class=\"price-line\">\n                <span class=\"price-line-label\">Accessoires</span>\n                <span class=\"price-line-value\">${formatMAD(state.breakdown.accessories_cost)}</span>\n            </div>\n            <div class=\"price-line\">\n                <span class=\"price-line-label\">Supplément finition</span>\n                <span class=\"price-line-value\">${formatMAD(state.breakdown.finish_supplement)}</span>\n            </div>\n            <div class=\"price-total\">\n                <span class=\"price-total-label\">Total TTC</span>\n                <span class=\"price-total-value\">${formatMAD(state.breakdown.total_price)}</span>\n            </div>\n        `;\n        \n        priceBreakdown.innerHTML = priceHTML;\n    }\n}\n\n// Add current item to items list\nfunction addItemToQuote() {\n    const quantity = parseInt(document.getElementById('itemQuantity').value) || 1;\n    \n    const item = {\n        ...state.data,\n        breakdown: state.breakdown,\n        quantity: quantity\n    };\n    \n    if (state.editingItemIndex !== null) {\n        // Update existing item\n        state.items[state.editingItemIndex] = item;\n        state.editingItemIndex = null;\n    } else {\n        // Add new item\n        state.items.push(item);\n    }\n    \n    // Show items list and update display\n    updateItemsList();\n    \n    // Hide current item section and show \"add another\" button\n    document.getElementById('currentItem').style.display = 'none';\n    document.getElementById('quantitySection').style.display = 'none';\n    document.getElementById('addItemBtn').style.display = 'none';\n    document.getElementById('addAnotherBtn').style.display = 'inline-flex';\n    document.getElementById('saveQuoteBtn').style.display = 'inline-flex';\n}\n\n// Start new item (reset workflow)\nfunction addAnotherItem() {\n    // Reset current item data (except client info which stays the same)\n    const clientInfo = {\n        clientName: state.data.clientName,\n        clientEmail: state.data.clientEmail,\n        clientPhone: state.data.clientPhone,\n        clientNotes: state.data.clientNotes\n    };\n    \n    state.data = {\n        chassisType: null,\n        width: null,\n        height: null,\n        profileSeries: null,\n        glazingType: null,\n        finish: null,\n        accessories: {},\n        ...clientInfo\n    };\n    state.breakdown = null;\n    state.editingItemIndex = null;\n    \n    // Reset all form fields\n    document.getElementById('width').value = '';\n    document.getElementById('height').value = '';\n    document.getElementById('itemQuantity').value = '1';\n    \n    // Clear selected options (remove active classes)\n    document.querySelectorAll('.product-option.active, .option-card.active').forEach(el => {\n        el.classList.remove('active');\n    });\n    \n    // Clear accessory checkboxes\n    document.querySelectorAll('#accessoriesOptions input[type=\"checkbox\"]').forEach(cb => {\n        cb.checked = false;\n    });\n    \n    // Clear calculated values\n    const calculatedValues = document.getElementById('calculatedValues');\n    if (calculatedValues) {\n        calculatedValues.innerHTML = '';\n    }\n    \n    // Go back to step 1\n    showStep(1);\n}\n\n// Edit an existing item\nfunction editItem(index) {\n    const item = state.items[index];\n    state.data = { ...item };\n    state.breakdown = item.breakdown;\n    state.editingItemIndex = index;\n    \n    // Go to step 1 to edit\n    showStep(1);\n}\n\n// Delete an item\nfunction deleteItem(index) {\n    if (confirm('Supprimer cet article du devis ?')) {\n        state.items.splice(index, 1);\n        updateItemsList();\n        \n        // If no items left, hide the save button\n        if (state.items.length === 0) {\n            document.getElementById('saveQuoteBtn').style.display = 'none';\n        }\n    }\n}\n\n// Update items list display\nfunction updateItemsList() {\n    const itemsList = document.getElementById('itemsList');\n    const itemsContainer = document.getElementById('itemsContainer');\n    const itemsCount = document.getElementById('itemsCount');\n    \n    if (state.items.length === 0) {\n        itemsList.style.display = 'none';\n        return;\n    }\n    \n    itemsList.style.display = 'block';\n    itemsCount.textContent = state.items.length;\n    \n    let totalGlobal = 0;\n    let itemsHTML = '';\n    \n    state.items.forEach((item, index) => {\n        const surface = (item.width * item.height) / 1000000;\n        const accList = Object.keys(item.accessories).length > 0 ? \n            Object.keys(item.accessories).map(name => `${name} x${item.accessories[name]}`).join(', ') : \n            'Aucun';\n        \n        const quantity = item.quantity || 1;\n        const itemTotal = item.breakdown.total_price * quantity;\n        totalGlobal += itemTotal;\n        \n        itemsHTML += `\n            <div class=\"item-card\">\n                <div class=\"item-card-header\">\n                    <h4>Article ${index + 1}: ${item.chassisType}</h4>\n                    <div class=\"item-card-actions\">\n                        <button class=\"btn-icon\" onclick=\"editItem(${index})\" title=\"Modifier\">\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"/>\n                                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"/>\n                            </svg>\n                        </button>\n                        <button class=\"btn-icon btn-icon-danger\" onclick=\"deleteItem(${index})\" title=\"Supprimer\">\n                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <path d=\"M3 6h18M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"/>\n                            </svg>\n                        </button>\n                    </div>\n                </div>\n                <div class=\"item-card-body\">\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Dimensions:</span>\n                        <span class=\"item-info-value\">${item.width} x ${item.height} mm (${surface.toFixed(2)} m²)</span>\n                    </div>\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Profilé:</span>\n                        <span class=\"item-info-value\">${item.profileSeries}</span>\n                    </div>\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Vitrage:</span>\n                        <span class=\"item-info-value\">${item.glazingType}</span>\n                    </div>\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Finition:</span>\n                        <span class=\"item-info-value\">${item.finish}</span>\n                    </div>\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Accessoires:</span>\n                        <span class=\"item-info-value\">${accList}</span>\n                    </div>\n                    <div class=\"item-info-row\">\n                        <span class=\"item-info-label\">Quantité:</span>\n                        <span class=\"item-info-value\">${quantity}</span>\n                    </div>\n                    <div class=\"item-price\">\n                        ${formatMAD(item.breakdown.total_price)} × ${quantity} = ${formatMAD(itemTotal)}\n                    </div>\n                </div>\n            </div>\n        `;\n    });\n    \n    // Add total\n    itemsHTML += `\n        <div class=\"items-total\">\n            <span class=\"items-total-label\">Total du devis</span>\n            <span class=\"items-total-value\">${formatMAD(totalGlobal)}</span>\n        </div>\n    `;\n    \n    itemsContainer.innerHTML = itemsHTML;\n}\n\n// Save Quote (with all items)\nasync function saveQuote() {\n    if (state.items.length === 0) {\n        alert('Ajoutez au moins un article au devis avant d\\'enregistrer');\n        return;\n    }\n    \n    showLoading(true);\n    \n    try {\n        // Use the first item's client info and calculate total\n        const firstItem = state.items[0];\n        const totalPrice = state.items.reduce((sum, item) => {\n            const quantity = item.quantity || 1;\n            return sum + (item.breakdown.total_price * quantity);\n        }, 0);\n        \n        const response = await fetch('/api/quotes', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                chassisType: `Devis multiple (${state.items.length} articles)`,\n                width: 0,\n                height: 0,\n                profileSeries: 'Multiple',\n                glazingType: 'Multiple',\n                finish: 'Multiple',\n                accessories: {},\n                clientName: firstItem.clientName,\n                clientEmail: firstItem.clientEmail,\n                clientPhone: firstItem.clientPhone,\n                clientNotes: firstItem.clientNotes,\n                breakdown: {\n                    items: state.items,\n                    total_price: totalPrice\n                }\n            }),\n            credentials: 'include'\n        });\n        \n        if (!response.ok) throw new Error('Save failed');\n        \n        const result = await response.json();\n        alert('Devis enregistré avec succès !');\n        \n        // Generate PDF\n        await generatePDF(result.quote_id);\n        \n    } catch (error) {\n        console.error('Error saving quote:', error);\n        alert('Erreur lors de l\\'enregistrement du devis');\n    } finally {\n        showLoading(false);\n    }\n}\n\n// Generate PDF\nasync function generatePDF(quoteId) {\n    try {\n        const response = await fetch(`/api/quotes/${quoteId}/pdf`, { credentials: 'include' });\n        \n        if (!response.ok) throw new Error('PDF generation failed');\n        \n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `devis_${quoteId}.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        window.URL.revokeObjectURL(url);\n        \n        // Redirect to dashboard after short delay\n        setTimeout(() => {\n            window.location.href = '/dashboard.html';\n        }, 2000);\n        \n    } catch (error) {\n        console.error('Error generating PDF:', error);\n        alert('Erreur lors de la génération du PDF');\n    }\n}\n\n// Event Listeners\ndocument.getElementById('cancelBtn').addEventListener('click', () => {\n    if (confirm('Voulez-vous vraiment annuler ? Toutes les données seront perdues.')) {\n        window.location.href = '/dashboard.html';\n    }\n});\n\ndocument.getElementById('prevBtn').addEventListener('click', () => {\n    if (state.currentStep > 1) {\n        showStep(state.currentStep - 1);\n    }\n});\n\ndocument.getElementById('nextBtn').addEventListener('click', () => {\n    // Check if button is disabled\n    if (document.getElementById('nextBtn').disabled) {\n        showError(getValidationMessage());\n        return;\n    }\n    \n    if (state.currentStep === 2) {\n        if (!validateDimensions()) return;\n    }\n    \n    if (state.currentStep < 7) {\n        if (canProgressToNextStep()) {\n            showStep(state.currentStep + 1);\n        } else {\n            showError(getValidationMessage());\n        }\n    }\n});\n\ndocument.getElementById('viewSummaryBtn').addEventListener('click', calculateAndShowSummary);\ndocument.getElementById('addItemBtn').addEventListener('click', addItemToQuote);\ndocument.getElementById('addAnotherBtn').addEventListener('click', addAnotherItem);\ndocument.getElementById('saveQuoteBtn').addEventListener('click', saveQuote);\n\ndocument.getElementById('width').addEventListener('input', () => {\n    state.data.width = parseInt(document.getElementById('width').value) || null;\n    if (state.currentStep === 2) {\n        updateCalculatedValues();\n        updateNavigation();\n    }\n});\n\ndocument.getElementById('height').addEventListener('input', () => {\n    state.data.height = parseInt(document.getElementById('height').value) || null;\n    if (state.currentStep === 2) {\n        updateCalculatedValues();\n        updateNavigation();\n    }\n});\n\ndocument.getElementById('clientName').addEventListener('input', () => {\n    state.data.clientName = document.getElementById('clientName').value;\n    updateNavigation();\n});\n\ndocument.getElementById('dashboardBtn').addEventListener('click', () => {\n    window.location.href = '/dashboard.html';\n});\n\ndocument.getElementById('profileBtn').addEventListener('click', () => {\n    window.location.href = '/profile.html';\n});\n\ndocument.getElementById('settingsBtn').addEventListener('click', () => {\n    window.location.href = '/settings.html';\n});\n\ndocument.getElementById('logoutBtn').addEventListener('click', async () => {\n    try {\n        await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });\n        window.location.href = '/login.html';\n    } catch (error) {\n        console.error('Logout failed:', error);\n        window.location.href = '/login.html';\n    }\n});\n\n// Quantity controls\ndocument.getElementById('decreaseQty').addEventListener('click', () => {\n    const qtyInput = document.getElementById('itemQuantity');\n    const currentQty = parseInt(qtyInput.value) || 1;\n    if (currentQty > 1) {\n        qtyInput.value = currentQty - 1;\n    }\n});\n\ndocument.getElementById('increaseQty').addEventListener('click', () => {\n    const qtyInput = document.getElementById('itemQuantity');\n    const currentQty = parseInt(qtyInput.value) || 1;\n    qtyInput.value = currentQty + 1;\n});\n\n// Service Worker (disabled during development)\nif ('serviceWorker' in navigator) {\n    navigator.serviceWorker.register('/sw.js').then(() => {\n        console.log('Service Worker registered');\n    }).catch(err => {\n        console.log('Service Worker registration failed:', err);\n    });\n}\n\n// Initialize\nasync function init() {\n    if (await checkAuth()) {\n        await loadCatalog();\n        \n        // Check if we're in edit mode\n        const urlParams = new URLSearchParams(window.location.search);\n        const editId = urlParams.get('edit');\n        \n        if (editId) {\n            await loadQuoteForEdit(editId);\n        }\n        \n        updateProgress();\n        updateNavigation();\n    }\n}\n\nasync function loadQuoteForEdit(quoteId) {\n    try {\n        const response = await fetch(`/api/quotes/${quoteId}`, { credentials: 'include' });\n        if (!response.ok) throw new Error('Failed to load quote');\n        \n        const quote = await response.json();\n        const details = typeof quote.details === 'string' ? JSON.parse(quote.details) : quote.details;\n        const items = details.items || [];\n        \n        // If multi-item quote, load all items\n        if (items.length > 0) {\n            state.items = items;\n            state.editingItemIndex = null;\n            \n            // Load first item for editing\n            const firstItem = items[0];\n            state.data = {\n                chassisType: firstItem.chassisType,\n                width: firstItem.width,\n                height: firstItem.height,\n                profileSeries: firstItem.profileSeries,\n                glazingType: firstItem.glazingType,\n                finish: firstItem.finish,\n                accessories: firstItem.accessories || {},\n                clientName: details.client_name || '',\n                clientEmail: details.client_email || '',\n                clientPhone: details.client_phone || '',\n                clientNotes: details.client_notes || ''\n            };\n            state.breakdown = firstItem.breakdown;\n        } else {\n            // Single item quote\n            const accessories = typeof quote.accessories === 'string' ? JSON.parse(quote.accessories) : quote.accessories;\n            state.data = {\n                chassisType: quote.chassis_type,\n                width: quote.width,\n                height: quote.height,\n                profileSeries: quote.profile_series,\n                glazingType: quote.glazing_type,\n                finish: quote.finish,\n                accessories: accessories || {},\n                clientName: details.client_name || '',\n                clientEmail: details.client_email || '',\n                clientPhone: details.client_phone || '',\n                clientNotes: details.client_notes || ''\n            };\n        }\n        \n        // Pre-fill form fields for client info\n        if (state.data.clientName) document.getElementById('clientName').value = state.data.clientName;\n        if (state.data.clientEmail) document.getElementById('clientEmail').value = state.data.clientEmail;\n        if (state.data.clientPhone) document.getElementById('clientPhone').value = state.data.clientPhone;\n        if (state.data.clientNotes) document.getElementById('clientNotes').value = state.data.clientNotes;\n        \n        // Pre-fill dimensions\n        if (state.data.width) document.getElementById('width').value = state.data.width;\n        if (state.data.height) document.getElementById('height').value = state.data.height;\n        \n        // Re-render all steps to show selected items\n        renderChassisTypes();\n        renderProfileSeries();\n        renderGlazingTypes();\n        renderFinishes();\n        renderAccessories();\n        \n        showToast('Devis chargé pour modification', 'success');\n    } catch (error) {\n        console.error('Error loading quote for edit:', error);\n        showToast('Erreur lors du chargement du devis', 'error');\n    }\n}\n\ninit();\n","size_bytes":45387},"app/static/js/dashboard.js":{"content":"async function checkAuth() {\n    try {\n        const response = await fetch('/api/auth/check', { credentials: 'include' });\n        const data = await response.json();\n        \n        if (!data.authenticated) {\n            window.location.href = '/login.html';\n            return false;\n        }\n        return true;\n    } catch (error) {\n        console.error('Auth check failed:', error);\n        window.location.href = '/login.html';\n        return false;\n    }\n}\n\nasync function loadDashboardData() {\n    try {\n        const [statsResponse, quotesResponse] = await Promise.all([\n            fetch('/api/quotes/stats', { credentials: 'include' }),\n            fetch('/api/quotes/recent', { credentials: 'include' })\n        ]);\n\n        if (!statsResponse.ok || !quotesResponse.ok) {\n            throw new Error('Failed to load dashboard data');\n        }\n\n        const stats = await statsResponse.json();\n        const quotes = await quotesResponse.json();\n\n        updateMetrics(stats);\n        displayRecentQuotes(quotes);\n    } catch (error) {\n        console.error('Error loading dashboard:', error);\n        showError('Erreur lors du chargement des données');\n    }\n}\n\nfunction updateMetrics(stats) {\n    document.getElementById('totalQuotes').textContent = stats.total || 0;\n    document.getElementById('totalAmount').textContent = formatCurrency(stats.totalAmount || 0);\n    document.getElementById('monthQuotes').textContent = stats.thisMonth || 0;\n    document.getElementById('monthAmount').textContent = formatCurrency(stats.thisMonthAmount || 0);\n    document.getElementById('weekQuotes').textContent = stats.thisWeek || 0;\n    document.getElementById('weekAmount').textContent = formatCurrency(stats.thisWeekAmount || 0);\n    document.getElementById('totalItems').textContent = stats.totalItems || 0;\n    document.getElementById('topClient').textContent = stats.topClient || '-';\n}\n\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat('fr-MA', {\n        style: 'currency',\n        currency: 'MAD',\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n    }).format(amount);\n}\n\nfunction formatDate(dateString) {\n    const date = new Date(dateString);\n    return new Intl.DateTimeFormat('fr-FR', {\n        day: '2-digit',\n        month: 'short',\n        year: 'numeric'\n    }).format(date);\n}\n\nfunction displayRecentQuotes(quotes) {\n    const container = document.getElementById('quotesTable');\n    \n    if (!quotes || quotes.length === 0) {\n        container.innerHTML = `\n            <div class=\"empty-state\">\n                <svg width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1\">\n                    <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\"></path>\n                    <polyline points=\"14 2 14 8 20 8\"></polyline>\n                </svg>\n                <p>Aucun devis pour le moment</p>\n                <button onclick=\"window.location.href='/quote.html'\" class=\"btn-primary\">Créer votre premier devis</button>\n            </div>\n        `;\n        return;\n    }\n\n    const tableHTML = `\n        <table>\n            <thead>\n                <tr>\n                    <th>N° Devis</th>\n                    <th>Client</th>\n                    <th>Produit</th>\n                    <th>Date</th>\n                    <th>Montant TTC</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                ${quotes.map(quote => `\n                    <tr>\n                        <td><strong>${quote.quote_number}</strong></td>\n                        <td>${quote.client_name || '-'}</td>\n                        <td>${quote.chassis_type_name || '-'}</td>\n                        <td>${formatDate(quote.created_at)}</td>\n                        <td><strong>${formatCurrency(quote.total_price)}</strong></td>\n                        <td>\n                            <div style=\"display: flex; gap: 0.5rem; justify-content: center;\">\n                                <button onclick=\"viewQuote(${quote.id})\" class=\"btn-icon\" title=\"Voir\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"></path>\n                                        <circle cx=\"12\" cy=\"12\" r=\"3\"></circle>\n                                    </svg>\n                                </button>\n                                <button onclick=\"sendQuoteByEmail(${quote.id})\" class=\"btn-icon\" title=\"Envoyer par Email\" style=\"background: #10B981;\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"white\" stroke-width=\"2\">\n                                        <path d=\"M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z\"></path>\n                                        <polyline points=\"22,6 12,13 2,6\"></polyline>\n                                    </svg>\n                                </button>\n                                <button onclick=\"editQuote(${quote.id})\" class=\"btn-icon\" title=\"Modifier\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\"></path>\n                                        <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\"></path>\n                                    </svg>\n                                </button>\n                                <button onclick=\"deleteQuote(${quote.id})\" class=\"btn-icon btn-icon-danger\" title=\"Supprimer\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <polyline points=\"3 6 5 6 21 6\"></polyline>\n                                        <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path>\n                                    </svg>\n                                </button>\n                                <button onclick=\"downloadPDF(${quote.id})\" class=\"btn-icon\" title=\"Télécharger PDF\">\n                                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                        <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                                        <polyline points=\"7 10 12 15 17 10\"></polyline>\n                                        <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"></line>\n                                    </svg>\n                                </button>\n                            </div>\n                        </td>\n                    </tr>\n                `).join('')}\n            </tbody>\n        </table>\n    `;\n    \n    container.innerHTML = tableHTML;\n}\n\nasync function viewQuote(quoteId) {\n    try {\n        const response = await fetch(`/api/quotes/${quoteId}`, { credentials: 'include' });\n        \n        if (!response.ok) {\n            throw new Error('Failed to fetch quote');\n        }\n\n        const quote = await response.json();\n        showQuoteModal(quote);\n    } catch (error) {\n        console.error('Error viewing quote:', error);\n        showToast('Erreur lors de la récupération du devis', 'error');\n    }\n}\n\nfunction showQuoteModal(quote) {\n    let details;\n    try {\n        details = typeof quote.details === 'string' ? JSON.parse(quote.details) : quote.details;\n    } catch (e) {\n        console.error('Error parsing quote details:', e);\n        showToast('Erreur lors de l\\'affichage des détails du devis', 'error');\n        return;\n    }\n    \n    const items = details.items || [];\n    \n    let itemsHTML = '';\n    if (items.length > 0) {\n        itemsHTML = `\n            <h4 style=\"margin-top: 1.5rem; margin-bottom: 1rem; font-size: 1.125rem;\">Articles (${items.length})</h4>\n            ${items.map((item, idx) => {\n                const breakdown = item.breakdown || {};\n                const accessories = item.accessories || {};\n                const accessoriesList = Object.entries(accessories)\n                    .filter(([name, qty]) => qty > 0)\n                    .map(([name, qty]) => `${name} (×${qty})`)\n                    .join(', ') || 'Aucun';\n                    \n                const quantity = item.quantity || 1;\n                const unitPrice = breakdown.total_price || 0;\n                const itemTotal = unitPrice * quantity;\n                \n                return `\n                <div style=\"border: 1px solid #e5e7eb; border-radius: 8px; padding: 1rem; margin-bottom: 1rem;\">\n                    <h5 style=\"margin-bottom: 0.75rem; color: #3B82F6;\">Article ${idx + 1} - ${item.chassisType || item.chassis_type || ''}</h5>\n                    <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; font-size: 0.9rem;\">\n                        <div><strong>Dimensions:</strong> ${item.width} × ${item.height} mm</div>\n                        <div><strong>Surface:</strong> ${breakdown.surface_m2 || 0} m²</div>\n                        <div><strong>Périmètre:</strong> ${breakdown.perimeter_m || 0} m</div>\n                        <div><strong>Série:</strong> ${item.profileSeries || item.profile_series || ''}</div>\n                        <div><strong>Vitrage:</strong> ${item.glazingType || item.glazing_type || ''}</div>\n                        <div><strong>Finition:</strong> ${item.finish || ''}</div>\n                        <div style=\"grid-column: 1 / -1;\"><strong>Accessoires:</strong> ${accessoriesList}</div>\n                        <div><strong>Quantité:</strong> ${quantity}</div>\n                    </div>\n                    <div style=\"margin-top: 1rem; padding-top: 1rem; border-top: 1px solid #e5e7eb;\">\n                        <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; font-size: 0.85rem;\">\n                            <div>Base: ${formatCurrency(breakdown.base_price || 0)}</div>\n                            <div>Vitrage: ${formatCurrency(breakdown.glazing_cost || 0)}</div>\n                            <div>Profilés: ${formatCurrency(breakdown.profile_cost || 0)}</div>\n                            <div>Accessoires: ${formatCurrency(breakdown.accessories_cost || 0)}</div>\n                            <div>Finition: ${formatCurrency(breakdown.finish_supplement || 0)}</div>\n                            <div>Main d'œuvre: ${formatCurrency(breakdown.labor || 0)}</div>\n                        </div>\n                        <div style=\"margin-top: 0.5rem; text-align: right; font-size: 1rem; font-weight: bold; color: #3B82F6;\">\n                            Prix unitaire: ${formatCurrency(unitPrice)} × ${quantity} = ${formatCurrency(itemTotal)}\n                        </div>\n                    </div>\n                </div>\n            `;}).join('')}\n            <div style=\"background: #3B82F6; color: white; padding: 1rem; border-radius: 8px; font-size: 1.25rem; font-weight: bold; text-align: right;\">\n                Total du devis: ${formatCurrency(items.reduce((sum, item) => {\n                    const quantity = item.quantity || 1;\n                    const unitPrice = (item.breakdown || {}).total_price || 0;\n                    return sum + (unitPrice * quantity);\n                }, 0))}\n            </div>\n        `;\n    } else {\n        const accessories = JSON.parse(quote.accessories || '{}');\n        const accessoriesList = Object.entries(accessories)\n            .filter(([name, qty]) => qty > 0)\n            .map(([name, qty]) => `${name} (×${qty})`)\n            .join(', ') || 'Aucun';\n            \n        itemsHTML = `\n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 0.75rem; margin-top: 1rem;\">\n                <div><strong>Type:</strong> ${quote.chassis_type_name || quote.chassis_type || ''}</div>\n                <div><strong>Dimensions:</strong> ${quote.width} × ${quote.height} mm</div>\n                <div><strong>Série:</strong> ${quote.profile_series || ''}</div>\n                <div><strong>Vitrage:</strong> ${quote.glazing_type || ''}</div>\n                <div><strong>Finition:</strong> ${quote.finish || ''}</div>\n                <div style=\"grid-column: 1 / -1;\"><strong>Accessoires:</strong> ${accessoriesList}</div>\n                <div style=\"grid-column: 1 / -1;\"><strong>Prix Total:</strong> ${formatCurrency(quote.total_price || 0)}</div>\n            </div>\n        `;\n    }\n    \n    const modalHTML = `\n        <div class=\"modal-overlay\" onclick=\"closeModal()\">\n            <div class=\"modal-content\" onclick=\"event.stopPropagation()\" style=\"max-width: 800px; max-height: 90vh; overflow-y: auto;\">\n                <div class=\"modal-header\">\n                    <h3>Devis ${quote.quote_number}</h3>\n                    <button onclick=\"closeModal()\" class=\"btn-icon\">\n                        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"modal-body\">\n                    <div style=\"margin-bottom: 1.5rem;\">\n                        <h4 style=\"margin-bottom: 0.5rem;\">Informations client</h4>\n                        <div><strong>Nom:</strong> ${details.client_name || '-'}</div>\n                        <div><strong>Téléphone:</strong> ${details.client_phone || '-'}</div>\n                        <div><strong>Email:</strong> ${details.client_email || '-'}</div>\n                        ${details.client_notes ? `<div><strong>Notes:</strong> ${details.client_notes}</div>` : ''}\n                    </div>\n                    ${itemsHTML}\n                </div>\n                <div class=\"modal-footer\">\n                    <button onclick=\"closeModal()\" class=\"btn-secondary\">Fermer</button>\n                    <button onclick=\"sendQuoteByEmail(${quote.id}); closeModal();\" class=\"btn-primary\" style=\"background: #10B981;\">\n                        📧 Envoyer par Email\n                    </button>\n                    <button onclick=\"downloadPDF(${quote.id}); closeModal();\" class=\"btn-primary\">📥 Télécharger PDF</button>\n                </div>\n            </div>\n        </div>\n    `;\n    \n    document.body.insertAdjacentHTML('beforeend', modalHTML);\n}\n\nfunction closeModal() {\n    const modal = document.querySelector('.modal-overlay');\n    if (modal) {\n        modal.remove();\n    }\n}\n\nasync function editQuote(quoteId) {\n    window.location.href = `/quote.html?edit=${quoteId}`;\n}\n\nasync function deleteQuote(quoteId) {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer ce devis ? Cette action est irréversible.')) {\n        return;\n    }\n    \n    try {\n        const response = await fetch(`/api/quotes/${quoteId}`, {\n            method: 'DELETE',\n            credentials: 'include'\n        });\n        \n        if (!response.ok) {\n            throw new Error('Failed to delete quote');\n        }\n        \n        showToast('Devis supprimé avec succès', 'success');\n        loadDashboardData();\n    } catch (error) {\n        console.error('Error deleting quote:', error);\n        showToast('Erreur lors de la suppression du devis', 'error');\n    }\n}\n\nasync function downloadPDF(quoteId) {\n    try {\n        const response = await fetch(`/api/quotes/${quoteId}/pdf`, { credentials: 'include' });\n        \n        if (!response.ok) {\n            throw new Error('Failed to download PDF');\n        }\n\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `devis_${quoteId}.pdf`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n        \n        showToast('PDF téléchargé avec succès', 'success');\n    } catch (error) {\n        console.error('Error downloading PDF:', error);\n        showToast('Erreur lors du téléchargement du PDF', 'error');\n    }\n}\n\nfunction showToast(message, type = 'info') {\n    const toast = document.createElement('div');\n    toast.className = `toast toast-${type}`;\n    toast.textContent = message;\n    document.body.appendChild(toast);\n    \n    setTimeout(() => {\n        toast.classList.add('show');\n    }, 10);\n    \n    setTimeout(() => {\n        toast.classList.remove('show');\n        setTimeout(() => document.body.removeChild(toast), 300);\n    }, 3000);\n}\n\nfunction showError(message) {\n    const container = document.getElementById('quotesTable');\n    container.innerHTML = `\n        <div class=\"error-state\">\n            <svg width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"#f44336\" stroke-width=\"2\">\n                <circle cx=\"12\" cy=\"12\" r=\"10\"></circle>\n                <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"12\"></line>\n                <line x1=\"12\" y1=\"16\" x2=\"12.01\" y2=\"16\"></line>\n            </svg>\n            <p>${message}</p>\n        </div>\n    `;\n}\n\nasync function sendQuoteByEmail(quoteId) {\n    try {\n        const quoteResponse = await fetch(`/api/quotes/${quoteId}`, { credentials: 'include' });\n        if (!quoteResponse.ok) {\n            throw new Error('Impossible de récupérer les informations du devis');\n        }\n        \n        const quote = await quoteResponse.json();\n        const details = JSON.parse(quote.details || '{}');\n        \n        let email = details.client_email || '';\n        \n        if (!email || email.trim() === '') {\n            email = prompt('Le devis n\\'a pas d\\'email client.\\nEntrez l\\'adresse email du destinataire :');\n            if (!email || email.trim() === '') {\n                showToast('⚠️ Email requis pour l\\'envoi', 'error');\n                return;\n            }\n        }\n        \n        const message = prompt(`Envoi à: ${email}\\n\\nMessage personnalisé (optionnel) :`);\n        \n        const response = await fetch('/api/email/send-quote', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                quote_id: quoteId,\n                recipient_email: email,\n                custom_message: message || ''\n            }),\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        if (!response.ok) {\n            throw new Error(data.error || 'Erreur lors de l\\'envoi');\n        }\n        \n        showToast(`✅ Email envoyé avec succès à ${email}`, 'success');\n    } catch (error) {\n        console.error('Error sending email:', error);\n        showToast('❌ Erreur lors de l\\'envoi de l\\'email: ' + error.message, 'error');\n    }\n}\n\n// Sidebar Management\nfunction openSidebar() {\n    document.getElementById('sidebar').classList.add('active');\n    document.getElementById('sidebarOverlay').classList.add('active');\n}\n\nfunction closeSidebar() {\n    document.getElementById('sidebar').classList.remove('active');\n    document.getElementById('sidebarOverlay').classList.remove('active');\n}\n\nfunction openSidebarSection(sectionId) {\n    closeSidebar();\n    document.querySelectorAll('.sidebar-section').forEach(section => {\n        section.classList.remove('active');\n    });\n    document.getElementById(`section-${sectionId}`).classList.add('active');\n    document.getElementById('sidebarOverlay').classList.add('active');\n}\n\nfunction closeSidebarSection() {\n    document.querySelectorAll('.sidebar-section').forEach(section => {\n        section.classList.remove('active');\n    });\n    document.getElementById('sidebarOverlay').classList.remove('active');\n}\n\n// Load Profile Data\nasync function loadProfileData() {\n    try {\n        const response = await fetch('/api/users/me', { credentials: 'include' });\n        if (response.ok) {\n            const user = await response.json();\n            document.getElementById('profileUsername').value = user.username || '';\n            document.getElementById('profileFullName').value = user.full_name || '';\n            document.getElementById('profileEmail').value = user.email || '';\n        }\n    } catch (error) {\n        console.error('Error loading profile:', error);\n    }\n}\n\n// Save Profile\nasync function saveProfile() {\n    const fullName = document.getElementById('profileFullName').value;\n    const email = document.getElementById('profileEmail').value;\n    const password = document.getElementById('profilePassword').value;\n    \n    const data = { full_name: fullName, email: email };\n    if (password) {\n        data.password = password;\n    }\n    \n    try {\n        const response = await fetch('/api/users/me', {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            showToast('Profil mis à jour avec succès', 'success');\n            document.getElementById('profilePassword').value = '';\n        } else {\n            const error = await response.json();\n            showToast(error.error || 'Erreur lors de la mise à jour', 'error');\n        }\n    } catch (error) {\n        console.error('Error saving profile:', error);\n        showToast('Erreur lors de la mise à jour du profil', 'error');\n    }\n}\n\n// Event Listeners\ndocument.getElementById('newQuoteBtn').addEventListener('click', () => {\n    window.location.href = '/quote.html';\n});\n\ndocument.getElementById('refreshBtn').addEventListener('click', () => {\n    loadDashboardData();\n});\n\ndocument.getElementById('logoutBtn').addEventListener('click', async () => {\n    try {\n        await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });\n        window.location.href = '/login.html';\n    } catch (error) {\n        console.error('Logout failed:', error);\n        window.location.href = '/login.html';\n    }\n});\n\n// Hamburger Menu\ndocument.getElementById('hamburgerBtn').addEventListener('click', openSidebar);\ndocument.getElementById('closeSidebar').addEventListener('click', closeSidebar);\ndocument.getElementById('sidebarOverlay').addEventListener('click', () => {\n    closeSidebar();\n    closeSidebarSection();\n});\n\n// Nav Items\ndocument.querySelectorAll('.nav-item').forEach(item => {\n    item.addEventListener('click', () => {\n        const section = item.getAttribute('data-section');\n        openSidebarSection(section);\n        if (section === 'profile') {\n            loadProfileData();\n        }\n    });\n});\n\n// Save Profile Button\ndocument.getElementById('saveProfile').addEventListener('click', saveProfile);\n\nasync function init() {\n    if (await checkAuth()) {\n        await loadDashboardData();\n    }\n}\n\ninit();\n","size_bytes":23103},"app/static/js/profile.js":{"content":"let originalData = {};\n\nasync function loadProfile() {\n    try {\n        const response = await fetch('/api/users/me', { credentials: 'include' });\n        if (!response.ok) throw new Error('Failed to load profile');\n        \n        const user = await response.json();\n        originalData = { ...user };\n        \n        document.getElementById('displayFullName').textContent = user.full_name;\n        document.getElementById('displayRole').textContent = user.role === 'admin' ? 'Administrateur' : 'Utilisateur';\n        document.getElementById('displayRole').className = `role-badge role-${user.role}`;\n        \n        document.getElementById('fullName').value = user.full_name;\n        document.getElementById('username').value = user.username;\n    } catch (error) {\n        showNotification('Erreur lors du chargement du profil', 'error');\n    }\n}\n\ndocument.getElementById('profileForm').addEventListener('submit', async (e) => {\n    e.preventDefault();\n    \n    const fullName = document.getElementById('fullName').value;\n    const currentPassword = document.getElementById('currentPassword').value;\n    const newPassword = document.getElementById('newPassword').value;\n    const confirmPassword = document.getElementById('confirmPassword').value;\n    \n    if (newPassword && newPassword !== confirmPassword) {\n        showNotification('Les mots de passe ne correspondent pas', 'error');\n        return;\n    }\n    \n    if (newPassword && !currentPassword) {\n        showNotification('Veuillez entrer votre mot de passe actuel', 'error');\n        return;\n    }\n    \n    const data = { full_name: fullName };\n    if (newPassword) {\n        data.current_password = currentPassword;\n        data.new_password = newPassword;\n    }\n    \n    try {\n        const response = await fetch('/api/users/me', {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n            credentials: 'include'\n        });\n        \n        if (!response.ok) {\n            const error = await response.json();\n            throw new Error(error.error || 'Erreur lors de la mise à jour');\n        }\n        \n        showNotification('Profil mis à jour avec succès', 'success');\n        \n        document.getElementById('currentPassword').value = '';\n        document.getElementById('newPassword').value = '';\n        document.getElementById('confirmPassword').value = '';\n        \n        await loadProfile();\n    } catch (error) {\n        showNotification(error.message, 'error');\n    }\n});\n\ndocument.getElementById('cancelBtn').addEventListener('click', () => {\n    document.getElementById('fullName').value = originalData.full_name;\n    document.getElementById('currentPassword').value = '';\n    document.getElementById('newPassword').value = '';\n    document.getElementById('confirmPassword').value = '';\n    showNotification('Modifications annulées', 'info');\n});\n\ndocument.getElementById('backBtn').addEventListener('click', () => {\n    window.location.href = '/dashboard.html';\n});\n\ndocument.getElementById('logoutBtn').addEventListener('click', async () => {\n    if (confirm('Êtes-vous sûr de vouloir vous déconnecter ?')) {\n        try {\n            await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });\n            window.location.href = '/login.html';\n        } catch (error) {\n            showNotification('Erreur lors de la déconnexion', 'error');\n        }\n    }\n});\n\nfunction showNotification(message, type) {\n    const notification = document.getElementById('notification');\n    notification.textContent = message;\n    notification.className = `notification notification-${type}`;\n    notification.style.display = 'block';\n    \n    setTimeout(() => {\n        notification.style.display = 'none';\n    }, 3000);\n}\n\nloadProfile();\n","size_bytes":3828},"app/static/js/settings.js":{"content":"let currentUser = null;\nlet settings = {};\n\nasync function checkAuth() {\n    try {\n        const response = await fetch('/api/auth/check', { credentials: 'include' });\n        const data = await response.json();\n        \n        if (!data.authenticated) {\n            window.location.href = '/login.html';\n            return false;\n        }\n        \n        currentUser = data.user;\n        return true;\n    } catch (error) {\n        console.error('Auth check failed:', error);\n        window.location.href = '/login.html';\n        return false;\n    }\n}\n\nasync function loadSettings(section = null) {\n    const url = section ? `/api/settings?section=${section}` : '/api/settings';\n    const response = await fetch(url, { credentials: 'include' });\n    const data = await response.json();\n    \n    data.forEach(item => {\n        if (!settings[item.section]) settings[item.section] = {};\n        settings[item.section][item.key] = item.value;\n    });\n    \n    return settings;\n}\n\nasync function saveSetting(section, key, value) {\n    const response = await fetch('/api/settings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ section, key, value }),\n        credentials: 'include'\n    });\n    \n    if (response.ok) {\n        if (!settings[section]) settings[section] = {};\n        settings[section][key] = value;\n        showToast('Paramètre sauvegardé', 'success');\n    } else {\n        showToast('Erreur de sauvegarde', 'error');\n    }\n}\n\nfunction showToast(message, type = 'info') {\n    const toast = document.getElementById('toast');\n    toast.textContent = message;\n    toast.className = `toast show ${type}`;\n    setTimeout(() => toast.classList.remove('show'), 3000);\n}\n\nfunction showSection(sectionName) {\n    const content = document.getElementById('settingsContent');\n    \n    const sections = {\n        company: renderCompanySection,\n        quote: renderQuoteSection,\n        pdf: renderPdfSection,\n        currency: renderCurrencySection,\n        tax: renderTaxSection,\n        discount: renderDiscountSection,\n        labor: renderLaborSection,\n        coefficients: renderCoefficientsSection,\n        catalog: renderCatalogSection,\n        import: renderImportSection,\n        users: renderUsersSection,\n        theme: renderThemeSection,\n        about: renderAboutSection\n    };\n    \n    if (sections[sectionName]) {\n        content.innerHTML = sections[sectionName]();\n        attachSectionHandlers(sectionName);\n    }\n}\n\nfunction renderCompanySection() {\n    const company = settings.company || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Logo & Identité</h2>\n            <p class=\"section-subtitle\">Informations de votre entreprise affichées sur les devis</p>\n            \n            <div class=\"form-group\">\n                <label for=\"companyName\">Raison sociale</label>\n                <input type=\"text\" id=\"companyName\" value=\"${company.company_name || ''}\" data-section=\"company\" data-key=\"company_name\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"companyAddress\">Adresse</label>\n                <textarea id=\"companyAddress\" rows=\"3\" data-section=\"company\" data-key=\"company_address\">${company.company_address || ''}</textarea>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"companyPhone\">Téléphone</label>\n                <input type=\"tel\" id=\"companyPhone\" value=\"${company.company_phone || ''}\" data-section=\"company\" data-key=\"company_phone\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"companyEmail\">Email</label>\n                <input type=\"email\" id=\"companyEmail\" value=\"${company.company_email || ''}\" data-section=\"company\" data-key=\"company_email\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"companyLogo\">Logo (URL)</label>\n                <input type=\"url\" id=\"companyLogo\" value=\"${company.company_logo || ''}\" data-section=\"company\" data-key=\"company_logo\">\n                <small>URL d'une image pour le logo de l'entreprise</small>\n            </div>\n            \n            <h3 style=\"margin-top: 2rem; margin-bottom: 1rem; color: #3B82F6;\">📏 Dimensions Châssis</h3>\n            <p class=\"section-subtitle\">Limites de dimensions pour les châssis (en mm)</p>\n            \n            <div style=\"display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;\">\n                <div class=\"form-group\">\n                    <label for=\"minWidth\">Largeur minimale (mm)</label>\n                    <input type=\"number\" id=\"minWidth\" value=\"${company.min_width || 300}\" data-section=\"company\" data-key=\"min_width\" min=\"100\" max=\"5000\">\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"maxWidth\">Largeur maximale (mm)</label>\n                    <input type=\"number\" id=\"maxWidth\" value=\"${company.max_width || 3000}\" data-section=\"company\" data-key=\"max_width\" min=\"100\" max=\"10000\">\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"minHeight\">Hauteur minimale (mm)</label>\n                    <input type=\"number\" id=\"minHeight\" value=\"${company.min_height || 300}\" data-section=\"company\" data-key=\"min_height\" min=\"100\" max=\"5000\">\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"maxHeight\">Hauteur maximale (mm)</label>\n                    <input type=\"number\" id=\"maxHeight\" value=\"${company.max_height || 3000}\" data-section=\"company\" data-key=\"max_height\" min=\"100\" max=\"10000\">\n                </div>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderQuoteSection() {\n    const quote = settings.quote || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Numérotation des Devis</h2>\n            <p class=\"section-subtitle\">Configuration du format de numérotation automatique</p>\n            \n            <div class=\"form-group\">\n                <label for=\"quotePrefix\">Préfixe</label>\n                <input type=\"text\" id=\"quotePrefix\" value=\"${quote.prefix || 'DEV'}\" data-section=\"quote\" data-key=\"prefix\">\n                <small>Exemple : DEV, DEVIS, Q</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"quoteFormat\">Format</label>\n                <input type=\"text\" id=\"quoteFormat\" value=\"${quote.format || '{PREFIX}-{YEAR}-{NUMBER}'}\" data-section=\"quote\" data-key=\"format\">\n                <small>Variables : {PREFIX}, {YEAR}, {MONTH}, {NUMBER}</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"quoteCounter\">Compteur actuel</label>\n                <input type=\"number\" id=\"quoteCounter\" value=\"${quote.counter || '1'}\" data-section=\"quote\" data-key=\"counter\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"quoteValidity\">Validité (jours)</label>\n                <input type=\"number\" id=\"quoteValidity\" value=\"${quote.validity_days || '30'}\" data-section=\"quote\" data-key=\"validity_days\">\n            </div>\n        </div>\n    `;\n}\n\nfunction renderPdfSection() {\n    const pdf = settings.pdf || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Modèle PDF</h2>\n            <p class=\"section-subtitle\">Personnalisation de l'en-tête et pied de page des PDF</p>\n            \n            <div class=\"form-group\">\n                <label for=\"pdfHeader\">En-tête personnalisé</label>\n                <textarea id=\"pdfHeader\" rows=\"3\" data-section=\"pdf\" data-key=\"header\">${pdf.header || ''}</textarea>\n                <small>Texte affiché en haut du PDF</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"pdfFooter\">Pied de page</label>\n                <textarea id=\"pdfFooter\" rows=\"3\" data-section=\"pdf\" data-key=\"footer\">${pdf.footer || ''}</textarea>\n                <small>Texte affiché en bas du PDF</small>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"pdfLegal\">Mentions légales</label>\n                <textarea id=\"pdfLegal\" rows=\"4\" data-section=\"pdf\" data-key=\"legal\">${pdf.legal || ''}</textarea>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderCurrencySection() {\n    const currency = settings.currency || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Devise & Formatage</h2>\n            <p class=\"section-subtitle\">Configuration de la devise et du formatage des montants</p>\n            \n            <div class=\"form-group\">\n                <label for=\"currencyCode\">Code devise</label>\n                <select id=\"currencyCode\" data-section=\"currency\" data-key=\"code\">\n                    <option value=\"MAD\" ${currency.code === 'MAD' ? 'selected' : ''}>MAD (Dirham marocain)</option>\n                    <option value=\"EUR\" ${currency.code === 'EUR' ? 'selected' : ''}>EUR (Euro)</option>\n                    <option value=\"USD\" ${currency.code === 'USD' ? 'selected' : ''}>USD (Dollar)</option>\n                </select>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"currencySymbol\">Symbole</label>\n                <input type=\"text\" id=\"currencySymbol\" value=\"${currency.symbol || 'DH'}\" data-section=\"currency\" data-key=\"symbol\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"decimalSeparator\">Séparateur décimal</label>\n                <select id=\"decimalSeparator\" data-section=\"currency\" data-key=\"decimal_separator\">\n                    <option value=\".\" ${currency.decimal_separator === '.' ? 'selected' : ''}>Point (.)</option>\n                    <option value=\",\" ${currency.decimal_separator === ',' ? 'selected' : ''}>Virgule (,)</option>\n                </select>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"thousandSeparator\">Séparateur de milliers</label>\n                <select id=\"thousandSeparator\" data-section=\"currency\" data-key=\"thousand_separator\">\n                    <option value=\" \" ${currency.thousand_separator === ' ' ? 'selected' : ''}>Espace</option>\n                    <option value=\",\" ${currency.thousand_separator === ',' ? 'selected' : ''}>Virgule (,)</option>\n                    <option value=\".\" ${currency.thousand_separator === '.' ? 'selected' : ''}>Point (.)</option>\n                </select>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderTaxSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>TVA & Fiscalité</h2>\n            <p class=\"section-subtitle\">Configuration des taux de TVA par zone</p>\n            \n            <div class=\"tax-rates-list\" id=\"taxRatesList\">\n                <div class=\"tax-rate-item\">\n                    <div class=\"form-group\">\n                        <label>Zone / Pays</label>\n                        <input type=\"text\" value=\"Maroc\" disabled>\n                    </div>\n                    <div class=\"form-group\">\n                        <label>Taux TVA (%)</label>\n                        <input type=\"number\" value=\"20\" step=\"0.1\">\n                    </div>\n                </div>\n            </div>\n            \n            <button class=\"btn btn-secondary\" onclick=\"addTaxRate()\">+ Ajouter une zone</button>\n        </div>\n    `;\n}\n\nfunction renderDiscountSection() {\n    const discount = settings.discount || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Remises</h2>\n            <p class=\"section-subtitle\">Configuration des remises autorisées</p>\n            \n            <div class=\"form-group\">\n                <label for=\"discountMax\">Remise maximale (%)</label>\n                <input type=\"number\" id=\"discountMax\" value=\"${discount.max_percent || '50'}\" step=\"0.1\" data-section=\"discount\" data-key=\"max_percent\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"discountDefault\">Remise par défaut (%)</label>\n                <input type=\"number\" id=\"discountDefault\" value=\"${discount.default_percent || '0'}\" step=\"0.1\" data-section=\"discount\" data-key=\"default_percent\">\n            </div>\n            \n            <div class=\"form-group checkbox-group\">\n                <label>\n                    <input type=\"checkbox\" id=\"discountRequireAuth\" ${discount.require_auth === 'true' ? 'checked' : ''} data-section=\"discount\" data-key=\"require_auth\">\n                    Exiger une autorisation admin pour les remises > 10%\n                </label>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderLaborSection() {\n    const labor = settings.labor || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Main d'œuvre</h2>\n            <p class=\"section-subtitle\">Configuration des tarifs de main d'œuvre</p>\n            \n            <div class=\"form-group\">\n                <label for=\"laborHourlyRate\">Tarif horaire (DH)</label>\n                <input type=\"number\" id=\"laborHourlyRate\" value=\"${labor.hourly_rate || '80'}\" step=\"0.01\" data-section=\"labor\" data-key=\"hourly_rate\">\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"laborFlatRate\">Forfait installation (DH)</label>\n                <input type=\"number\" id=\"laborFlatRate\" value=\"${labor.flat_rate || '0'}\" step=\"0.01\" data-section=\"labor\" data-key=\"flat_rate\">\n            </div>\n        </div>\n    `;\n}\n\nfunction renderCoefficientsSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>Coefficients de Finition</h2>\n            <p class=\"section-subtitle\">Coefficients multiplicateurs par type de finition</p>\n            \n            <div id=\"finishCoefficientsList\" class=\"coefficients-list\">\n                <p>Chargement...</p>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderCatalogSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>Catalogue Produits</h2>\n            <p class=\"section-subtitle\">Gestion des types de châssis, séries, vitrages, accessoires et finitions</p>\n            \n            <div class=\"catalog-tabs\">\n                <button class=\"tab-button active\" data-tab=\"chassis\">Types de châssis</button>\n                <button class=\"tab-button\" data-tab=\"series\">Séries de profilés</button>\n                <button class=\"tab-button\" data-tab=\"glazing\">Vitrages</button>\n                <button class=\"tab-button\" data-tab=\"accessories\">Accessoires</button>\n                <button class=\"tab-button\" data-tab=\"finishes\">Finitions</button>\n            </div>\n            \n            <div id=\"catalogContent\" class=\"catalog-content\">\n                <p>Chargement...</p>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderImportSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>Import / Export CSV</h2>\n            <p class=\"section-subtitle\">Importer ou exporter les barèmes de prix</p>\n            \n            <div class=\"import-export-box\">\n                <h3>Importer un barème</h3>\n                <p>Format attendu : category, subcategory, unit, price, coefficient</p>\n                <input type=\"file\" id=\"csvFileImport\" accept=\".csv\">\n                <button class=\"btn btn-primary\" onclick=\"importCSV()\">Importer</button>\n            </div>\n            \n            <div class=\"import-export-box\">\n                <h3>Exporter le barème actuel</h3>\n                <button class=\"btn btn-secondary\" onclick=\"exportCSV()\">Télécharger CSV</button>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderUsersSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>Utilisateurs & Accès</h2>\n            <p class=\"section-subtitle\">Gestion des comptes utilisateurs et des rôles</p>\n            \n            <button class=\"btn btn-primary\" onclick=\"showUserModal()\">+ Nouvel utilisateur</button>\n            \n            <div id=\"usersList\" class=\"users-list\">\n                <p>Chargement...</p>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderThemeSection() {\n    const theme = settings.theme || {};\n    return `\n        <div class=\"settings-section\">\n            <h2>Apparence</h2>\n            <p class=\"section-subtitle\">Configuration de l'interface utilisateur</p>\n            \n            <div class=\"form-group\">\n                <label>Thème</label>\n                <div class=\"radio-group\">\n                    <label>\n                        <input type=\"radio\" name=\"theme\" value=\"light\" ${theme.mode !== 'dark' ? 'checked' : ''} data-section=\"theme\" data-key=\"mode\">\n                        Clair\n                    </label>\n                    <label>\n                        <input type=\"radio\" name=\"theme\" value=\"dark\" ${theme.mode === 'dark' ? 'checked' : ''} data-section=\"theme\" data-key=\"mode\">\n                        Sombre\n                    </label>\n                </div>\n            </div>\n        </div>\n    `;\n}\n\nfunction renderAboutSection() {\n    return `\n        <div class=\"settings-section\">\n            <h2>À propos</h2>\n            <p class=\"section-subtitle\">Informations sur l'application</p>\n            \n            <div class=\"about-info\">\n                <p><strong>Application:</strong> Devis Châssis Aluminium</p>\n                <p><strong>Version:</strong> 1.0.0</p>\n                <p><strong>Description:</strong> Application de gestion de devis pour menuiserie aluminium</p>\n                <p><strong>Support:</strong> contact@entreprise.ma</p>\n            </div>\n        </div>\n    `;\n}\n\nfunction attachSectionHandlers(sectionName) {\n    const inputs = document.querySelectorAll('input[data-section], textarea[data-section], select[data-section]');\n    \n    inputs.forEach(input => {\n        const handler = () => {\n            const section = input.dataset.section;\n            const key = input.dataset.key;\n            const value = input.type === 'checkbox' ? input.checked.toString() : input.value;\n            saveSetting(section, key, value);\n        };\n        \n        if (input.type === 'checkbox' || input.type === 'radio') {\n            input.addEventListener('change', handler);\n        } else {\n            input.addEventListener('blur', handler);\n        }\n    });\n    \n    if (sectionName === 'users') {\n        loadUsers();\n    } else if (sectionName === 'catalog') {\n        setupCatalogTabs();\n        loadCatalogTab('chassis');\n    }\n}\n\nasync function loadUsers() {\n    try {\n        const response = await fetch('/api/users', { credentials: 'include' });\n        const users = await response.json();\n        \n        const usersList = document.getElementById('usersList');\n        usersList.innerHTML = users.map(user => `\n            <div class=\"user-item\">\n                <div class=\"user-info\">\n                    <strong>${user.full_name || user.username}</strong>\n                    <span class=\"user-role ${user.role}\">${user.role === 'admin' ? 'Administrateur' : 'Utilisateur'}</span>\n                    <small>${user.email || ''}</small>\n                </div>\n                <div class=\"user-actions\">\n                    ${user.id !== currentUser.id ? `<button class=\"btn-icon\" onclick=\"deleteUser(${user.id})\">🗑️</button>` : ''}\n                </div>\n            </div>\n        `).join('');\n    } catch (error) {\n        console.error('Failed to load users:', error);\n    }\n}\n\nfunction showUserModal() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-overlay';\n    modal.innerHTML = `\n        <div class=\"modal-content\">\n            <h3>Nouvel utilisateur</h3>\n            <form id=\"newUserForm\">\n                <div class=\"form-group\">\n                    <label for=\"newUsername\">Nom d'utilisateur</label>\n                    <input type=\"text\" id=\"newUsername\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"newFullName\">Nom complet</label>\n                    <input type=\"text\" id=\"newFullName\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"newEmail\">Email</label>\n                    <input type=\"email\" id=\"newEmail\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"newPassword\">Mot de passe</label>\n                    <input type=\"password\" id=\"newPassword\" required>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"newRole\">Rôle</label>\n                    <select id=\"newRole\" required>\n                        <option value=\"user\">Utilisateur</option>\n                        <option value=\"admin\">Administrateur</option>\n                    </select>\n                </div>\n                <div class=\"modal-actions\">\n                    <button type=\"button\" class=\"btn btn-secondary\" onclick=\"closeUserModal()\">Annuler</button>\n                    <button type=\"submit\" class=\"btn btn-primary\">Créer</button>\n                </div>\n            </form>\n        </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    document.getElementById('newUserForm').addEventListener('submit', async (e) => {\n        e.preventDefault();\n        \n        const username = document.getElementById('newUsername').value;\n        const full_name = document.getElementById('newFullName').value;\n        const email = document.getElementById('newEmail').value;\n        const password = document.getElementById('newPassword').value;\n        const role = document.getElementById('newRole').value;\n        \n        try {\n            const response = await fetch('/api/users', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ username, full_name, email, password, role }),\n                credentials: 'include'\n            });\n            \n            if (response.ok) {\n                showToast('Utilisateur créé avec succès', 'success');\n                closeUserModal();\n                loadUsers();\n            } else {\n                const error = await response.json();\n                showToast(error.error || 'Erreur lors de la création', 'error');\n            }\n        } catch (error) {\n            showToast('Erreur de connexion', 'error');\n        }\n    });\n    \n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) closeUserModal();\n    });\n}\n\nfunction closeUserModal() {\n    const modal = document.querySelector('.modal-overlay');\n    if (modal) modal.remove();\n}\n\nasync function deleteUser(userId) {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer cet utilisateur ?')) return;\n    \n    try {\n        const response = await fetch(`/api/users/${userId}`, { method: 'DELETE', credentials: 'include' });\n        \n        if (response.ok) {\n            showToast('Utilisateur supprimé', 'success');\n            loadUsers();\n        } else {\n            const error = await response.json();\n            showToast(error.error || 'Erreur lors de la suppression', 'error');\n        }\n    } catch (error) {\n        showToast('Erreur de connexion', 'error');\n    }\n}\n\nfunction setupCatalogTabs() {\n    const tabButtons = document.querySelectorAll('.tab-button');\n    tabButtons.forEach(btn => {\n        btn.addEventListener('click', () => {\n            tabButtons.forEach(b => b.classList.remove('active'));\n            btn.classList.add('active');\n            loadCatalogTab(btn.dataset.tab);\n        });\n    });\n}\n\nasync function loadCatalogTab(tabName) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = '<p>Chargement...</p>';\n    \n    const apiMap = {\n        'chassis': '/api/catalog/chassis-types',\n        'series': '/api/catalog/profile-series',\n        'glazing': '/api/catalog/glazing-types',\n        'accessories': '/api/catalog/accessories',\n        'finishes': '/api/catalog/finishes'\n    };\n    \n    const renderMap = {\n        'chassis': renderChassisTab,\n        'series': renderSeriesTab,\n        'glazing': renderGlazingTab,\n        'accessories': renderAccessoriesTab,\n        'finishes': renderFinishesTab\n    };\n    \n    try {\n        const response = await fetch(apiMap[tabName], { credentials: 'include' });\n        const data = await response.json();\n        renderMap[tabName](data);\n    } catch (error) {\n        content.innerHTML = '<p>Erreur de chargement</p>';\n        console.error('Failed to load catalog tab:', error);\n    }\n}\n\nfunction renderChassisTab(items) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = `\n        <div class=\"catalog-header\">\n            <h3>Types de châssis (${items.length})</h3>\n            <button class=\"btn btn-primary\" onclick=\"showAddModal('chassis')\">+ Ajouter</button>\n        </div>\n        <div class=\"catalog-list\">\n            ${items.map(item => `\n                <div class=\"catalog-item\">\n                    <div class=\"catalog-item-info\">\n                        <h4>${item.name}</h4>\n                        <p>${item.description || ''}</p>\n                        <small>Dimensions: ${item.min_width}×${item.min_height} - ${item.max_width}×${item.max_height} mm</small>\n                    </div>\n                    <div class=\"catalog-item-actions\">\n                        <button class=\"btn-secondary\" onclick=\"editCatalogItem('chassis', ${item.id})\">Modifier</button>\n                        <button class=\"btn-danger\" onclick=\"deleteCatalogItem('chassis', ${item.id})\">Supprimer</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nfunction renderSeriesTab(items) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = `\n        <div class=\"catalog-header\">\n            <h3>Séries de profilés (${items.length})</h3>\n            <button class=\"btn btn-primary\" onclick=\"showAddModal('series')\">+ Ajouter</button>\n        </div>\n        <div class=\"catalog-list\">\n            ${items.map(item => `\n                <div class=\"catalog-item\">\n                    <div class=\"catalog-item-info\">\n                        <h4>${item.name}</h4>\n                        <p>${item.description || ''}</p>\n                        <small>Prix: ${item.price_per_meter} DH/m</small>\n                    </div>\n                    <div class=\"catalog-item-actions\">\n                        <button class=\"btn-secondary\" onclick=\"editCatalogItem('series', ${item.id})\">Modifier</button>\n                        <button class=\"btn-danger\" onclick=\"deleteCatalogItem('series', ${item.id})\">Supprimer</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nfunction renderGlazingTab(items) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = `\n        <div class=\"catalog-header\">\n            <h3>Types de vitrage (${items.length})</h3>\n            <button class=\"btn btn-primary\" onclick=\"showAddModal('glazing')\">+ Ajouter</button>\n        </div>\n        <div class=\"catalog-list\">\n            ${items.map(item => `\n                <div class=\"catalog-item\">\n                    <div class=\"catalog-item-info\">\n                        <h4>${item.name}</h4>\n                        <p>${item.description || ''}</p>\n                        <small>Prix: ${item.price_per_m2} DH/m²</small>\n                    </div>\n                    <div class=\"catalog-item-actions\">\n                        <button class=\"btn-secondary\" onclick=\"editCatalogItem('glazing', ${item.id})\">Modifier</button>\n                        <button class=\"btn-danger\" onclick=\"deleteCatalogItem('glazing', ${item.id})\">Supprimer</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nfunction renderAccessoriesTab(items) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = `\n        <div class=\"catalog-header\">\n            <h3>Accessoires (${items.length})</h3>\n            <button class=\"btn btn-primary\" onclick=\"showAddModal('accessories')\">+ Ajouter</button>\n        </div>\n        <div class=\"catalog-list\">\n            ${items.map(item => `\n                <div class=\"catalog-item\">\n                    <div class=\"catalog-item-info\">\n                        <h4>${item.name}</h4>\n                        <small>Prix: ${item.unit_price} DH</small>\n                    </div>\n                    <div class=\"catalog-item-actions\">\n                        <button class=\"btn-secondary\" onclick=\"editCatalogItem('accessories', ${item.id})\">Modifier</button>\n                        <button class=\"btn-danger\" onclick=\"deleteCatalogItem('accessories', ${item.id})\">Supprimer</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nfunction renderFinishesTab(items) {\n    const content = document.getElementById('catalogContent');\n    content.innerHTML = `\n        <div class=\"catalog-header\">\n            <h3>Finitions (${items.length})</h3>\n            <button class=\"btn btn-primary\" onclick=\"showAddModal('finishes')\">+ Ajouter</button>\n        </div>\n        <div class=\"catalog-list\">\n            ${items.map(item => `\n                <div class=\"catalog-item\">\n                    <div class=\"catalog-item-info\">\n                        <h4>${item.name}</h4>\n                        <p>${item.description || ''}</p>\n                        <small>Coefficient: ${item.price_coefficient}</small>\n                    </div>\n                    <div class=\"catalog-item-actions\">\n                        <button class=\"btn-secondary\" onclick=\"editCatalogItem('finishes', ${item.id})\">Modifier</button>\n                        <button class=\"btn-danger\" onclick=\"deleteCatalogItem('finishes', ${item.id})\">Supprimer</button>\n                    </div>\n                </div>\n            `).join('')}\n        </div>\n    `;\n}\n\nasync function deleteCatalogItem(type, id) {\n    if (!confirm('Êtes-vous sûr de vouloir supprimer cet élément ?')) return;\n    \n    const apiMap = {\n        'chassis': '/api/catalog/chassis-types',\n        'series': '/api/catalog/profile-series',\n        'glazing': '/api/catalog/glazing-types',\n        'accessories': '/api/catalog/accessories',\n        'finishes': '/api/catalog/finishes'\n    };\n    \n    try {\n        const response = await fetch(`${apiMap[type]}/${id}`, { method: 'DELETE', credentials: 'include' });\n        \n        if (response.ok) {\n            showToast('Élément supprimé', 'success');\n            loadCatalogTab(type);\n        } else {\n            const error = await response.json();\n            showToast(error.error || 'Erreur lors de la suppression', 'error');\n        }\n    } catch (error) {\n        showToast('Erreur de connexion', 'error');\n    }\n}\n\nasync function showAddModal(type) {\n    const modal = document.createElement('div');\n    modal.className = 'modal-overlay';\n    modal.id = 'catalogModal';\n    \n    const forms = {\n        chassis: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Largeur min (mm) *</label>\n                <input type=\"number\" id=\"itemMinWidth\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Largeur max (mm) *</label>\n                <input type=\"number\" id=\"itemMaxWidth\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Hauteur min (mm) *</label>\n                <input type=\"number\" id=\"itemMinHeight\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Hauteur max (mm) *</label>\n                <input type=\"number\" id=\"itemMaxHeight\" required>\n            </div>\n        `,\n        series: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Prix par mètre (MAD) *</label>\n                <input type=\"number\" id=\"itemPricePerMeter\" step=\"0.01\" required>\n            </div>\n        `,\n        glazing: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Épaisseur (mm)</label>\n                <input type=\"number\" id=\"itemThickness\">\n            </div>\n            <div class=\"form-group\">\n                <label>Prix par m² (MAD) *</label>\n                <input type=\"number\" id=\"itemPricePerM2\" step=\"0.01\" required>\n            </div>\n        `,\n        accessories: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Prix unitaire (MAD) *</label>\n                <input type=\"number\" id=\"itemUnitPrice\" step=\"0.01\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Incompatible avec (série)</label>\n                <input type=\"text\" id=\"itemIncompatibleSeries\" placeholder=\"Ex: Série Premium\">\n            </div>\n        `,\n        finishes: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\"></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Coefficient de prix *</label>\n                <input type=\"number\" id=\"itemPriceCoefficient\" step=\"0.01\" value=\"1.0\" required>\n            </div>\n        `\n    };\n    \n    modal.innerHTML = `\n        <div class=\"modal-content\">\n            <h3>Ajouter un élément</h3>\n            <form id=\"catalogForm\">\n                ${forms[type]}\n                <div class=\"modal-actions\">\n                    <button type=\"button\" class=\"btn-secondary\" onclick=\"closeModal()\">Annuler</button>\n                    <button type=\"submit\" class=\"btn-primary\">Ajouter</button>\n                </div>\n            </form>\n        </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    document.getElementById('catalogForm').addEventListener('submit', async (e) => {\n        e.preventDefault();\n        await saveCatalogItem(type, null);\n    });\n}\n\nasync function editCatalogItem(type, id) {\n    const apiMap = {\n        'chassis': '/api/catalog/chassis-types',\n        'series': '/api/catalog/profile-series',\n        'glazing': '/api/catalog/glazing-types',\n        'accessories': '/api/catalog/accessories',\n        'finishes': '/api/catalog/finishes'\n    };\n    \n    try {\n        const response = await fetch(`${apiMap[type]}/${id}`, { credentials: 'include' });\n        if (!response.ok) {\n            const items = await fetch(apiMap[type], { credentials: 'include' }).then(r => r.json());\n            const item = items.find(i => i.id === id);\n            if (!item) throw new Error('Item not found');\n            showEditModal(type, item);\n            return;\n        }\n        const item = await response.json();\n        showEditModal(type, item);\n    } catch (error) {\n        showToast('Erreur de chargement', 'error');\n    }\n}\n\nfunction showEditModal(type, item) {\n    const modal = document.createElement('div');\n    modal.className = 'modal-overlay';\n    modal.id = 'catalogModal';\n    \n    const forms = {\n        chassis: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" value=\"${item.name || ''}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\">${item.description || ''}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Largeur min (mm) *</label>\n                <input type=\"number\" id=\"itemMinWidth\" value=\"${item.min_width}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Largeur max (mm) *</label>\n                <input type=\"number\" id=\"itemMaxWidth\" value=\"${item.max_width}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Hauteur min (mm) *</label>\n                <input type=\"number\" id=\"itemMinHeight\" value=\"${item.min_height}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Hauteur max (mm) *</label>\n                <input type=\"number\" id=\"itemMaxHeight\" value=\"${item.max_height}\" required>\n            </div>\n        `,\n        series: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" value=\"${item.name || ''}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\">${item.description || ''}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Prix par mètre (MAD) *</label>\n                <input type=\"number\" id=\"itemPricePerMeter\" value=\"${item.price_per_meter}\" step=\"0.01\" required>\n            </div>\n        `,\n        glazing: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" value=\"${item.name || ''}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\">${item.description || ''}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Épaisseur (mm)</label>\n                <input type=\"number\" id=\"itemThickness\" value=\"${item.thickness_mm || ''}\">\n            </div>\n            <div class=\"form-group\">\n                <label>Prix par m² (MAD) *</label>\n                <input type=\"number\" id=\"itemPricePerM2\" value=\"${item.price_per_m2}\" step=\"0.01\" required>\n            </div>\n        `,\n        accessories: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" value=\"${item.name || ''}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Prix unitaire (MAD) *</label>\n                <input type=\"number\" id=\"itemUnitPrice\" value=\"${item.unit_price}\" step=\"0.01\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Incompatible avec (série)</label>\n                <input type=\"text\" id=\"itemIncompatibleSeries\" value=\"${item.incompatible_series || ''}\" placeholder=\"Ex: Série Premium\">\n            </div>\n        `,\n        finishes: `\n            <div class=\"form-group\">\n                <label>Nom *</label>\n                <input type=\"text\" id=\"itemName\" value=\"${item.name || ''}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label>Description</label>\n                <textarea id=\"itemDescription\" rows=\"2\">${item.description || ''}</textarea>\n            </div>\n            <div class=\"form-group\">\n                <label>Coefficient de prix *</label>\n                <input type=\"number\" id=\"itemPriceCoefficient\" value=\"${item.price_coefficient}\" step=\"0.01\" required>\n            </div>\n        `\n    };\n    \n    modal.innerHTML = `\n        <div class=\"modal-content\">\n            <h3>Modifier l'élément</h3>\n            <form id=\"catalogForm\">\n                ${forms[type]}\n                <div class=\"modal-actions\">\n                    <button type=\"button\" class=\"btn-secondary\" onclick=\"closeModal()\">Annuler</button>\n                    <button type=\"submit\" class=\"btn-primary\">Enregistrer</button>\n                </div>\n            </form>\n        </div>\n    `;\n    \n    document.body.appendChild(modal);\n    \n    document.getElementById('catalogForm').addEventListener('submit', async (e) => {\n        e.preventDefault();\n        await saveCatalogItem(type, item.id);\n    });\n}\n\nasync function saveCatalogItem(type, id) {\n    const apiMap = {\n        'chassis': '/api/catalog/chassis-types',\n        'series': '/api/catalog/profile-series',\n        'glazing': '/api/catalog/glazing-types',\n        'accessories': '/api/catalog/accessories',\n        'finishes': '/api/catalog/finishes'\n    };\n    \n    const dataBuilders = {\n        chassis: () => ({\n            name: document.getElementById('itemName').value,\n            description: document.getElementById('itemDescription').value,\n            min_width: parseInt(document.getElementById('itemMinWidth').value),\n            max_width: parseInt(document.getElementById('itemMaxWidth').value),\n            min_height: parseInt(document.getElementById('itemMinHeight').value),\n            max_height: parseInt(document.getElementById('itemMaxHeight').value)\n        }),\n        series: () => ({\n            name: document.getElementById('itemName').value,\n            description: document.getElementById('itemDescription').value,\n            price_per_meter: parseFloat(document.getElementById('itemPricePerMeter').value)\n        }),\n        glazing: () => ({\n            name: document.getElementById('itemName').value,\n            description: document.getElementById('itemDescription').value,\n            thickness_mm: parseInt(document.getElementById('itemThickness').value) || null,\n            price_per_m2: parseFloat(document.getElementById('itemPricePerM2').value)\n        }),\n        accessories: () => ({\n            name: document.getElementById('itemName').value,\n            unit_price: parseFloat(document.getElementById('itemUnitPrice').value),\n            incompatible_series: document.getElementById('itemIncompatibleSeries').value || null\n        }),\n        finishes: () => ({\n            name: document.getElementById('itemName').value,\n            description: document.getElementById('itemDescription').value,\n            price_coefficient: parseFloat(document.getElementById('itemPriceCoefficient').value)\n        })\n    };\n    \n    const data = dataBuilders[type]();\n    const url = id ? `${apiMap[type]}/${id}` : apiMap[type];\n    const method = id ? 'PUT' : 'POST';\n    \n    try {\n        const response = await fetch(url, {\n            method: method,\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            showToast(id ? 'Élément modifié' : 'Élément ajouté', 'success');\n            closeModal();\n            loadCatalogTab(type);\n        } else {\n            const error = await response.json();\n            showToast(error.error || 'Erreur lors de la sauvegarde', 'error');\n        }\n    } catch (error) {\n        showToast('Erreur de connexion', 'error');\n    }\n}\n\nfunction closeModal() {\n    const modal = document.getElementById('catalogModal');\n    if (modal) modal.remove();\n}\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    if (!await checkAuth()) return;\n    \n    await loadSettings();\n    showSection('company');\n    \n    document.querySelectorAll('.settings-menu-item').forEach(item => {\n        item.addEventListener('click', () => {\n            document.querySelectorAll('.settings-menu-item').forEach(i => i.classList.remove('active'));\n            item.classList.add('active');\n            showSection(item.dataset.section);\n        });\n    });\n    \n    document.getElementById('backBtn').addEventListener('click', () => {\n        window.location.href = '/';\n    });\n    \n    document.getElementById('logoutBtn').addEventListener('click', async () => {\n        await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });\n        window.location.href = '/login.html';\n    });\n});\n","size_bytes":44856},"app/crypto_utils.py":{"content":"from cryptography.fernet import Fernet\nimport os\nimport base64\nfrom hashlib import sha256\n\ndef get_encryption_key():\n    key = os.environ.get('ENCRYPTION_KEY')\n    if not key:\n        key = base64.urlsafe_b64encode(sha256(os.environ.get('SECRET_KEY', 'default-secret-key').encode()).digest())\n    else:\n        key = key.encode()\n    return key\n\ndef encrypt_data(data):\n    if not data:\n        return None\n    \n    f = Fernet(get_encryption_key())\n    encrypted = f.encrypt(data.encode())\n    return encrypted.decode()\n\ndef decrypt_data(encrypted_data):\n    if not encrypted_data:\n        return None\n    \n    try:\n        f = Fernet(get_encryption_key())\n        decrypted = f.decrypt(encrypted_data.encode())\n        return decrypted.decode()\n    except:\n        return encrypted_data\n","size_bytes":788},"app/routes/email.py":{"content":"from flask import Blueprint, request, jsonify, session\nfrom app.routes.auth import login_required\nfrom app.models import Quote, User, AppSettings\nfrom app import db\nimport os\nimport requests\n\nbp = Blueprint('email', __name__)\n\ndef get_sendgrid_credentials():\n    \"\"\"Get SendGrid credentials from Replit connector\"\"\"\n    hostname = os.getenv('REPLIT_CONNECTORS_HOSTNAME')\n    x_replit_token = None\n    \n    if os.getenv('REPL_IDENTITY'):\n        x_replit_token = 'repl ' + os.getenv('REPL_IDENTITY')\n    elif os.getenv('WEB_REPL_RENEWAL'):\n        x_replit_token = 'depl ' + os.getenv('WEB_REPL_RENEWAL')\n    \n    if not x_replit_token or not hostname:\n        return None\n    \n    try:\n        response = requests.get(\n            f'https://{hostname}/api/v2/connection?include_secrets=true&connector_names=sendgrid',\n            headers={\n                'Accept': 'application/json',\n                'X_REPLIT_TOKEN': x_replit_token\n            }\n        )\n        \n        if response.ok:\n            data = response.json()\n            items = data.get('items', [])\n            if items and len(items) > 0:\n                settings = items[0].get('settings', {})\n                api_key = settings.get('api_key')\n                from_email = settings.get('from_email')\n                if api_key and from_email:\n                    return {'api_key': api_key, 'from_email': from_email}\n        return None\n    except Exception as e:\n        print(f\"Error getting SendGrid credentials: {e}\")\n        return None\n\n@bp.route('/send-quote', methods=['POST'])\n@login_required\ndef send_quote_email():\n    \"\"\"Send quote via email using SendGrid\"\"\"\n    try:\n        data = request.get_json()\n        quote_id = data.get('quote_id')\n        recipient_email = data.get('recipient_email')\n        recipient_name = data.get('recipient_name', '')\n        message = data.get('message', '')\n        \n        if not quote_id or not recipient_email:\n            return jsonify({'error': 'Quote ID and recipient email are required'}), 400\n        \n        # Get quote\n        quote = Quote.query.get(quote_id)\n        if not quote:\n            return jsonify({'error': 'Quote not found'}), 404\n        \n        # Check access\n        user_id = session.get('user_id')\n        user = User.query.get(user_id)\n        if user.role != 'super_admin' and quote.company_id != user.company_id:\n            return jsonify({'error': 'Access denied'}), 403\n        \n        # Get SendGrid credentials\n        credentials = get_sendgrid_credentials()\n        if not credentials:\n            return jsonify({'error': 'SendGrid not configured'}), 500\n        \n        # Get app settings\n        from_name_setting = AppSettings.query.filter_by(key='sendgrid_from_name').first()\n        from_name = from_name_setting.value if from_name_setting else 'Devis Menuiserie'\n        \n        # Prepare email content\n        subject = f'Devis #{quote.quote_number}'\n        \n        html_content = f\"\"\"\n        <html>\n        <head>\n            <style>\n                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}\n                .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}\n                .header {{ background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}\n                .content {{ background: #f9f9f9; padding: 30px; border-radius: 0 0 10px 10px; }}\n                .quote-info {{ background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }}\n                .footer {{ text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }}\n                table {{ width: 100%; border-collapse: collapse; }}\n                th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}\n                th {{ background: #f5f5f5; font-weight: bold; }}\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <div class=\"header\">\n                    <h1>📄 Devis #{quote.quote_number}</h1>\n                </div>\n                <div class=\"content\">\n                    <p>Bonjour {recipient_name or 'cher client'},</p>\n                    \n                    {f'<p>{message}</p>' if message else ''}\n                    \n                    <p>Veuillez trouver ci-dessous le détail de votre devis :</p>\n                    \n                    <div class=\"quote-info\">\n                        <table>\n                            <tr>\n                                <th>Référence</th>\n                                <td>{quote.quote_number}</td>\n                            </tr>\n                            <tr>\n                                <th>Date</th>\n                                <td>{quote.quote_date}</td>\n                            </tr>\n                            <tr>\n                                <th>Type de châssis</th>\n                                <td>{quote.chassis_type}</td>\n                            </tr>\n                            <tr>\n                                <th>Dimensions</th>\n                                <td>{quote.width} mm × {quote.height} mm</td>\n                            </tr>\n                            <tr>\n                                <th>Série de profilés</th>\n                                <td>{quote.profile_series}</td>\n                            </tr>\n                            <tr>\n                                <th>Vitrage</th>\n                                <td>{quote.glazing_type}</td>\n                            </tr>\n                            <tr>\n                                <th>Finition</th>\n                                <td>{quote.finish}</td>\n                            </tr>\n                            <tr>\n                                <th style=\"font-size: 1.2em; color: #667eea;\">Prix Total</th>\n                                <td style=\"font-size: 1.2em; font-weight: bold; color: #667eea;\">{quote.total_price:,.2f} MAD</td>\n                            </tr>\n                        </table>\n                    </div>\n                    \n                    <p>Pour toute question ou modification, n'hésitez pas à nous contacter.</p>\n                    \n                    <p>Cordialement,<br><strong>{from_name}</strong></p>\n                </div>\n                <div class=\"footer\">\n                    <p>Ce devis est généré automatiquement par notre système de gestion.</p>\n                </div>\n            </div>\n        </body>\n        </html>\n        \"\"\"\n        \n        # Send email via SendGrid API\n        sendgrid_url = 'https://api.sendgrid.com/v3/mail/send'\n        headers = {\n            'Authorization': f'Bearer {credentials[\"api_key\"]}',\n            'Content-Type': 'application/json'\n        }\n        \n        payload = {\n            'personalizations': [{\n                'to': [{'email': recipient_email, 'name': recipient_name}],\n                'subject': subject\n            }],\n            'from': {'email': credentials['from_email'], 'name': from_name},\n            'content': [{'type': 'text/html', 'value': html_content}]\n        }\n        \n        response = requests.post(sendgrid_url, headers=headers, json=payload)\n        \n        if response.status_code in [200, 202]:\n            return jsonify({'success': True, 'message': 'Email sent successfully'})\n        else:\n            print(f\"SendGrid error: {response.status_code} - {response.text}\")\n            return jsonify({'error': 'Failed to send email'}), 500\n            \n    except Exception as e:\n        print(f\"Error sending email: {e}\")\n        return jsonify({'error': str(e)}), 500\n\n@bp.route('/test-connection', methods=['GET'])\n@login_required\ndef test_sendgrid_connection():\n    \"\"\"Test SendGrid connection\"\"\"\n    credentials = get_sendgrid_credentials()\n    if credentials:\n        return jsonify({\n            'connected': True,\n            'from_email': credentials['from_email']\n        })\n    else:\n        return jsonify({'connected': False})\n","size_bytes":8109},"app/routes/super_admin.py":{"content":"from flask import Blueprint, request, jsonify, session\nfrom app.models import Company, User, Quote, Settings, AppSettings, ActivityLog, ChassisType, ProfileSeries, GlazingType, Finish, Accessory\nfrom app import db\nfrom app.routes.auth import super_admin_required, login_required\nfrom datetime import datetime\nfrom werkzeug.security import generate_password_hash\nfrom app.crypto_utils import encrypt_data, decrypt_data\nfrom app.services.backup import BackupService\nfrom app.services.updater import UpdateService\n\ndef copy_catalog_to_company(company_id):\n    \"\"\"Copy template catalog (company_id=NULL) to a new company\"\"\"\n    try:\n        # Copy chassis types\n        template_chassis = ChassisType.query.filter_by(company_id=None).all()\n        for chassis in template_chassis:\n            new_chassis = ChassisType(\n                company_id=company_id,\n                name=chassis.name,\n                description=chassis.description,\n                min_width=chassis.min_width,\n                max_width=chassis.max_width,\n                min_height=chassis.min_height,\n                max_height=chassis.max_height\n            )\n            db.session.add(new_chassis)\n        \n        # Copy profile series\n        template_profiles = ProfileSeries.query.filter_by(company_id=None).all()\n        for profile in template_profiles:\n            new_profile = ProfileSeries(\n                company_id=company_id,\n                name=profile.name,\n                description=profile.description,\n                price_per_meter=profile.price_per_meter\n            )\n            db.session.add(new_profile)\n        \n        # Copy glazing types\n        template_glazing = GlazingType.query.filter_by(company_id=None).all()\n        for glazing in template_glazing:\n            new_glazing = GlazingType(\n                company_id=company_id,\n                name=glazing.name,\n                description=glazing.description,\n                thickness_mm=glazing.thickness_mm,\n                price_per_m2=glazing.price_per_m2\n            )\n            db.session.add(new_glazing)\n        \n        # Copy finishes\n        template_finishes = Finish.query.filter_by(company_id=None).all()\n        for finish in template_finishes:\n            new_finish = Finish(\n                company_id=company_id,\n                name=finish.name,\n                description=finish.description,\n                price_coefficient=finish.price_coefficient\n            )\n            db.session.add(new_finish)\n        \n        # Copy accessories\n        template_accessories = Accessory.query.filter_by(company_id=None).all()\n        for accessory in template_accessories:\n            new_accessory = Accessory(\n                company_id=company_id,\n                name=accessory.name,\n                unit_price=accessory.unit_price,\n                incompatible_series=accessory.incompatible_series\n            )\n            db.session.add(new_accessory)\n        \n        return True\n    except Exception as e:\n        print(f\"Error copying catalog: {e}\")\n        return False\n\ndef log_activity(action, description=None):\n    try:\n        user_id = session.get('user_id')\n        ip_address = request.remote_addr\n        user_agent = request.headers.get('User-Agent', '')\n        \n        log = ActivityLog(\n            user_id=user_id,\n            action=action,\n            description=description,\n            ip_address=ip_address,\n            user_agent=user_agent\n        )\n        db.session.add(log)\n        db.session.commit()\n    except Exception as e:\n        print(f\"Error logging activity: {e}\")\n\nbp = Blueprint('super_admin', __name__, url_prefix='/api/super-admin')\n\n@bp.route('/companies', methods=['GET'])\n@super_admin_required\ndef get_companies():\n    companies = Company.query.order_by(Company.created_at.desc()).all()\n    \n    companies_data = []\n    for company in companies:\n        company_dict = company.to_dict()\n        \n        admin_count = User.query.filter_by(company_id=company.id, role='admin').count()\n        user_count = User.query.filter_by(company_id=company.id, role='user').count()\n        quote_count = Quote.query.filter_by(company_id=company.id).count()\n        \n        company_dict['admin_count'] = admin_count\n        company_dict['user_count'] = user_count\n        company_dict['quote_count'] = quote_count\n        \n        companies_data.append(company_dict)\n    \n    return jsonify(companies_data)\n\n@bp.route('/companies/<int:company_id>/approve', methods=['POST'])\n@super_admin_required\ndef approve_company(company_id):\n    company = Company.query.get_or_404(company_id)\n    \n    if company.status == 'approved':\n        return jsonify({'error': 'Company already approved'}), 400\n    \n    company.status = 'approved'\n    company.approved_at = datetime.utcnow()\n    company.approved_by = session['user_id']\n    \n    db.session.commit()\n    \n    log_activity('company_approved', f'Approved company: {company.name}')\n    \n    return jsonify({'success': True, 'company': company.to_dict()})\n\n@bp.route('/companies/<int:company_id>/reject', methods=['POST'])\n@super_admin_required\ndef reject_company(company_id):\n    company = Company.query.get_or_404(company_id)\n    \n    company.status = 'rejected'\n    \n    db.session.commit()\n    \n    return jsonify({'success': True, 'company': company.to_dict()})\n\n@bp.route('/companies/<int:company_id>/activate', methods=['POST'])\n@super_admin_required\ndef activate_company(company_id):\n    company = Company.query.get_or_404(company_id)\n    \n    company.status = 'approved'\n    \n    for user in company.users:\n        user.is_active = True\n    \n    db.session.commit()\n    \n    return jsonify({'success': True, 'company': company.to_dict()})\n\n@bp.route('/companies/<int:company_id>/deactivate', methods=['POST'])\n@super_admin_required\ndef deactivate_company(company_id):\n    company = Company.query.get_or_404(company_id)\n    \n    company.status = 'suspended'\n    \n    for user in company.users:\n        user.is_active = False\n    \n    db.session.commit()\n    \n    return jsonify({'success': True, 'company': company.to_dict()})\n\n@bp.route('/stats', methods=['GET'])\n@super_admin_required\ndef get_stats():\n    from datetime import datetime, timedelta\n    \n    total_companies = Company.query.count()\n    active_companies = Company.query.filter_by(status='approved').count()\n    pending_companies = Company.query.filter_by(status='pending').count()\n    suspended_companies = Company.query.filter_by(status='suspended').count()\n    \n    total_users = User.query.filter(User.role != 'super_admin').count()\n    total_admins = User.query.filter_by(role='admin').count()\n    \n    total_quotes = Quote.query.count()\n    total_amount = db.session.query(db.func.sum(Quote.price_ttc)).scalar() or 0\n    \n    now = datetime.now()\n    current_month = now.strftime('%Y-%m')\n    month_quotes = Quote.query.filter(Quote.quote_date.like(f'{current_month}%')).count()\n    \n    month_quotes_list = Quote.query.filter(Quote.quote_date.like(f'{current_month}%')).all()\n    month_amount = sum(q.price_ttc for q in month_quotes_list)\n    \n    week_start = (now - timedelta(days=now.weekday())).strftime('%Y-%m-%d')\n    week_quotes = Quote.query.filter(Quote.quote_date >= week_start).count()\n    \n    week_quotes_list = Quote.query.filter(Quote.quote_date >= week_start).all()\n    week_amount = sum(q.price_ttc for q in week_quotes_list)\n    \n    avg_quote_amount = total_amount / total_quotes if total_quotes > 0 else 0\n    \n    return jsonify({\n        'total_companies': total_companies,\n        'active_companies': active_companies,\n        'pending_companies': pending_companies,\n        'suspended_companies': suspended_companies,\n        'total_users': total_users,\n        'total_admins': total_admins,\n        'total_quotes': total_quotes,\n        'total_amount': round(total_amount, 2),\n        'month_quotes': month_quotes,\n        'month_amount': round(month_amount, 2),\n        'week_quotes': week_quotes,\n        'week_amount': round(week_amount, 2),\n        'avg_quote_amount': round(avg_quote_amount, 2)\n    })\n\n@bp.route('/companies/create', methods=['POST'])\n@super_admin_required\ndef create_company_with_admin():\n    data = request.get_json()\n    \n    company_name = data.get('company_name')\n    company_address = data.get('company_address', '')\n    company_phone = data.get('company_phone', '')\n    company_email = data.get('company_email', '')\n    company_ice = data.get('company_ice', '')\n    \n    admin_username = data.get('admin_username')\n    admin_full_name = data.get('admin_full_name')\n    admin_email = data.get('admin_email')\n    admin_password = data.get('admin_password')\n    \n    if not all([company_name, admin_username, admin_full_name, admin_email, admin_password]):\n        return jsonify({'error': 'Required fields missing'}), 400\n    \n    if User.query.filter_by(username=admin_username).first():\n        return jsonify({'error': 'Username already exists'}), 400\n    \n    try:\n        current_user_id = session.get('user_id')\n        \n        company = Company()\n        company.name = company_name\n        company.status = 'approved'\n        company.approved_by = current_user_id\n        db.session.add(company)\n        db.session.flush()\n        \n        settings = Settings()\n        settings.company_id = company.id\n        settings.company_name = company_name\n        settings.address = encrypt_data(company_address) if company_address else None\n        settings.phone = encrypt_data(company_phone) if company_phone else None\n        settings.email = encrypt_data(company_email) if company_email else None\n        settings.ice = encrypt_data(company_ice) if company_ice else None\n        db.session.add(settings)\n        \n        admin = User()\n        admin.username = admin_username\n        admin.full_name = admin_full_name\n        admin.email = admin_email\n        admin.set_password(admin_password)\n        admin.role = 'admin'\n        admin.company_id = company.id\n        admin.is_active = True\n        db.session.add(admin)\n        \n        # Copy template catalog to the new company\n        if not copy_catalog_to_company(company.id):\n            raise Exception(\"Failed to copy catalog template\")\n        \n        db.session.commit()\n        \n        log_activity('company_created', f'Created company: {company_name} with admin: {admin_username}')\n        \n        return jsonify({'success': True, 'message': 'Company and admin created successfully'})\n    \n    except Exception as e:\n        db.session.rollback()\n        return jsonify({'error': str(e)}), 500\n\n@bp.route('/profile', methods=['GET'])\n@super_admin_required\ndef get_profile():\n    user_id = session.get('user_id')\n    user = User.query.get(user_id)\n    \n    if not user:\n        return jsonify({'error': 'User not found'}), 404\n    \n    return jsonify({\n        'username': user.username,\n        'full_name': user.full_name,\n        'email': getattr(user, 'email', ''),\n        'role': user.role\n    })\n\n@bp.route('/profile', methods=['PUT'])\n@super_admin_required\ndef update_profile():\n    user_id = session.get('user_id')\n    user = User.query.get(user_id)\n    \n    if not user:\n        return jsonify({'error': 'User not found'}), 404\n    \n    data = request.get_json()\n    \n    if 'full_name' in data:\n        user.full_name = data['full_name']\n    \n    if 'email' in data and hasattr(user, 'email'):\n        user.email = data['email']\n    \n    if 'password' in data and data['password']:\n        user.set_password(data['password'])\n    \n    db.session.commit()\n    \n    log_activity('profile_updated', 'Updated own profile')\n    \n    return jsonify({'success': True, 'message': 'Profile updated successfully'})\n\n@bp.route('/app-settings', methods=['GET'])\n@super_admin_required\ndef get_app_settings():\n    settings = AppSettings.query.all()\n    return jsonify([s.to_dict() for s in settings])\n\n@bp.route('/app-settings', methods=['PUT'])\n@super_admin_required\ndef update_app_settings():\n    data = request.get_json()\n    \n    for key, value in data.items():\n        setting = AppSettings.query.filter_by(key=key).first()\n        if setting:\n            setting.value = value\n        else:\n            setting = AppSettings(key=key, value=value)\n            db.session.add(setting)\n    \n    db.session.commit()\n    \n    log_activity('app_settings_updated', f'Updated app settings: {\", \".join(data.keys())}')\n    \n    return jsonify({'success': True, 'message': 'Settings updated successfully'})\n\n@bp.route('/activity-logs', methods=['GET'])\n@super_admin_required\ndef get_activity_logs():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 50, type=int)\n    \n    logs = ActivityLog.query.order_by(ActivityLog.created_at.desc()).paginate(\n        page=page, per_page=per_page, error_out=False\n    )\n    \n    return jsonify({\n        'logs': [log.to_dict() for log in logs.items],\n        'total': logs.total,\n        'pages': logs.pages,\n        'current_page': page\n    })\n\n# Backup routes\n@bp.route('/backup/create', methods=['POST'])\n@super_admin_required\ndef create_backup():\n    try:\n        data = request.get_json() or {}\n        description = data.get('description', 'Backup manuel')\n        \n        backup_service = BackupService()\n        result = backup_service.create_backup(description=description)\n        \n        log_activity('backup_created', f'Created backup: {result[\"backup_file\"]}')\n        \n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@bp.route('/backup/list', methods=['GET'])\n@super_admin_required\ndef list_backups():\n    try:\n        backup_service = BackupService()\n        backups = backup_service.list_backups()\n        stats = backup_service.get_backup_stats()\n        \n        return jsonify({\n            'success': True,\n            'backups': backups,\n            'stats': stats\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@bp.route('/backup/restore', methods=['POST'])\n@super_admin_required\ndef restore_backup():\n    try:\n        data = request.get_json()\n        backup_file = data.get('backup_file')\n        \n        if not backup_file:\n            return jsonify({'success': False, 'error': 'backup_file required'}), 400\n        \n        backup_service = BackupService()\n        result = backup_service.restore_backup(backup_file)\n        \n        log_activity('backup_restored', f'Restored backup: {backup_file}')\n        \n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n# Update routes\n@bp.route('/update/check', methods=['GET'])\n@super_admin_required\ndef check_updates():\n    try:\n        update_service = UpdateService()\n        result = update_service.check_for_updates()\n        version = update_service.get_current_version()\n        \n        return jsonify({\n            **result,\n            'current_version': version\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@bp.route('/update/perform', methods=['POST'])\n@super_admin_required\ndef perform_update():\n    try:\n        data = request.get_json() or {}\n        auto_backup = data.get('auto_backup', True)\n        auto_migrate = data.get('auto_migrate', True)\n        \n        update_service = UpdateService()\n        result = update_service.perform_update(\n            auto_backup=auto_backup,\n            auto_migrate=auto_migrate\n        )\n        \n        log_activity('system_updated', 'System updated from GitHub')\n        \n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@bp.route('/update/history', methods=['GET'])\n@super_admin_required\ndef update_history():\n    try:\n        update_service = UpdateService()\n        history = update_service.get_update_history()\n        \n        return jsonify({\n            'success': True,\n            'history': history\n        })\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n\n@bp.route('/update/rollback', methods=['POST'])\n@super_admin_required\ndef rollback_update():\n    try:\n        data = request.get_json()\n        commit_hash = data.get('commit_hash')\n        \n        if not commit_hash:\n            return jsonify({'success': False, 'error': 'commit_hash required'}), 400\n        \n        update_service = UpdateService()\n        result = update_service.rollback_update(commit_hash)\n        \n        log_activity('system_rollback', f'System rolled back to {commit_hash}')\n        \n        return jsonify(result)\n    except Exception as e:\n        return jsonify({'success': False, 'error': str(e)}), 500\n","size_bytes":16775},"app/static/js/super_admin.js":{"content":"let companies = [];\nlet currentFilter = 'all';\n\nasync function checkAuth() {\n    try {\n        const response = await fetch('/api/auth/check', { credentials: 'include' });\n        const data = await response.json();\n        \n        if (!data.authenticated || data.user.role !== 'super_admin') {\n            window.location.href = '/login.html';\n            return false;\n        }\n        \n        document.getElementById('welcomeText').textContent = `Bienvenue, ${data.user.full_name || data.user.username}`;\n        return true;\n    } catch (error) {\n        console.error('Auth check error:', error);\n        window.location.href = '/login.html';\n        return false;\n    }\n}\n\nasync function loadStats() {\n    try {\n        const response = await fetch('/api/super-admin/stats', { credentials: 'include' });\n        const stats = await response.json();\n        \n        document.getElementById('totalCompanies').textContent = stats.total_companies;\n        document.getElementById('activeCompanies').textContent = stats.active_companies;\n        document.getElementById('pendingCompanies').textContent = stats.pending_companies;\n        document.getElementById('suspendedCompanies').textContent = stats.suspended_companies;\n        document.getElementById('totalUsers').textContent = stats.total_users;\n        document.getElementById('totalAdmins').textContent = stats.total_admins;\n        document.getElementById('totalQuotes').textContent = stats.total_quotes;\n        document.getElementById('totalAmount').textContent = formatCurrency(stats.total_amount);\n        document.getElementById('monthQuotes').textContent = stats.month_quotes;\n        document.getElementById('monthAmount').textContent = formatCurrency(stats.month_amount);\n        document.getElementById('weekQuotes').textContent = stats.week_quotes;\n        document.getElementById('weekAmount').textContent = formatCurrency(stats.week_amount);\n    } catch (error) {\n        console.error('Error loading stats:', error);\n    }\n}\n\nfunction formatCurrency(amount) {\n    return new Intl.NumberFormat('fr-MA', {\n        style: 'currency',\n        currency: 'MAD'\n    }).format(amount || 0);\n}\n\nasync function loadCompanies() {\n    try {\n        const response = await fetch('/api/super-admin/companies', { credentials: 'include' });\n        companies = await response.json();\n        renderCompanies();\n    } catch (error) {\n        console.error('Error loading companies:', error);\n        document.getElementById('companiesTableBody').innerHTML = '<tr><td colspan=\"8\" style=\"text-align: center; color: red;\">Erreur de chargement</td></tr>';\n    }\n}\n\nfunction renderCompanies() {\n    const tbody = document.getElementById('companiesTableBody');\n    \n    let filteredCompanies = companies;\n    if (currentFilter !== 'all') {\n        filteredCompanies = companies.filter(c => c.status === currentFilter);\n    }\n    \n    if (filteredCompanies.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"8\" style=\"text-align: center;\">Aucune entreprise trouvée</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = filteredCompanies.map(company => {\n        const statusColors = {\n            'approved': 'green',\n            'pending': 'orange',\n            'suspended': 'red',\n            'rejected': 'gray'\n        };\n        \n        const statusLabels = {\n            'approved': 'Actif',\n            'pending': 'En attente',\n            'suspended': 'Suspendu',\n            'rejected': 'Rejeté'\n        };\n        \n        const statusColor = statusColors[company.status] || 'black';\n        const statusLabel = statusLabels[company.status] || company.status;\n        \n        let actions = '';\n        if (company.status === 'pending') {\n            actions = `\n                <button class=\"btn-primary\" onclick=\"approveCompany(${company.id})\">Approuver</button>\n                <button class=\"btn-danger\" onclick=\"rejectCompany(${company.id})\">Rejeter</button>\n            `;\n        } else if (company.status === 'approved') {\n            actions = `<button class=\"btn-danger\" onclick=\"suspendCompany(${company.id})\">Suspendre</button>`;\n        } else if (company.status === 'suspended') {\n            actions = `<button class=\"btn-primary\" onclick=\"activateCompany(${company.id})\">Activer</button>`;\n        }\n        \n        return `\n            <tr>\n                <td>${company.id}</td>\n                <td><strong>${company.name}</strong></td>\n                <td><span style=\"color: ${statusColor}; font-weight: bold;\">${statusLabel}</span></td>\n                <td>${company.admin_count || 0}</td>\n                <td>${company.user_count || 0}</td>\n                <td>${company.quote_count || 0}</td>\n                <td>${new Date(company.created_at).toLocaleDateString('fr-FR')}</td>\n                <td>${actions}</td>\n            </tr>\n        `;\n    }).join('');\n}\n\nasync function approveCompany(companyId) {\n    if (!confirm('Voulez-vous vraiment approuver cette entreprise ?')) return;\n    \n    try {\n        const response = await fetch(`/api/super-admin/companies/${companyId}/approve`, {\n            method: 'POST',\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('Entreprise approuvée avec succès');\n            await loadCompanies();\n            await loadStats();\n        } else {\n            const error = await response.json();\n            alert('Erreur: ' + (error.error || 'Impossible d\\'approuver l\\'entreprise'));\n        }\n    } catch (error) {\n        console.error('Error approving company:', error);\n        alert('Erreur lors de l\\'approbation');\n    }\n}\n\nasync function rejectCompany(companyId) {\n    if (!confirm('Voulez-vous vraiment rejeter cette entreprise ?')) return;\n    \n    try {\n        const response = await fetch(`/api/super-admin/companies/${companyId}/reject`, {\n            method: 'POST',\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('Entreprise rejetée');\n            await loadCompanies();\n            await loadStats();\n        } else {\n            alert('Erreur lors du rejet');\n        }\n    } catch (error) {\n        console.error('Error rejecting company:', error);\n        alert('Erreur lors du rejet');\n    }\n}\n\nasync function suspendCompany(companyId) {\n    if (!confirm('Voulez-vous vraiment suspendre cette entreprise ? Tous les utilisateurs seront désactivés.')) return;\n    \n    try {\n        const response = await fetch(`/api/super-admin/companies/${companyId}/deactivate`, {\n            method: 'POST',\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('Entreprise suspendue');\n            await loadCompanies();\n            await loadStats();\n        } else {\n            alert('Erreur lors de la suspension');\n        }\n    } catch (error) {\n        console.error('Error suspending company:', error);\n        alert('Erreur lors de la suspension');\n    }\n}\n\nasync function activateCompany(companyId) {\n    if (!confirm('Voulez-vous vraiment réactiver cette entreprise ?')) return;\n    \n    try {\n        const response = await fetch(`/api/super-admin/companies/${companyId}/activate`, {\n            method: 'POST',\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('Entreprise activée');\n            await loadCompanies();\n            await loadStats();\n        } else {\n            alert('Erreur lors de l\\'activation');\n        }\n    } catch (error) {\n        console.error('Error activating company:', error);\n        alert('Erreur lors de l\\'activation');\n    }\n}\n\ndocument.getElementById('logoutBtn').addEventListener('click', async () => {\n    try {\n        await fetch('/api/auth/logout', { method: 'POST', credentials: 'include' });\n        window.location.href = '/login.html';\n    } catch (error) {\n        console.error('Logout error:', error);\n    }\n});\n\ndocument.querySelectorAll('.filter-buttons button').forEach(btn => {\n    btn.addEventListener('click', (e) => {\n        document.querySelectorAll('.filter-buttons button').forEach(b => b.classList.remove('active'));\n        e.target.classList.add('active');\n        currentFilter = e.target.dataset.filter;\n        renderCompanies();\n    });\n});\n\n// Add Company Modal\nlet currentStep = 1;\n\ndocument.getElementById('addCompanyBtn').addEventListener('click', () => {\n    document.getElementById('addCompanyForm').reset();\n    showStep(1);\n    document.getElementById('addCompanyModal').style.display = 'flex';\n});\n\ndocument.getElementById('closeAddCompanyModal').addEventListener('click', () => {\n    document.getElementById('addCompanyModal').style.display = 'none';\n});\n\ndocument.getElementById('cancelAddCompanyBtn').addEventListener('click', () => {\n    document.getElementById('addCompanyModal').style.display = 'none';\n});\n\ndocument.getElementById('nextToStep2').addEventListener('click', () => {\n    const companyName = document.getElementById('companyName').value;\n    if (!companyName.trim()) {\n        alert('Veuillez saisir le nom de l\\'entreprise');\n        return;\n    }\n    showStep(2);\n});\n\ndocument.getElementById('backToStep1').addEventListener('click', () => {\n    showStep(1);\n});\n\nfunction showStep(step) {\n    currentStep = step;\n    \n    document.querySelectorAll('.form-step').forEach(s => s.classList.remove('active'));\n    document.querySelectorAll('.step').forEach(s => s.classList.remove('active'));\n    \n    document.getElementById(`step${step}`).classList.add('active');\n    document.querySelector(`.step[data-step=\"${step}\"]`).classList.add('active');\n}\n\ndocument.getElementById('addCompanyForm').addEventListener('submit', async (e) => {\n    e.preventDefault();\n    \n    const data = {\n        company_name: document.getElementById('companyName').value,\n        company_address: document.getElementById('companyAddress').value,\n        company_phone: document.getElementById('companyPhone').value,\n        company_email: document.getElementById('companyEmail').value,\n        company_ice: document.getElementById('companyICE').value,\n        admin_username: document.getElementById('adminUsername').value,\n        admin_full_name: document.getElementById('adminFullName').value,\n        admin_email: document.getElementById('adminEmail').value,\n        admin_password: document.getElementById('adminPassword').value\n    };\n    \n    try {\n        const response = await fetch('/api/super-admin/companies/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('Entreprise et administrateur créés avec succès');\n            document.getElementById('addCompanyModal').style.display = 'none';\n            await loadStats();\n            await loadCompanies();\n        } else {\n            const error = await response.json();\n            alert(error.error || 'Erreur lors de la création');\n        }\n    } catch (error) {\n        console.error('Error creating company:', error);\n        alert('Erreur lors de la création');\n    }\n});\n\n// Close modals on outside click\nwindow.addEventListener('click', (e) => {\n    if (e.target.classList.contains('modal')) {\n        e.target.style.display = 'none';\n    }\n});\n\n// App Settings\nlet appSettings = {};\n\nasync function loadAppSettings() {\n    try {\n        const response = await fetch('/api/super-admin/app-settings', { credentials: 'include' });\n        const settings = await response.json();\n        \n        appSettings = {};\n        settings.forEach(s => {\n            appSettings[s.key] = s.value;\n        });\n        \n        document.getElementById('appName').value = appSettings.app_name || '';\n        document.getElementById('appVersion').value = appSettings.app_version || '';\n        document.getElementById('appDescription').value = appSettings.app_description || '';\n        document.getElementById('githubRepo').value = appSettings.github_repo || '';\n        document.getElementById('autoUpdateEnabled').checked = appSettings.auto_update_enabled === 'true';\n        document.getElementById('appTitle').value = appSettings.app_title || '';\n        document.getElementById('dashboardTitle').value = appSettings.dashboard_title || '';\n        document.getElementById('quoteTitle').value = appSettings.quote_title || '';\n        document.getElementById('loginTitle').value = appSettings.login_title || '';\n        document.getElementById('welcomeMessage').value = appSettings.welcome_message || '';\n        document.getElementById('sendgridFromName').value = appSettings.sendgrid_from_name || '';\n    } catch (error) {\n        console.error('Error loading app settings:', error);\n    }\n}\n\nconst saveAppSettingsBtn = document.getElementById('saveAppSettings');\nif (saveAppSettingsBtn) {\n    saveAppSettingsBtn.addEventListener('click', async () => {\n    const data = {\n        app_name: document.getElementById('appName').value,\n        app_version: document.getElementById('appVersion').value,\n        app_description: document.getElementById('appDescription').value,\n        github_repo: document.getElementById('githubRepo').value,\n        auto_update_enabled: document.getElementById('autoUpdateEnabled').checked ? 'true' : 'false',\n        app_title: document.getElementById('appTitle').value,\n        dashboard_title: document.getElementById('dashboardTitle').value,\n        quote_title: document.getElementById('quoteTitle').value,\n        login_title: document.getElementById('loginTitle').value,\n        welcome_message: document.getElementById('welcomeMessage').value,\n        sendgrid_from_name: document.getElementById('sendgridFromName').value\n    };\n    \n    try {\n        const response = await fetch('/api/super-admin/app-settings', {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(data),\n            credentials: 'include'\n        });\n        \n        if (response.ok) {\n            alert('✅ Tous les paramètres SAAS ont été sauvegardés avec succès');\n            await loadAppSettings();\n        } else {\n            alert('❌ Erreur lors de la sauvegarde');\n        }\n    } catch (error) {\n        console.error('Error saving settings:', error);\n        alert('❌ Erreur lors de la sauvegarde');\n    }\n    });\n}\n\nconst checkUpdatesBtn = document.getElementById('checkUpdates');\nif (checkUpdatesBtn) {\n    checkUpdatesBtn.addEventListener('click', async () => {\n        const repo = document.getElementById('githubRepo').value;\n        if (!repo) {\n            alert('⚠️ Veuillez d\\'abord configurer le repository GitHub');\n            return;\n        }\n        \n        alert('🔄 Fonction de mise à jour en cours de développement. Vérifiez manuellement sur: ' + repo);\n    });\n}\n\n// Activity Logs\nlet currentPage = 1;\nlet totalPages = 1;\nlet usersMap = {};\n\nasync function loadActivityLogs(page = 1) {\n    try {\n        const response = await fetch(`/api/super-admin/activity-logs?page=${page}&per_page=20`, { credentials: 'include' });\n        const data = await response.json();\n        \n        currentPage = page;\n        totalPages = data.pages;\n        \n        const companiesResponse = await fetch('/api/super-admin/companies', { credentials: 'include' });\n        const companies = await companiesResponse.json();\n        \n        companies.forEach(company => {\n            if (company.users) {\n                company.users.forEach(user => {\n                    usersMap[user.id] = user.full_name || user.username;\n                });\n            }\n        });\n        \n        renderActivityLogs(data.logs);\n        updatePagination();\n    } catch (error) {\n        console.error('Error loading logs:', error);\n        document.getElementById('logsTableBody').innerHTML = '<tr><td colspan=\"5\" style=\"text-align: center; color: red;\">Erreur de chargement</td></tr>';\n    }\n}\n\nfunction renderActivityLogs(logs) {\n    const tbody = document.getElementById('logsTableBody');\n    \n    if (logs.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"5\" style=\"text-align: center;\">Aucun log trouvé</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = logs.map(log => {\n        const date = new Date(log.created_at);\n        const userName = log.user_id ? (usersMap[log.user_id] || 'Utilisateur #' + log.user_id) : 'Système';\n        \n        return `\n            <tr>\n                <td>${date.toLocaleString('fr-FR')}</td>\n                <td>${userName}</td>\n                <td><strong>${log.action}</strong></td>\n                <td>${log.description || '-'}</td>\n                <td>${log.ip_address || '-'}</td>\n            </tr>\n        `;\n    }).join('');\n}\n\nfunction updatePagination() {\n    const pageInfo = document.getElementById('pageInfo');\n    const prevPage = document.getElementById('prevPage');\n    const nextPage = document.getElementById('nextPage');\n    \n    if (pageInfo) pageInfo.textContent = `Page ${currentPage} / ${totalPages}`;\n    if (prevPage) prevPage.disabled = currentPage <= 1;\n    if (nextPage) nextPage.disabled = currentPage >= totalPages;\n}\n\nconst prevPageBtn = document.getElementById('prevPage');\nif (prevPageBtn) {\n    prevPageBtn.addEventListener('click', () => {\n        if (currentPage > 1) {\n            loadActivityLogs(currentPage - 1);\n        }\n    });\n}\n\nconst nextPageBtn = document.getElementById('nextPage');\nif (nextPageBtn) {\n    nextPageBtn.addEventListener('click', () => {\n        if (currentPage < totalPages) {\n            loadActivityLogs(currentPage + 1);\n        }\n    });\n}\n\n// Sidebar Management\nconst sidebar = document.getElementById('sidebar');\nconst sidebarOverlay = document.getElementById('sidebarOverlay');\nconst hamburgerBtn = document.getElementById('hamburgerBtn');\nconst closeSidebar = document.getElementById('closeSidebar');\n\nfunction openSidebar() {\n    sidebar.classList.add('active');\n    sidebarOverlay.classList.add('active');\n    document.body.style.overflow = 'hidden';\n}\n\nfunction closeSidebarMenu() {\n    sidebar.classList.remove('active');\n    sidebarOverlay.classList.remove('active');\n    document.body.style.overflow = '';\n}\n\nhamburgerBtn.addEventListener('click', openSidebar);\ncloseSidebar.addEventListener('click', closeSidebarMenu);\nsidebarOverlay.addEventListener('click', closeSidebarMenu);\n\n// Sidebar Navigation\nconst navItems = document.querySelectorAll('.nav-item');\nconst sidebarSections = document.querySelectorAll('.sidebar-section');\n\nnavItems.forEach(item => {\n    item.addEventListener('click', () => {\n        const sectionId = item.dataset.section;\n        \n        navItems.forEach(nav => nav.classList.remove('active'));\n        item.classList.add('active');\n        \n        sidebarSections.forEach(section => section.classList.remove('active'));\n        document.getElementById(`section-${sectionId}`).classList.add('active');\n        \n        if (sectionId === 'activity-logs') {\n            loadActivityLogs(1);\n        }\n    });\n});\n\n// Profile Management\nasync function loadProfile() {\n    try {\n        const response = await fetch('/api/super-admin/profile', { credentials: 'include' });\n        const profile = await response.json();\n        \n        document.getElementById('profileUsername').value = profile.username;\n        document.getElementById('profileFullName').value = profile.full_name;\n        document.getElementById('profileEmail').value = profile.email || '';\n    } catch (error) {\n        console.error('Error loading profile:', error);\n    }\n}\n\nconst saveProfileBtn = document.getElementById('saveProfile');\nif (saveProfileBtn) {\n    saveProfileBtn.addEventListener('click', async () => {\n        const data = {\n            full_name: document.getElementById('profileFullName').value,\n            email: document.getElementById('profileEmail').value,\n            password: document.getElementById('profilePassword').value\n        };\n        \n        try {\n            const response = await fetch('/api/super-admin/profile', {\n                method: 'PUT',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(data),\n                credentials: 'include'\n            });\n            \n            if (response.ok) {\n                alert('✅ Profil mis à jour avec succès');\n                document.getElementById('profilePassword').value = '';\n            } else {\n                alert('❌ Erreur lors de la mise à jour');\n            }\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            alert('❌ Erreur lors de la mise à jour');\n        }\n    });\n}\n\n// Language Management\nasync function loadAvailableLanguages() {\n    try {\n        const response = await fetch('/api/languages/available', { credentials: 'include' });\n        const languages = await response.json();\n        \n        const container = document.getElementById('availableLanguages');\n        if (languages.length === 0) {\n            container.innerHTML = '<p style=\"color: #666;\">Aucune langue disponible</p>';\n            return;\n        }\n        \n        container.innerHTML = languages.map(lang => `\n            <div style=\"display: inline-block; padding: 6px 12px; background: #f0f9ff; border: 1px solid #3B82F6; border-radius: 6px; margin-right: 8px; margin-bottom: 8px;\">\n                <span style=\"font-weight: 500;\">${lang.name}</span>\n                <span style=\"color: #666; margin-left: 4px;\">(${lang.code})</span>\n            </div>\n        `).join('');\n    } catch (error) {\n        console.error('Error loading languages:', error);\n    }\n}\n\nconst uploadLanguageBtn = document.getElementById('uploadLanguageBtn');\nif (uploadLanguageBtn) {\n    uploadLanguageBtn.addEventListener('click', async () => {\n        const fileInput = document.getElementById('languageFileInput');\n        const file = fileInput.files[0];\n        \n        if (!file) {\n            alert('⚠️ Veuillez sélectionner un fichier JSON');\n            return;\n        }\n        \n        const formData = new FormData();\n        formData.append('file', file);\n        \n        try {\n            uploadLanguageBtn.disabled = true;\n            uploadLanguageBtn.textContent = '⏳ Upload...';\n            \n            const response = await fetch('/api/languages/upload', {\n                method: 'POST',\n                body: formData,\n                credentials: 'include'\n            });\n            \n            const data = await response.json();\n            \n            if (response.ok) {\n                alert(`✅ ${data.message}`);\n                fileInput.value = '';\n                await loadAvailableLanguages();\n            } else {\n                alert(`❌ Erreur: ${data.error}`);\n            }\n        } catch (error) {\n            console.error('Error uploading language:', error);\n            alert('❌ Erreur lors de l\\'upload du fichier');\n        } finally {\n            uploadLanguageBtn.disabled = false;\n            uploadLanguageBtn.textContent = '📤 Uploader';\n        }\n    });\n}\n\n// ===== Backup Functions =====\nasync function loadBackups() {\n    try {\n        const response = await fetch('/api/super-admin/backup/list', { credentials: 'include' });\n        const data = await response.json();\n        \n        if (data.success) {\n            renderBackupStats(data.stats);\n            renderBackupsTable(data.backups);\n        }\n    } catch (error) {\n        console.error('Error loading backups:', error);\n    }\n}\n\nfunction renderBackupStats(stats) {\n    const statsDiv = document.getElementById('backupStats');\n    statsDiv.innerHTML = `\n        <p><strong>Total sauvegardes:</strong> ${stats.total_backups}</p>\n        <p><strong>Réussies:</strong> <span style=\"color: #10B981;\">${stats.successful}</span></p>\n        <p><strong>Échouées:</strong> <span style=\"color: #EF4444;\">${stats.failed}</span></p>\n        <p><strong>Taille totale:</strong> ${stats.total_size_mb} MB</p>\n        ${stats.latest_backup ? `<p><strong>Dernière sauvegarde:</strong> ${new Date(stats.latest_backup.datetime).toLocaleString()}</p>` : ''}\n    `;\n}\n\nfunction renderBackupsTable(backups) {\n    const tbody = document.getElementById('backupsTableBody');\n    \n    if (backups.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"6\" style=\"text-align: center;\">Aucune sauvegarde</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = backups.map(backup => `\n        <tr>\n            <td>${new Date(backup.datetime).toLocaleString()}</td>\n            <td>${backup.description || 'N/A'}</td>\n            <td>${backup.database_type || 'N/A'}</td>\n            <td>${backup.size ? (backup.size / 1024 / 1024).toFixed(2) + ' MB' : 'N/A'}</td>\n            <td>${backup.success ? '<span style=\"color: #10B981;\">✓ Réussie</span>' : '<span style=\"color: #EF4444;\">✗ Échouée</span>'}</td>\n            <td>\n                ${backup.success ? `<button class=\"btn-secondary\" onclick=\"restoreBackup('${backup.files[0]}')\">♻️ Restaurer</button>` : ''}\n            </td>\n        </tr>\n    `).join('');\n}\n\nasync function createBackup() {\n    const description = prompt('Description de cette sauvegarde (optionnel):', 'Backup manuel');\n    if (description === null) return;\n    \n    try {\n        const createBtn = document.getElementById('createBackupBtn');\n        createBtn.disabled = true;\n        createBtn.textContent = '⏳ Création...';\n        \n        const response = await fetch('/api/super-admin/backup/create', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ description }),\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        if (data.success) {\n            alert('✅ Sauvegarde créée avec succès!');\n            await loadBackups();\n        } else {\n            alert('❌ Erreur: ' + data.error);\n        }\n    } catch (error) {\n        console.error('Error creating backup:', error);\n        alert('❌ Erreur lors de la création de la sauvegarde');\n    } finally {\n        const createBtn = document.getElementById('createBackupBtn');\n        createBtn.disabled = false;\n        createBtn.textContent = '💾 Créer une sauvegarde';\n    }\n}\n\nasync function restoreBackup(backupFile) {\n    if (!confirm('⚠️ ATTENTION: Cette opération va restaurer la base de données. Une sauvegarde sera créée avant. Continuer?')) {\n        return;\n    }\n    \n    try {\n        const response = await fetch('/api/super-admin/backup/restore', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ backup_file: backupFile }),\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        if (data.success) {\n            alert('✅ Base de données restaurée avec succès! Rechargez la page.');\n            location.reload();\n        } else {\n            alert('❌ Erreur: ' + data.error);\n        }\n    } catch (error) {\n        console.error('Error restoring backup:', error);\n        alert('❌ Erreur lors de la restauration');\n    }\n}\n\n// ===== Update Functions =====\nasync function checkForUpdates() {\n    try {\n        const checkBtn = document.getElementById('checkUpdatesBtn');\n        checkBtn.disabled = true;\n        checkBtn.textContent = '⏳ Vérification...';\n        \n        const response = await fetch('/api/super-admin/update/check', { credentials: 'include' });\n        const data = await response.json();\n        \n        const statusDiv = document.getElementById('updateStatus');\n        const updateBtn = document.getElementById('performUpdateBtn');\n        \n        if (data.success) {\n            const version = data.current_version;\n            document.getElementById('currentVersion').innerHTML = `\n                <p><strong>Commit:</strong> ${version.commit}</p>\n                <p><strong>Date:</strong> ${version.date}</p>\n                <p><strong>Message:</strong> ${version.message}</p>\n                <p><strong>Branche:</strong> ${version.branch}</p>\n            `;\n            \n            if (data.updates_available) {\n                statusDiv.innerHTML = `\n                    <p style=\"color: #F59E0B;\"><strong>🆕 Mises à jour disponibles!</strong></p>\n                    <p>Commits en retard: ${data.commits_behind}</p>\n                    <p>Dernier commit: ${data.latest_commit}</p>\n                `;\n                updateBtn.style.display = 'inline-block';\n            } else {\n                statusDiv.innerHTML = `\n                    <p style=\"color: #10B981;\"><strong>✅ Vous êtes à jour!</strong></p>\n                    <p>Aucune mise à jour disponible</p>\n                `;\n                updateBtn.style.display = 'none';\n            }\n        } else {\n            statusDiv.innerHTML = `<p style=\"color: #EF4444;\">❌ ${data.error}</p>`;\n        }\n    } catch (error) {\n        console.error('Error checking updates:', error);\n        document.getElementById('updateStatus').innerHTML = '<p style=\"color: #EF4444;\">❌ Erreur de vérification</p>';\n    } finally {\n        const checkBtn = document.getElementById('checkUpdatesBtn');\n        checkBtn.disabled = false;\n        checkBtn.textContent = '🔍 Vérifier les mises à jour';\n    }\n}\n\nasync function performUpdate() {\n    if (!confirm('⚠️ ATTENTION: Cette opération va mettre à jour l\\'application. Une sauvegarde sera créée automatiquement. Continuer?')) {\n        return;\n    }\n    \n    try {\n        const updateBtn = document.getElementById('performUpdateBtn');\n        updateBtn.disabled = true;\n        updateBtn.textContent = '⏳ Mise à jour en cours...';\n        \n        const response = await fetch('/api/super-admin/update/perform', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                auto_backup: true,\n                auto_migrate: true\n            }),\n            credentials: 'include'\n        });\n        \n        const data = await response.json();\n        \n        if (data.success) {\n            alert('✅ Mise à jour réussie! L\\'application va redémarrer.');\n            location.reload();\n        } else {\n            alert('❌ Erreur: ' + data.error);\n            updateBtn.disabled = false;\n            updateBtn.textContent = '⬇️ Mettre à jour maintenant';\n        }\n    } catch (error) {\n        console.error('Error performing update:', error);\n        alert('❌ Erreur lors de la mise à jour');\n    }\n}\n\nasync function loadUpdateHistory() {\n    try {\n        const response = await fetch('/api/super-admin/update/history', { credentials: 'include' });\n        const data = await response.json();\n        \n        if (data.success) {\n            renderUpdateHistory(data.history);\n        }\n    } catch (error) {\n        console.error('Error loading update history:', error);\n    }\n}\n\nfunction renderUpdateHistory(history) {\n    const tbody = document.getElementById('updateHistoryTableBody');\n    \n    if (history.length === 0) {\n        tbody.innerHTML = '<tr><td colspan=\"4\" style=\"text-align: center;\">Aucune mise à jour effectuée</td></tr>';\n        return;\n    }\n    \n    tbody.innerHTML = history.map(update => `\n        <tr>\n            <td>${new Date(update.timestamp).toLocaleString()}</td>\n            <td>${update.success ? '<span style=\"color: #10B981;\">✓ Réussie</span>' : '<span style=\"color: #EF4444;\">✗ Échouée</span>'}</td>\n            <td>${update.steps ? update.steps.length : 0} étapes</td>\n            <td>${update.message || update.error || 'N/A'}</td>\n        </tr>\n    `).join('');\n}\n\n// Event listeners for backup and update\nif (document.getElementById('createBackupBtn')) {\n    document.getElementById('createBackupBtn').addEventListener('click', createBackup);\n    document.getElementById('refreshBackupsBtn').addEventListener('click', loadBackups);\n}\n\nif (document.getElementById('checkUpdatesBtn')) {\n    document.getElementById('checkUpdatesBtn').addEventListener('click', checkForUpdates);\n    document.getElementById('performUpdateBtn').addEventListener('click', performUpdate);\n}\n\n// Override sidebar section opening to load data\nconst originalOpenSidebarSection = window.openSidebarSection;\nwindow.openSidebarSection = function(sectionId) {\n    originalOpenSidebarSection(sectionId);\n    \n    if (sectionId === 'backup') {\n        loadBackups();\n    } else if (sectionId === 'update') {\n        checkForUpdates();\n        loadUpdateHistory();\n    }\n};\n\nasync function init() {\n    if (await checkAuth()) {\n        await Promise.all([\n            loadStats(),\n            loadCompanies(),\n            loadAppSettings(),\n            loadProfile(),\n            loadAvailableLanguages()\n        ]);\n    }\n}\n\ninit();\n","size_bytes":32989},"README.md":{"content":"# PWA Devis Menuiserie Aluminium\n\nUne Progressive Web App (PWA) multi-tenant SaaS pour la génération de devis de menuiserie en aluminium avec calcul automatique des prix, génération PDF et envoi par email.\n\n## 🎯 Fonctionnalités principales\n\n### Pour les commerciaux\n- ✅ **Création de devis en 8 étapes guidées** : sélection produit, dimensions, profilé, vitrage, accessoires, finitions, client et récapitulatif\n- 📊 **Calcul automatique des prix** en temps réel avec prise en compte des coefficients, TVA et remises\n- 📄 **Génération PDF instantanée** (<2s) avec en-tête personnalisé de l'entreprise\n- 📧 **Envoi par email** via SendGrid avec template HTML professionnel\n- 💾 **Mode hors ligne** pour continuer à travailler sans connexion\n- 📱 **Interface mobile-first** optimisée pour smartphones et tablettes\n\n### Pour les administrateurs d'entreprise\n- 👥 **Gestion des utilisateurs** (admin/utilisateur) avec isolation par entreprise\n- 🛠️ **Paramétrage complet** : logo, TVA, remises, main d'œuvre, catalogue produits\n- 📈 **Statistiques détaillées** : nombre de devis, montants, évolution mensuelle\n- 📋 **Historique des devis** avec recherche et filtres\n- 🔐 **Sécurité renforcée** : chiffrement Fernet (AES-128) pour données sensibles\n\n### Pour les super administrateurs\n- 🏢 **Gestion multi-entreprises** avec workflow d'approbation\n- 📊 **Tableau de bord global** avec statistiques consolidées (12 métriques)\n- 👤 **Gestion des profils** et paramètres applicatifs\n- 📝 **Logs d'activité** avec traçabilité complète des actions\n- ⚙️ **Personnalisation des textes** de l'application (titres, messages)\n- 📦 **Catalogue multi-tenant** : chaque entreprise a son propre catalogue isolé\n\n## 🏗️ Architecture technique\n\n### Backend\n- **Framework** : Flask 3.1.2 (Python)\n- **Base de données** : PostgreSQL avec SQLAlchemy ORM\n- **API** : RESTful avec 7 blueprints modulaires\n- **Sécurité** : \n  - PBKDF2-SHA256 pour les mots de passe\n  - Fernet (AES-128) pour les données sensibles\n  - RBAC (Role-Based Access Control) : user, admin, super_admin\n- **PDF** : ReportLab avec formatage MAD (Dirham marocain)\n- **Email** : SendGrid via Replit Connector\n\n### Frontend\n- **Technologies** : HTML5, CSS3, JavaScript vanilla\n- **UI/UX** : \n  - Design moderne avec bords arrondis (12px)\n  - Pattern diagonal subtil (2% opacité) pour profondeur visuelle\n  - Menu hamburger latéral pour navigation\n  - Cartes avec ombres et transitions fluides\n- **PWA** : Service Worker pour mode hors ligne\n- **Responsive** : Mobile-first avec grid layouts\n\n### Multi-tenancy (SaaS)\n- **Isolation complète** par `company_id` sur toutes les tables\n- **Catalogue par entreprise** : copie automatique du template à la création\n- **Utilisateurs isolés** : admins ne voient que leurs utilisateurs\n- **Données chiffrées** : email, téléphone, ICE, adresses par entreprise\n\n## 📋 Prérequis\n\n- Python 3.11+ \n- Git\n- SQLite (inclus avec Python) ou PostgreSQL 13+ (optionnel pour production)\n- Compte SendGrid (optionnel - pour l'envoi d'emails)\n\n## ⚡ Installation Automatique (Recommandé)\n\n### Installation en 1 commande avec credentials auto-générés\n\n**Ces scripts installent TOUT automatiquement et génèrent des credentials sécurisés uniques.**\n\n#### 🐧 Linux / VPS (Ubuntu, Debian, CentOS, RHEL, Fedora)\n```bash\ncurl -fsSL https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/install-auto.sh | sudo bash\n```\n✅ **Installe** : Python 3.11, PostgreSQL, Nginx, SSL, Service systemd  \n✅ **Temps** : ~5 minutes  \n✅ **Credentials** : Sauvegardés dans `/root/.devisapp_credentials`\n\n#### 🪟 Windows 10/11\nOuvrir **PowerShell en tant qu'Administrateur** :\n```powershell\nirm https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/install-auto-windows.ps1 | iex\n```\n✅ **Installe** : Python, Git, Service Windows, NSSM  \n✅ **Temps** : ~3 minutes  \n✅ **Credentials** : Sauvegardés sur le Bureau\n\n#### 🍎 macOS\n```bash\ncurl -fsSL https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/install-auto-macos.sh | bash\n```\n✅ **Installe** : Python (via Homebrew), Service LaunchAgent  \n✅ **Temps** : ~3 minutes  \n✅ **Credentials** : Sauvegardés sur le Bureau\n\n---\n\n**🔐 Sécurité** : Les credentials sont générés aléatoirement à chaque installation et sauvegardés dans un fichier sécurisé uniquement accessible à vous.\n\n---\n\n## 🚀 Installation locale (Windows 10/11)\n\n### Méthode rapide avec winget\n\nOuvrez **PowerShell** et exécutez :\n\n```powershell\n# Installer Python 3.11 et Git\nwinget install Python.Python.3.11 Git.Git\n\n# Redémarrer le terminal, puis :\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\npython -m pip install -U pip wheel setuptools\npip install -r requirements.txt\npython main.py\n```\n\n### Méthode manuelle\n\n1. **Installer Python 3.11+** : [python.org/downloads](https://www.python.org/downloads/)\n2. **Installer Git** : [git-scm.com](https://git-scm.com/download/win)\n3. **Cloner et démarrer** :\n\n```powershell\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\npython -m pip install -U pip wheel setuptools\npip install -r requirements.txt\npython main.py\n```\n\n### ✅ Accès à l'application\n\nUne fois démarrée, l'application est accessible à : **http://localhost:5000**\n\n**Compte super administrateur par défaut :**\n- Nom d'utilisateur : `superadmin`\n- Mot de passe : `admin123`\n\n> ⚠️ **Important** : Changez ce mot de passe après votre première connexion !\n\n## 🚀 Installation locale (Linux)\n\n### Ubuntu / Debian\n\n```bash\n# Installer les dépendances système\nsudo apt update\nsudo apt install -y python3 python3-venv python3-pip git\n\n# Si vous avez besoin de Python 3.11 spécifiquement (optionnel)\n# sudo apt install software-properties-common -y\n# sudo add-apt-repository ppa:deadsnakes/ppa -y\n# sudo apt update\n# sudo apt install python3.11 python3.11-venv -y\n\n# Cloner le projet\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# Créer l'environnement virtuel (utilisez python3.11 si installé, sinon python3)\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# Installer les dépendances Python\npip install -r requirements.txt\n\n# Lancer l'application\npython main.py\n```\n\n### CentOS / RHEL / Fedora\n\n```bash\n# Installer les dépendances système\nsudo dnf install -y python3 python3-pip git\n\n# Pour Python 3.11 sur RHEL 9/Fedora (optionnel)\n# sudo dnf install python3.11 python3.11-pip -y\n\n# Cloner le projet\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# Créer l'environnement virtuel\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# Installer les dépendances Python\npip install -r requirements.txt\n\n# Lancer l'application\npython main.py\n```\n\nL'application sera accessible sur `http://localhost:5000`\n\n## 🚀 Installation locale (macOS)\n\n### Avec Homebrew (recommandé)\n\n```bash\n# Installer Python 3.11 et Git\nbrew install python@3.11 git\n\n# Cloner le projet\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# Créer l'environnement virtuel\npython3.11 -m venv .venv\nsource .venv/bin/activate\n\n# Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# Installer les dépendances\npip install -r requirements.txt\n\n# Lancer l'application\npython main.py\n```\n\n### Sans Homebrew\n\n1. Installer Python 3.11+ depuis [python.org](https://www.python.org/downloads/macos/)\n2. Suivre les mêmes étapes que ci-dessus\n\nL'application sera accessible sur `http://localhost:5000`\n\n### 📊 Base de données\n\n**Par défaut :** L'application utilise **SQLite** (fichier `devis_menuiserie.db`) qui est créé automatiquement au premier lancement. Aucune configuration n'est nécessaire.\n\n**Pour PostgreSQL (optionnel) :** \n1. Créer une base de données PostgreSQL\n2. Définir `DATABASE_URL` dans le fichier `.env` :\n```env\nDATABASE_URL=postgresql://user:password@localhost/devis_menuiserie\n```\n\n## 🖥️ Déploiement VPS / Serveur Linux\n\n### ⚡ Installation ULTRA-RAPIDE (Recommandé)\n\n**Installation complète en 1 commande** - Configure tout automatiquement (PostgreSQL, Nginx, SSL) :\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/install-vps.sh | sudo bash\n```\n\nCe script configure automatiquement :\n- ✅ Python 3.11 + PostgreSQL + Nginx\n- ✅ Base de données + Service systemd\n- ✅ SSL/HTTPS avec Let's Encrypt\n- ✅ Démarrage automatique au boot\n\nTemps d'installation : **~5 minutes**\n\n📖 Voir [INSTALLATION-VPS.md](INSTALLATION-VPS.md) pour plus de détails\n\n### 🚀 Installation rapide avec script automatique\n\n```bash\n# Télécharger et exécuter le script d'installation\ncurl -O https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/deploy-vps.sh\nchmod +x deploy-vps.sh\nsudo ./deploy-vps.sh\n```\n\nLe script installe automatiquement toutes les dépendances et configure l'application.\n\n### Installation complète (Ubuntu/Debian)\n\n```bash\n# 1. Mettre à jour le système\nsudo apt update && sudo apt upgrade -y\n\n# 2. Installer Python 3.11 (si pas déjà installé)\nsudo apt install software-properties-common -y\nsudo add-apt-repository ppa:deadsnakes/ppa -y\nsudo apt update\n\n# 3. Installer les dépendances\nsudo apt install -y python3.11 python3.11-venv python3-pip git nginx postgresql postgresql-contrib\n\n# 4. Créer un utilisateur pour l'application\nsudo useradd -m -s /bin/bash devisapp\nsudo su - devisapp\n\n# 5. Cloner le projet\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# 6. Créer l'environnement virtuel\npython3.11 -m venv .venv\nsource .venv/bin/activate\n\n# 7. Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# 8. Installer les dépendances\npip install -r requirements.txt\npip install gunicorn\n\n# 9. Configurer PostgreSQL\nsudo -u postgres psql\nCREATE DATABASE devis_menuiserie;\nCREATE USER devisuser WITH PASSWORD 'votre_mot_de_passe';\nGRANT ALL PRIVILEGES ON DATABASE devis_menuiserie TO devisuser;\n\\q\n\n# 10. Créer le fichier .env\ncat > .env << EOF\nDATABASE_URL=postgresql://devisuser:votre_mot_de_passe@localhost/devis_menuiserie\nSECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_hex(32))')\nFLASK_ENV=production\nEOF\n\n# 11. Créer le service systemd\nexit  # Revenir à l'utilisateur root\n\nsudo nano /etc/systemd/system/devisapp.service\n```\n\n**Contenu du fichier devisapp.service :**\n\n```ini\n[Unit]\nDescription=PWA Devis Menuiserie Application\nAfter=network.target\n\n[Service]\nUser=devisapp\nGroup=devisapp\nWorkingDirectory=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2\nEnvironment=\"PATH=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/.venv/bin\"\nExecStart=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/.venv/bin/gunicorn -w 4 -b 127.0.0.1:5000 --reuse-port main:app\n\n[Install]\nWantedBy=multi-user.target\n```\n\n**Configuration Nginx :**\n\n```bash\nsudo nano /etc/nginx/sites-available/devisapp\n```\n\n```nginx\nserver {\n    listen 80;\n    server_name votre-domaine.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    location /static {\n        alias /home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/app/static;\n    }\n}\n```\n\n**Activer et démarrer :**\n\n```bash\n# Activer le site Nginx\nsudo ln -s /etc/nginx/sites-available/devisapp /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n\n# Démarrer l'application\nsudo systemctl start devisapp\nsudo systemctl enable devisapp\nsudo systemctl status devisapp\n```\n\n### SSL avec Let's Encrypt\n\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx -d votre-domaine.com\n```\n\n## 🪟 Déploiement Windows Server\n\n### 🚀 Installation rapide avec script automatique\n\n```powershell\n# Ouvrir PowerShell en tant qu'Administrateur, puis :\nInvoke-WebRequest -Uri \"https://raw.githubusercontent.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2/main/deploy-windows-server.ps1\" -OutFile \"deploy-windows-server.ps1\"\nSet-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force\n.\\deploy-windows-server.ps1\n```\n\nLe script installe automatiquement toutes les dépendances et configure l'application.\n\n### Installation sur Windows Server 2016/2019/2022\n\n```powershell\n# 1. Installer Python 3.11\n# Télécharger depuis python.org et installer\n\n# 2. Installer Git\n# Télécharger depuis git-scm.com et installer\n\n# 3. Cloner le projet\ncd C:\\inetpub\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# 4. Créer l'environnement virtuel\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\n\n# 5. Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# 6. Installer les dépendances\npip install -r requirements.txt\npip install waitress\n\n# 7. Créer le fichier .env\n@\"\nSECRET_KEY=votre-cle-secrete-unique\nDATABASE_URL=sqlite:///devis_menuiserie.db\nFLASK_ENV=production\n\"@ | Out-File -FilePath .env -Encoding utf8\n\n# 8. Créer un service Windows avec NSSM\n# Télécharger NSSM depuis nssm.cc\nnssm install DevisApp \"C:\\inetpub\\Webapp-Devis-Chassis-Aluminium-v2\\.venv\\Scripts\\python.exe\"\nnssm set DevisApp AppParameters \"-m waitress --port=5000 main:app\"\nnssm set DevisApp AppDirectory \"C:\\inetpub\\Webapp-Devis-Chassis-Aluminium-v2\"\nnssm set DevisApp DisplayName \"PWA Devis Menuiserie\"\nnssm set DevisApp Description \"Application de devis menuiserie aluminium\"\nnssm set DevisApp Start SERVICE_AUTO_START\n\n# 9. Démarrer le service\nnssm start DevisApp\n```\n\n### Configuration IIS comme reverse proxy\n\n1. Installer le module **URL Rewrite** et **Application Request Routing**\n2. Configurer le reverse proxy vers `http://localhost:5000`\n\n## 🌐 Déploiement sur cPanel\n\n### Prérequis\n- Accès SSH au serveur\n- Python 3.11+ installé (via Python Selector ou Setup Python App)\n- Accès à la base de données MySQL ou PostgreSQL\n\n### Installation via SSH\n\n```bash\n# 1. Se connecter en SSH\nssh votre_user@votre-serveur.com\n\n# 2. Aller dans le répertoire public_html ou créer un sous-domaine\ncd ~/public_html  # ou cd ~/subdomains/app/public_html\n\n# 3. Cloner le projet\ngit clone https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\ncd Webapp-Devis-Chassis-Aluminium-v2\n\n# 4. Créer l'environnement virtuel (via cPanel Python App ou manuellement)\nvirtualenv --python=python3.11 venv\nsource venv/bin/activate\n\n# 5. Mettre à jour pip et installer les outils de base\npython -m pip install -U pip wheel setuptools\n\n# 6. Installer les dépendances\npip install -r requirements.txt\npip install gunicorn\n\n# 7. Configurer la base de données via cPanel\n# Créer une base MySQL ou PostgreSQL dans cPanel\n\n# 8. Créer le fichier .env\ncat > .env << EOF\nDATABASE_URL=mysql://user:password@localhost/database_name\nSECRET_KEY=$(python3 -c 'import secrets; print(secrets.token_hex(32))')\nFLASK_ENV=production\nEOF\n\n# 9. Créer le fichier passenger_wsgi.py\ncat > passenger_wsgi.py << 'EOF'\nimport sys\nimport os\n\n# Ajouter le chemin de l'application\nINTERP = os.path.join(os.environ['HOME'], 'public_html', 'Webapp-Devis-Chassis-Aluminium-v2', 'venv', 'bin', 'python3')\nif sys.executable != INTERP:\n    os.execl(INTERP, INTERP, *sys.argv)\n\nsys.path.insert(0, os.path.dirname(__file__))\n\n# Charger les variables d'environnement\nfrom dotenv import load_dotenv\nload_dotenv(os.path.join(os.path.dirname(__file__), '.env'))\n\n# Importer l'application Flask\nfrom main import app as application\nEOF\n```\n\n### Configuration dans cPanel\n\n1. **Setup Python App** (si disponible) :\n   - Application root : `/home/user/public_html/Webapp-Devis-Chassis-Aluminium-v2`\n   - Application URL : `/` ou votre sous-domaine\n   - Python version : 3.11\n   - Application startup file : `passenger_wsgi.py`\n\n2. **Fichier .htaccess** (si nécessaire) :\n\n```apache\n# Créer dans public_html\nRewriteEngine On\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteCond %{REQUEST_FILENAME} !-d\nRewriteRule ^(.*)$ /Webapp-Devis-Chassis-Aluminium-v2/passenger_wsgi.py/$1 [QSA,L]\n```\n\n3. **Redémarrer l'application** via cPanel Python App\n\n### Variables d'environnement recommandées\n\n```env\n# Production\nFLASK_ENV=production\nSECRET_KEY=votre-cle-secrete-tres-longue-et-unique\nDATABASE_URL=postgresql://user:password@localhost/devis_prod\nENCRYPTION_KEY=votre-cle-chiffrement-unique\n\n# Email (optionnel)\nSENDGRID_API_KEY=votre-cle-sendgrid\nSENDGRID_FROM_EMAIL=noreply@votredomaine.com\n```\n\n## 🔌 API Endpoints\n\n### Authentification (`/api/auth`)\n- `POST /login` - Connexion\n- `POST /logout` - Déconnexion\n- `GET /check` - Vérifier le statut de connexion\n\n### Catalogue (`/api/catalog`)\n- `GET /chassis-types` - Types de châssis\n- `GET /profile-series` - Séries de profilés\n- `GET /glazing-types` - Types de vitrage\n- `GET /finishes` - Finitions\n- `GET /accessories` - Accessoires\n- `POST|PUT|DELETE /*` - CRUD (admin uniquement)\n\n### Devis (`/api/quotes`)\n- `POST /calculate` - Calculer un prix\n- `POST /` - Créer un devis\n- `GET /stats` - Statistiques\n- `GET /recent` - Devis récents\n- `GET /<id>` - Détails d'un devis\n- `GET /<id>/pdf` - Générer PDF\n- `DELETE /<id>` - Supprimer\n\n### Utilisateurs (`/api/users`)\n- `GET /` - Liste des utilisateurs (admin)\n- `POST /` - Créer un utilisateur (admin)\n- `DELETE /<id>` - Supprimer (admin)\n- `GET /me` - Profil actuel\n- `PUT /me` - Modifier profil\n\n### Email (`/api/email`)\n- `POST /send-quote` - Envoyer devis par email\n- `GET /test-connection` - Tester SendGrid\n\n### Super Admin (`/api/super-admin`)\n- `GET /companies` - Liste entreprises\n- `POST /companies/create` - Créer entreprise + admin\n- `POST /companies/<id>/approve|reject|activate|deactivate`\n- `GET /stats` - Statistiques globales\n- `GET|PUT /profile` - Profil super admin\n- `GET|PUT /app-settings` - Paramètres applicatifs\n- `GET /activity-logs` - Logs d'activité\n\n## 📊 Structure de la base de données\n\n### Tables principales\n- `companies` - Entreprises avec statut d'approbation\n- `users` - Utilisateurs avec email obligatoire\n- `quotes` - Devis avec breakdown JSON\n- `settings` - Paramètres par entreprise (chiffrés)\n- `app_settings` - Paramètres applicatifs globaux\n- `activity_logs` - Traçabilité des actions\n\n### Tables catalogue (multi-tenant)\n- `chassis_types` - Types de châssis (avec company_id)\n- `profile_series` - Séries de profilés (avec company_id)\n- `glazing_types` - Types de vitrage (avec company_id)\n- `finishes` - Finitions (avec company_id)\n- `accessories` - Accessoires (avec company_id)\n\nChaque table catalogue a une contrainte unique composite `(company_id, name)`.\nLe template (company_id=NULL) est copié automatiquement aux nouvelles entreprises.\n\n## 🔐 Sécurité\n\n### Authentification\n- Hachage PBKDF2-SHA256 avec salt pour les mots de passe\n- Sessions Flask avec cookie sécurisé\n- Vérification de rôle sur chaque endpoint protégé\n\n### Chiffrement\n- Fernet (AES-128) pour : email, téléphone, ICE, adresses\n- Clé de chiffrement stockée dans variable d'environnement\n- Déchiffrement à la volée lors de l'accès\n\n### Isolation multi-tenant\n- Filtrage automatique par `company_id` sur tous les GET\n- Vérification du `company_id` sur tous les PUT/DELETE\n- Super admin exempté des restrictions\n\n## 🎨 Personnalisation\n\n### Thème couleurs (dans `styles.css`)\n```css\n:root {\n    --primary: #3B82F6;\n    --border-radius: 12px;\n    --border-radius-sm: 8px;\n    --border-radius-lg: 16px;\n}\n```\n\n### Textes de l'application\nModifiables via l'interface super admin :\n- Titre de l'application\n- Titre du dashboard\n- Titre des devis\n- Message de bienvenue\n- Nom expéditeur SendGrid\n\n## 📝 Comptes de démonstration\n\n- **Super Admin** : `superadmin` / `superadmin123`\n- **Admin entreprise** : `admin` / `admin123`\n\n## 🤝 Support\n\nPour toute question ou problème, contactez l'équipe de développement.\n\n## 📄 Licence\n\nPropriétaire - Tous droits réservés\n","size_bytes":20785},"app/static/css/tailwind-input.css":{"content":"@import \"tailwindcss\";\n\n/* Specify content sources */\n@source \"../templates\";\n@source \"../js\";\n\n/* Preserve existing custom styles */\n:root {\n    --primary: #3B82F6;\n    --border-radius: 12px;\n    --border-radius-sm: 8px;\n    --border-radius-lg: 16px;\n}\n\n/* Keep existing pattern background */\nbody.with-pattern::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background-image: repeating-linear-gradient(\n        45deg,\n        transparent,\n        transparent 10px,\n        rgba(0, 0, 0, 0.02) 10px,\n        rgba(0, 0, 0, 0.02) 20px\n    ),\n    repeating-linear-gradient(\n        -45deg,\n        transparent,\n        transparent 10px,\n        rgba(0, 0, 0, 0.02) 10px,\n        rgba(0, 0, 0, 0.02) 20px\n    );\n    pointer-events: none;\n    z-index: -1;\n}\n","size_bytes":818},"app/static/css/tailwind.css":{"content":"/*! tailwindcss v4.1.14 | MIT License | https://tailwindcss.com */\n@layer properties{@supports (((-webkit-hyphens:none)) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,:before,:after,::backdrop{--tw-translate-x:0;--tw-translate-y:0;--tw-translate-z:0;--tw-scale-x:1;--tw-scale-y:1;--tw-scale-z:1;--tw-rotate-x:initial;--tw-rotate-y:initial;--tw-rotate-z:initial;--tw-skew-x:initial;--tw-skew-y:initial;--tw-pan-x:initial;--tw-pan-y:initial;--tw-pinch-zoom:initial;--tw-scroll-snap-strictness:proximity;--tw-space-y-reverse:0;--tw-space-x-reverse:0;--tw-divide-x-reverse:0;--tw-border-style:solid;--tw-divide-y-reverse:0;--tw-leading:initial;--tw-font-weight:initial;--tw-tracking:initial;--tw-ordinal:initial;--tw-slashed-zero:initial;--tw-numeric-figure:initial;--tw-numeric-spacing:initial;--tw-numeric-fraction:initial;--tw-shadow:0 0 #0000;--tw-shadow-color:initial;--tw-shadow-alpha:100%;--tw-inset-shadow:0 0 #0000;--tw-inset-shadow-color:initial;--tw-inset-shadow-alpha:100%;--tw-ring-color:initial;--tw-ring-shadow:0 0 #0000;--tw-inset-ring-color:initial;--tw-inset-ring-shadow:0 0 #0000;--tw-ring-inset:initial;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-offset-shadow:0 0 #0000;--tw-outline-style:solid;--tw-blur:initial;--tw-brightness:initial;--tw-contrast:initial;--tw-grayscale:initial;--tw-hue-rotate:initial;--tw-invert:initial;--tw-opacity:initial;--tw-saturate:initial;--tw-sepia:initial;--tw-drop-shadow:initial;--tw-drop-shadow-color:initial;--tw-drop-shadow-alpha:100%;--tw-drop-shadow-size:initial;--tw-backdrop-blur:initial;--tw-backdrop-brightness:initial;--tw-backdrop-contrast:initial;--tw-backdrop-grayscale:initial;--tw-backdrop-hue-rotate:initial;--tw-backdrop-invert:initial;--tw-backdrop-opacity:initial;--tw-backdrop-saturate:initial;--tw-backdrop-sepia:initial;--tw-duration:initial;--tw-ease:initial;--tw-contain-size:initial;--tw-contain-layout:initial;--tw-contain-paint:initial;--tw-contain-style:initial;--tw-text-shadow-color:initial;--tw-text-shadow-alpha:100%}}}@layer theme{:root,:host{--font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--font-serif:ui-serif,Georgia,Cambria,\"Times New Roman\",Times,serif;--font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--color-red-50:oklch(97.1% .013 17.38);--color-red-100:oklch(93.6% .032 17.717);--color-red-200:oklch(88.5% .062 18.334);--color-red-300:oklch(80.8% .114 19.571);--color-red-400:oklch(70.4% .191 22.216);--color-red-500:oklch(63.7% .237 25.331);--color-red-600:oklch(57.7% .245 27.325);--color-red-700:oklch(50.5% .213 27.518);--color-red-800:oklch(44.4% .177 26.899);--color-red-900:oklch(39.6% .141 25.723);--color-red-950:oklch(25.8% .092 26.042);--color-orange-50:oklch(98% .016 73.684);--color-orange-100:oklch(95.4% .038 75.164);--color-orange-200:oklch(90.1% .076 70.697);--color-orange-300:oklch(83.7% .128 66.29);--color-orange-400:oklch(75% .183 55.934);--color-orange-500:oklch(70.5% .213 47.604);--color-orange-600:oklch(64.6% .222 41.116);--color-orange-700:oklch(55.3% .195 38.402);--color-orange-800:oklch(47% .157 37.304);--color-orange-900:oklch(40.8% .123 38.172);--color-orange-950:oklch(26.6% .079 36.259);--color-amber-50:oklch(98.7% .022 95.277);--color-amber-100:oklch(96.2% .059 95.617);--color-amber-200:oklch(92.4% .12 95.746);--color-amber-300:oklch(87.9% .169 91.605);--color-amber-400:oklch(82.8% .189 84.429);--color-amber-500:oklch(76.9% .188 70.08);--color-amber-600:oklch(66.6% .179 58.318);--color-amber-700:oklch(55.5% .163 48.998);--color-amber-800:oklch(47.3% .137 46.201);--color-amber-900:oklch(41.4% .112 45.904);--color-amber-950:oklch(27.9% .077 45.635);--color-yellow-50:oklch(98.7% .026 102.212);--color-yellow-100:oklch(97.3% .071 103.193);--color-yellow-200:oklch(94.5% .129 101.54);--color-yellow-300:oklch(90.5% .182 98.111);--color-yellow-400:oklch(85.2% .199 91.936);--color-yellow-500:oklch(79.5% .184 86.047);--color-yellow-600:oklch(68.1% .162 75.834);--color-yellow-700:oklch(55.4% .135 66.442);--color-yellow-800:oklch(47.6% .114 61.907);--color-yellow-900:oklch(42.1% .095 57.708);--color-yellow-950:oklch(28.6% .066 53.813);--color-lime-50:oklch(98.6% .031 120.757);--color-lime-100:oklch(96.7% .067 122.328);--color-lime-200:oklch(93.8% .127 124.321);--color-lime-300:oklch(89.7% .196 126.665);--color-lime-400:oklch(84.1% .238 128.85);--color-lime-500:oklch(76.8% .233 130.85);--color-lime-600:oklch(64.8% .2 131.684);--color-lime-700:oklch(53.2% .157 131.589);--color-lime-800:oklch(45.3% .124 130.933);--color-lime-900:oklch(40.5% .101 131.063);--color-lime-950:oklch(27.4% .072 132.109);--color-green-50:oklch(98.2% .018 155.826);--color-green-100:oklch(96.2% .044 156.743);--color-green-200:oklch(92.5% .084 155.995);--color-green-300:oklch(87.1% .15 154.449);--color-green-400:oklch(79.2% .209 151.711);--color-green-500:oklch(72.3% .219 149.579);--color-green-600:oklch(62.7% .194 149.214);--color-green-700:oklch(52.7% .154 150.069);--color-green-800:oklch(44.8% .119 151.328);--color-green-900:oklch(39.3% .095 152.535);--color-green-950:oklch(26.6% .065 152.934);--color-emerald-50:oklch(97.9% .021 166.113);--color-emerald-100:oklch(95% .052 163.051);--color-emerald-200:oklch(90.5% .093 164.15);--color-emerald-300:oklch(84.5% .143 164.978);--color-emerald-400:oklch(76.5% .177 163.223);--color-emerald-500:oklch(69.6% .17 162.48);--color-emerald-600:oklch(59.6% .145 163.225);--color-emerald-700:oklch(50.8% .118 165.612);--color-emerald-800:oklch(43.2% .095 166.913);--color-emerald-900:oklch(37.8% .077 168.94);--color-emerald-950:oklch(26.2% .051 172.552);--color-teal-50:oklch(98.4% .014 180.72);--color-teal-100:oklch(95.3% .051 180.801);--color-teal-200:oklch(91% .096 180.426);--color-teal-300:oklch(85.5% .138 181.071);--color-teal-400:oklch(77.7% .152 181.912);--color-teal-500:oklch(70.4% .14 182.503);--color-teal-600:oklch(60% .118 184.704);--color-teal-700:oklch(51.1% .096 186.391);--color-teal-800:oklch(43.7% .078 188.216);--color-teal-900:oklch(38.6% .063 188.416);--color-teal-950:oklch(27.7% .046 192.524);--color-cyan-50:oklch(98.4% .019 200.873);--color-cyan-100:oklch(95.6% .045 203.388);--color-cyan-200:oklch(91.7% .08 205.041);--color-cyan-300:oklch(86.5% .127 207.078);--color-cyan-400:oklch(78.9% .154 211.53);--color-cyan-500:oklch(71.5% .143 215.221);--color-cyan-600:oklch(60.9% .126 221.723);--color-cyan-700:oklch(52% .105 223.128);--color-cyan-800:oklch(45% .085 224.283);--color-cyan-900:oklch(39.8% .07 227.392);--color-cyan-950:oklch(30.2% .056 229.695);--color-sky-50:oklch(97.7% .013 236.62);--color-sky-100:oklch(95.1% .026 236.824);--color-sky-200:oklch(90.1% .058 230.902);--color-sky-300:oklch(82.8% .111 230.318);--color-sky-400:oklch(74.6% .16 232.661);--color-sky-500:oklch(68.5% .169 237.323);--color-sky-600:oklch(58.8% .158 241.966);--color-sky-700:oklch(50% .134 242.749);--color-sky-800:oklch(44.3% .11 240.79);--color-sky-900:oklch(39.1% .09 240.876);--color-sky-950:oklch(29.3% .066 243.157);--color-blue-50:oklch(97% .014 254.604);--color-blue-100:oklch(93.2% .032 255.585);--color-blue-200:oklch(88.2% .059 254.128);--color-blue-300:oklch(80.9% .105 251.813);--color-blue-400:oklch(70.7% .165 254.624);--color-blue-500:oklch(62.3% .214 259.815);--color-blue-600:oklch(54.6% .245 262.881);--color-blue-700:oklch(48.8% .243 264.376);--color-blue-800:oklch(42.4% .199 265.638);--color-blue-900:oklch(37.9% .146 265.522);--color-blue-950:oklch(28.2% .091 267.935);--color-indigo-50:oklch(96.2% .018 272.314);--color-indigo-100:oklch(93% .034 272.788);--color-indigo-200:oklch(87% .065 274.039);--color-indigo-300:oklch(78.5% .115 274.713);--color-indigo-400:oklch(67.3% .182 276.935);--color-indigo-500:oklch(58.5% .233 277.117);--color-indigo-600:oklch(51.1% .262 276.966);--color-indigo-700:oklch(45.7% .24 277.023);--color-indigo-800:oklch(39.8% .195 277.366);--color-indigo-900:oklch(35.9% .144 278.697);--color-indigo-950:oklch(25.7% .09 281.288);--color-violet-50:oklch(96.9% .016 293.756);--color-violet-100:oklch(94.3% .029 294.588);--color-violet-200:oklch(89.4% .057 293.283);--color-violet-300:oklch(81.1% .111 293.571);--color-violet-400:oklch(70.2% .183 293.541);--color-violet-500:oklch(60.6% .25 292.717);--color-violet-600:oklch(54.1% .281 293.009);--color-violet-700:oklch(49.1% .27 292.581);--color-violet-800:oklch(43.2% .232 292.759);--color-violet-900:oklch(38% .189 293.745);--color-violet-950:oklch(28.3% .141 291.089);--color-purple-50:oklch(97.7% .014 308.299);--color-purple-100:oklch(94.6% .033 307.174);--color-purple-200:oklch(90.2% .063 306.703);--color-purple-300:oklch(82.7% .119 306.383);--color-purple-400:oklch(71.4% .203 305.504);--color-purple-500:oklch(62.7% .265 303.9);--color-purple-600:oklch(55.8% .288 302.321);--color-purple-700:oklch(49.6% .265 301.924);--color-purple-800:oklch(43.8% .218 303.724);--color-purple-900:oklch(38.1% .176 304.987);--color-purple-950:oklch(29.1% .149 302.717);--color-fuchsia-50:oklch(97.7% .017 320.058);--color-fuchsia-100:oklch(95.2% .037 318.852);--color-fuchsia-200:oklch(90.3% .076 319.62);--color-fuchsia-300:oklch(83.3% .145 321.434);--color-fuchsia-400:oklch(74% .238 322.16);--color-fuchsia-500:oklch(66.7% .295 322.15);--color-fuchsia-600:oklch(59.1% .293 322.896);--color-fuchsia-700:oklch(51.8% .253 323.949);--color-fuchsia-800:oklch(45.2% .211 324.591);--color-fuchsia-900:oklch(40.1% .17 325.612);--color-fuchsia-950:oklch(29.3% .136 325.661);--color-pink-50:oklch(97.1% .014 343.198);--color-pink-100:oklch(94.8% .028 342.258);--color-pink-200:oklch(89.9% .061 343.231);--color-pink-300:oklch(82.3% .12 346.018);--color-pink-400:oklch(71.8% .202 349.761);--color-pink-500:oklch(65.6% .241 354.308);--color-pink-600:oklch(59.2% .249 .584);--color-pink-700:oklch(52.5% .223 3.958);--color-pink-800:oklch(45.9% .187 3.815);--color-pink-900:oklch(40.8% .153 2.432);--color-pink-950:oklch(28.4% .109 3.907);--color-rose-50:oklch(96.9% .015 12.422);--color-rose-100:oklch(94.1% .03 12.58);--color-rose-200:oklch(89.2% .058 10.001);--color-rose-300:oklch(81% .117 11.638);--color-rose-400:oklch(71.2% .194 13.428);--color-rose-500:oklch(64.5% .246 16.439);--color-rose-600:oklch(58.6% .253 17.585);--color-rose-700:oklch(51.4% .222 16.935);--color-rose-800:oklch(45.5% .188 13.697);--color-rose-900:oklch(41% .159 10.272);--color-rose-950:oklch(27.1% .105 12.094);--color-slate-50:oklch(98.4% .003 247.858);--color-slate-100:oklch(96.8% .007 247.896);--color-slate-200:oklch(92.9% .013 255.508);--color-slate-300:oklch(86.9% .022 252.894);--color-slate-400:oklch(70.4% .04 256.788);--color-slate-500:oklch(55.4% .046 257.417);--color-slate-600:oklch(44.6% .043 257.281);--color-slate-700:oklch(37.2% .044 257.287);--color-slate-800:oklch(27.9% .041 260.031);--color-slate-900:oklch(20.8% .042 265.755);--color-slate-950:oklch(12.9% .042 264.695);--color-gray-50:oklch(98.5% .002 247.839);--color-gray-100:oklch(96.7% .003 264.542);--color-gray-200:oklch(92.8% .006 264.531);--color-gray-300:oklch(87.2% .01 258.338);--color-gray-400:oklch(70.7% .022 261.325);--color-gray-500:oklch(55.1% .027 264.364);--color-gray-600:oklch(44.6% .03 256.802);--color-gray-700:oklch(37.3% .034 259.733);--color-gray-800:oklch(27.8% .033 256.848);--color-gray-900:oklch(21% .034 264.665);--color-gray-950:oklch(13% .028 261.692);--color-zinc-50:oklch(98.5% 0 0);--color-zinc-100:oklch(96.7% .001 286.375);--color-zinc-200:oklch(92% .004 286.32);--color-zinc-300:oklch(87.1% .006 286.286);--color-zinc-400:oklch(70.5% .015 286.067);--color-zinc-500:oklch(55.2% .016 285.938);--color-zinc-600:oklch(44.2% .017 285.786);--color-zinc-700:oklch(37% .013 285.805);--color-zinc-800:oklch(27.4% .006 286.033);--color-zinc-900:oklch(21% .006 285.885);--color-zinc-950:oklch(14.1% .005 285.823);--color-neutral-50:oklch(98.5% 0 0);--color-neutral-100:oklch(97% 0 0);--color-neutral-200:oklch(92.2% 0 0);--color-neutral-300:oklch(87% 0 0);--color-neutral-400:oklch(70.8% 0 0);--color-neutral-500:oklch(55.6% 0 0);--color-neutral-600:oklch(43.9% 0 0);--color-neutral-700:oklch(37.1% 0 0);--color-neutral-800:oklch(26.9% 0 0);--color-neutral-900:oklch(20.5% 0 0);--color-neutral-950:oklch(14.5% 0 0);--color-stone-50:oklch(98.5% .001 106.423);--color-stone-100:oklch(97% .001 106.424);--color-stone-200:oklch(92.3% .003 48.717);--color-stone-300:oklch(86.9% .005 56.366);--color-stone-400:oklch(70.9% .01 56.259);--color-stone-500:oklch(55.3% .013 58.071);--color-stone-600:oklch(44.4% .011 73.639);--color-stone-700:oklch(37.4% .01 67.558);--color-stone-800:oklch(26.8% .007 34.298);--color-stone-900:oklch(21.6% .006 56.043);--color-stone-950:oklch(14.7% .004 49.25);--color-black:#000;--color-white:#fff;--spacing:.25rem;--breakpoint-sm:40rem;--breakpoint-md:48rem;--breakpoint-lg:64rem;--breakpoint-xl:80rem;--breakpoint-2xl:96rem;--container-3xs:16rem;--container-2xs:18rem;--container-xs:20rem;--container-sm:24rem;--container-md:28rem;--container-lg:32rem;--container-xl:36rem;--container-2xl:42rem;--container-3xl:48rem;--container-4xl:56rem;--container-5xl:64rem;--container-6xl:72rem;--container-7xl:80rem;--text-xs:.75rem;--text-xs--line-height:calc(1/.75);--text-sm:.875rem;--text-sm--line-height:calc(1.25/.875);--text-base:1rem;--text-base--line-height:calc(1.5/1);--text-lg:1.125rem;--text-lg--line-height:calc(1.75/1.125);--text-xl:1.25rem;--text-xl--line-height:calc(1.75/1.25);--text-2xl:1.5rem;--text-2xl--line-height:calc(2/1.5);--text-3xl:1.875rem;--text-3xl--line-height:calc(2.25/1.875);--text-4xl:2.25rem;--text-4xl--line-height:calc(2.5/2.25);--text-5xl:3rem;--text-5xl--line-height:1;--text-6xl:3.75rem;--text-6xl--line-height:1;--text-7xl:4.5rem;--text-7xl--line-height:1;--text-8xl:6rem;--text-8xl--line-height:1;--text-9xl:8rem;--text-9xl--line-height:1;--font-weight-thin:100;--font-weight-extralight:200;--font-weight-light:300;--font-weight-normal:400;--font-weight-medium:500;--font-weight-semibold:600;--font-weight-bold:700;--font-weight-extrabold:800;--font-weight-black:900;--tracking-tighter:-.05em;--tracking-tight:-.025em;--tracking-normal:0em;--tracking-wide:.025em;--tracking-wider:.05em;--tracking-widest:.1em;--leading-tight:1.25;--leading-snug:1.375;--leading-normal:1.5;--leading-relaxed:1.625;--leading-loose:2;--radius-xs:.125rem;--radius-sm:.25rem;--radius-md:.375rem;--radius-lg:.5rem;--radius-xl:.75rem;--radius-2xl:1rem;--radius-3xl:1.5rem;--radius-4xl:2rem;--shadow-2xs:0 1px #0000000d;--shadow-xs:0 1px 2px 0 #0000000d;--shadow-sm:0 1px 3px 0 #0000001a,0 1px 2px -1px #0000001a;--shadow-md:0 4px 6px -1px #0000001a,0 2px 4px -2px #0000001a;--shadow-lg:0 10px 15px -3px #0000001a,0 4px 6px -4px #0000001a;--shadow-xl:0 20px 25px -5px #0000001a,0 8px 10px -6px #0000001a;--shadow-2xl:0 25px 50px -12px #00000040;--inset-shadow-2xs:inset 0 1px #0000000d;--inset-shadow-xs:inset 0 1px 1px #0000000d;--inset-shadow-sm:inset 0 2px 4px #0000000d;--drop-shadow-xs:0 1px 1px #0000000d;--drop-shadow-sm:0 1px 2px #00000026;--drop-shadow-md:0 3px 3px #0000001f;--drop-shadow-lg:0 4px 4px #00000026;--drop-shadow-xl:0 9px 7px #0000001a;--drop-shadow-2xl:0 25px 25px #00000026;--text-shadow-2xs:0px 1px 0px #00000026;--text-shadow-xs:0px 1px 1px #0003;--text-shadow-sm:0px 1px 0px #00000013,0px 1px 1px #00000013,0px 2px 2px #00000013;--text-shadow-md:0px 1px 1px #0000001a,0px 1px 2px #0000001a,0px 2px 4px #0000001a;--text-shadow-lg:0px 1px 2px #0000001a,0px 3px 2px #0000001a,0px 4px 8px #0000001a;--ease-in:cubic-bezier(.4,0,1,1);--ease-out:cubic-bezier(0,0,.2,1);--ease-in-out:cubic-bezier(.4,0,.2,1);--animate-spin:spin 1s linear infinite;--animate-ping:ping 1s cubic-bezier(0,0,.2,1)infinite;--animate-pulse:pulse 2s cubic-bezier(.4,0,.6,1)infinite;--animate-bounce:bounce 1s infinite;--blur-xs:4px;--blur-sm:8px;--blur-md:12px;--blur-lg:16px;--blur-xl:24px;--blur-2xl:40px;--blur-3xl:64px;--perspective-dramatic:100px;--perspective-near:300px;--perspective-normal:500px;--perspective-midrange:800px;--perspective-distant:1200px;--aspect-video:16/9;--default-transition-duration:.15s;--default-transition-timing-function:cubic-bezier(.4,0,.2,1);--default-font-family:var(--font-sans);--default-mono-font-family:var(--font-mono)}}@layer base{*,:after,:before,::backdrop{box-sizing:border-box;border:0 solid;margin:0;padding:0}::file-selector-button{box-sizing:border-box;border:0 solid;margin:0;padding:0}html,:host{-webkit-text-size-adjust:100%;tab-size:4;line-height:1.5;font-family:var(--default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--default-font-feature-settings,normal);font-variation-settings:var(--default-font-variation-settings,normal);-webkit-tap-highlight-color:transparent}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:var(--default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--default-mono-font-feature-settings,normal);font-variation-settings:var(--default-mono-font-variation-settings,normal);font-size:1em}small{font-size:80%}sub,sup{vertical-align:baseline;font-size:75%;line-height:0;position:relative}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}ol,ul,menu{list-style:none}img,svg,video,canvas,audio,iframe,embed,object{vertical-align:middle;display:block}img,video{max-width:100%;height:auto}button,input,select,optgroup,textarea{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}::file-selector-button{font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;color:inherit;opacity:1;background-color:#0000;border-radius:0}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::file-selector-button{margin-inline-end:4px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab, red, red)){::placeholder{color:color-mix(in oklab,currentcolor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit{padding-block:0}::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-month-field{padding-block:0}::-webkit-datetime-edit-day-field{padding-block:0}::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field{padding-block:0}::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-millisecond-field{padding-block:0}::-webkit-datetime-edit-meridiem-field{padding-block:0}::-webkit-calendar-picker-indicator{line-height:1}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::file-selector-button{appearance:button}::-webkit-inner-spin-button{height:auto}::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.\\@container{container-type:inline-size}.pointer-events-auto{pointer-events:auto}.pointer-events-none{pointer-events:none}.collapse{visibility:collapse}.invisible{visibility:hidden}.visible{visibility:visible}.sr-only{clip-path:inset(50%);white-space:nowrap;border-width:0;width:1px;height:1px;margin:-1px;padding:0;position:absolute;overflow:hidden}.not-sr-only{clip-path:none;white-space:normal;width:auto;height:auto;margin:0;padding:0;position:static;overflow:visible}.absolute{position:absolute}.fixed{position:fixed}.relative{position:relative}.static{position:static}.sticky{position:sticky}.right-2{right:calc(var(--spacing)*2)}.isolate{isolation:isolate}.isolation-auto{isolation:auto}.z-10{z-index:10}.z-50{z-index:50}.order-none{order:0}.float-end{float:inline-end}.float-left{float:left}.float-none{float:none}.float-right{float:right}.float-start{float:inline-start}.clear-both{clear:both}.clear-end{clear:inline-end}.clear-left{clear:left}.clear-none{clear:none}.clear-right{clear:right}.clear-start{clear:inline-start}.container{width:100%}@media (min-width:40rem){.container{max-width:40rem}}@media (min-width:48rem){.container{max-width:48rem}}@media (min-width:64rem){.container{max-width:64rem}}@media (min-width:80rem){.container{max-width:80rem}}@media (min-width:96rem){.container{max-width:96rem}}.m-0{margin:calc(var(--spacing)*0)}.-mx-1{margin-inline:calc(var(--spacing)*-1)}.mx-auto{margin-inline:auto}.my-1{margin-block:calc(var(--spacing)*1)}.my-4{margin-block:calc(var(--spacing)*4)}.mt-8{margin-top:calc(var(--spacing)*8)}.mb-8{margin-bottom:calc(var(--spacing)*8)}.box-border{box-sizing:border-box}.box-content{box-sizing:content-box}.block{display:block}.contents{display:contents}.flex{display:flex}.flow-root{display:flow-root}.grid{display:grid}.hidden{display:none}.inline{display:inline}.inline-block{display:inline-block}.inline-flex{display:inline-flex}.inline-grid{display:inline-grid}.inline-table{display:inline-table}.list-item{display:list-item}.table{display:table}.table-caption{display:table-caption}.table-cell{display:table-cell}.table-column{display:table-column}.table-column-group{display:table-column-group}.table-footer-group{display:table-footer-group}.table-header-group{display:table-header-group}.table-row{display:table-row}.table-row-group{display:table-row-group}.field-sizing-content{field-sizing:content}.field-sizing-fixed{field-sizing:fixed}.size-3{width:calc(var(--spacing)*3);height:calc(var(--spacing)*3)}.size-3\\.5{width:calc(var(--spacing)*3.5);height:calc(var(--spacing)*3.5)}.size-4{width:calc(var(--spacing)*4);height:calc(var(--spacing)*4)}.size-9{width:calc(var(--spacing)*9);height:calc(var(--spacing)*9)}.size-auto{width:auto;height:auto}.h-8{height:calc(var(--spacing)*8)}.h-9{height:calc(var(--spacing)*9)}.h-10{height:calc(var(--spacing)*10)}.h-24{height:calc(var(--spacing)*24)}.h-36{height:calc(var(--spacing)*36)}.h-\\[var\\(--radix-select-trigger-height\\)\\]{height:var(--radix-select-trigger-height)}.h-auto{height:auto}.h-lh{height:1lh}.h-px{height:1px}.h-screen{height:100vh}.max-h-96{max-height:calc(var(--spacing)*96)}.max-h-lh{max-height:1lh}.max-h-none{max-height:none}.max-h-screen{max-height:100vh}.min-h-\\[140px\\]{min-height:140px}.min-h-auto{min-height:auto}.min-h-lh{min-height:1lh}.min-h-screen{min-height:100vh}.w-8{width:calc(var(--spacing)*8)}.w-\\[100px\\]{width:100px}.w-auto{width:auto}.w-full{width:100%}.w-screen{width:100vw}.max-w-2xl{max-width:var(--container-2xl)}.max-w-7xl{max-width:var(--container-7xl)}.max-w-none{max-width:none}.max-w-screen{max-width:100vw}.min-w-0{min-width:calc(var(--spacing)*0)}.min-w-\\[0px\\]{min-width:0}.min-w-\\[8rem\\]{min-width:8rem}.min-w-\\[320px\\]{min-width:320px}.min-w-\\[var\\(--radix-select-trigger-width\\)\\]{min-width:var(--radix-select-trigger-width)}.min-w-auto{min-width:auto}.min-w-screen{min-width:100vw}.flex-1{flex:1}.flex-auto{flex:auto}.flex-initial{flex:0 auto}.flex-none{flex:none}.flex-shrink,.shrink{flex-shrink:1}.flex-grow,.grow{flex-grow:1}.basis-auto{flex-basis:auto}.basis-full{flex-basis:100%}.table-auto{table-layout:auto}.table-fixed{table-layout:fixed}.caption-bottom{caption-side:bottom}.caption-top{caption-side:top}.border-collapse{border-collapse:collapse}.border-separate{border-collapse:separate}.-translate-full{--tw-translate-x:-100%;--tw-translate-y:-100%;translate:var(--tw-translate-x)var(--tw-translate-y)}.translate-full{--tw-translate-x:100%;--tw-translate-y:100%;translate:var(--tw-translate-x)var(--tw-translate-y)}.translate-3d{translate:var(--tw-translate-x)var(--tw-translate-y)var(--tw-translate-z)}.translate-none{translate:none}.scale-120{--tw-scale-x:120%;--tw-scale-y:120%;--tw-scale-z:120%;scale:var(--tw-scale-x)var(--tw-scale-y)}.scale-3d{scale:var(--tw-scale-x)var(--tw-scale-y)var(--tw-scale-z)}.scale-none{scale:none}.rotate-none{rotate:none}.transform,.transform-cpu{transform:var(--tw-rotate-x,)var(--tw-rotate-y,)var(--tw-rotate-z,)var(--tw-skew-x,)var(--tw-skew-y,)}.transform-gpu{transform:translateZ(0)var(--tw-rotate-x,)var(--tw-rotate-y,)var(--tw-rotate-z,)var(--tw-skew-x,)var(--tw-skew-y,)}.transform-none{transform:none}.\\[animation\\:spin_20s_linear_infinite\\],.animate-\\[spin_20s_linear_infinite\\]{animation:20s linear infinite spin}.cursor-default{cursor:default}.cursor-pointer{cursor:pointer}.touch-pinch-zoom{--tw-pinch-zoom:pinch-zoom;touch-action:var(--tw-pan-x,)var(--tw-pan-y,)var(--tw-pinch-zoom,)}.resize{resize:both}.resize-none{resize:none}.resize-x{resize:horizontal}.resize-y{resize:vertical}.snap-none{scroll-snap-type:none}.snap-mandatory{--tw-scroll-snap-strictness:mandatory}.snap-proximity{--tw-scroll-snap-strictness:proximity}.snap-align-none{scroll-snap-align:none}.snap-center{scroll-snap-align:center}.snap-end{scroll-snap-align:end}.snap-start{scroll-snap-align:start}.snap-always{scroll-snap-stop:always}.snap-normal{scroll-snap-stop:normal}.scroll-my-1{scroll-margin-block:calc(var(--spacing)*1)}.list-inside{list-style-position:inside}.list-outside{list-style-position:outside}.appearance-auto{appearance:auto}.appearance-none{appearance:none}.grid-flow-col{grid-auto-flow:column}.grid-flow-col-dense{grid-auto-flow:column dense}.grid-flow-dense{grid-auto-flow:dense}.grid-flow-row{grid-auto-flow:row}.grid-flow-row-dense{grid-auto-flow:dense}.flex-col{flex-direction:column}.flex-col-reverse{flex-direction:column-reverse}.flex-row{flex-direction:row}.flex-row-reverse{flex-direction:row-reverse}.flex-nowrap{flex-wrap:nowrap}.flex-wrap{flex-wrap:wrap}.flex-wrap-reverse{flex-wrap:wrap-reverse}.place-content-around{place-content:space-around}.place-content-baseline{place-content:baseline start}.place-content-between{place-content:space-between}.place-content-center{place-content:center}.place-content-center-safe{place-content:safe center}.place-content-end{place-content:end}.place-content-end-safe{place-content:safe end}.place-content-evenly{place-content:space-evenly}.place-content-start{place-content:start}.place-content-stretch{place-content:stretch}.place-items-baseline{place-items:baseline}.place-items-center{place-items:center}.place-items-center-safe{place-items:safe center}.place-items-end{place-items:end}.place-items-end-safe{place-items:safe end}.place-items-start{place-items:start}.place-items-stretch{place-items:stretch stretch}.content-around{align-content:space-around}.content-baseline{align-content:baseline}.content-between{align-content:space-between}.content-center{align-content:center}.content-center-safe{align-content:safe center}.content-end{align-content:flex-end}.content-end-safe{align-content:safe flex-end}.content-evenly{align-content:space-evenly}.content-normal{align-content:normal}.content-start{align-content:flex-start}.content-stretch{align-content:stretch}.items-baseline{align-items:baseline}.items-baseline-last{align-items:last baseline}.items-center{align-items:center}.items-center-safe{align-items:safe center}.items-end{align-items:flex-end}.items-end-safe{align-items:safe flex-end}.items-start{align-items:flex-start}.items-stretch{align-items:stretch}.justify-around{justify-content:space-around}.justify-baseline{justify-content:baseline}.justify-between{justify-content:space-between}.justify-center{justify-content:center}.justify-center-safe{justify-content:safe center}.justify-end{justify-content:flex-end}.justify-end-safe{justify-content:safe flex-end}.justify-evenly{justify-content:space-evenly}.justify-normal{justify-content:normal}.justify-start{justify-content:flex-start}.justify-stretch{justify-content:stretch}.justify-items-center{justify-items:center}.justify-items-center-safe{justify-items:safe center}.justify-items-end{justify-items:end}.justify-items-end-safe{justify-items:safe end}.justify-items-normal{justify-items:normal}.justify-items-start{justify-items:start}.justify-items-stretch{justify-items:stretch}.gap-1{gap:calc(var(--spacing)*1)}.gap-1\\.5{gap:calc(var(--spacing)*1.5)}.gap-2{gap:calc(var(--spacing)*2)}.gap-4{gap:calc(var(--spacing)*4)}.gap-8{gap:calc(var(--spacing)*8)}:where(.space-y-reverse>:not(:last-child)){--tw-space-y-reverse:1}:where(.space-x-reverse>:not(:last-child)){--tw-space-x-reverse:1}:where(.divide-x>:not(:last-child)){--tw-divide-x-reverse:0;border-inline-style:var(--tw-border-style);border-inline-start-width:calc(1px*var(--tw-divide-x-reverse));border-inline-end-width:calc(1px*calc(1 - var(--tw-divide-x-reverse)))}:where(.divide-y>:not(:last-child)){--tw-divide-y-reverse:0;border-bottom-style:var(--tw-border-style);border-top-style:var(--tw-border-style);border-top-width:calc(1px*var(--tw-divide-y-reverse));border-bottom-width:calc(1px*calc(1 - var(--tw-divide-y-reverse)))}:where(.divide-y-reverse>:not(:last-child)){--tw-divide-y-reverse:1}.place-self-auto{place-self:auto}.place-self-center{place-self:center}.place-self-center-safe{place-self:safe center}.place-self-end{place-self:end}.place-self-end-safe{place-self:safe end}.place-self-start{place-self:start}.place-self-stretch{place-self:stretch stretch}.self-auto{align-self:auto}.self-baseline{align-self:baseline}.self-baseline-last{align-self:last baseline}.self-center{align-self:center}.self-center-safe{align-self:safe center}.self-end{align-self:flex-end}.self-end-safe{align-self:safe flex-end}.self-start{align-self:flex-start}.self-stretch{align-self:stretch}.justify-self-auto{justify-self:auto}.justify-self-center{justify-self:center}.justify-self-center-safe{justify-self:safe center}.justify-self-end{justify-self:flex-end}.justify-self-end-safe{justify-self:safe flex-end}.justify-self-start{justify-self:flex-start}.justify-self-stretch{justify-self:stretch}.truncate{text-overflow:ellipsis;white-space:nowrap;overflow:hidden}.overflow-hidden{overflow:hidden}.scroll-auto{scroll-behavior:auto}.scroll-smooth{scroll-behavior:smooth}.rounded{border-radius:.25rem}.rounded-lg{border-radius:var(--radius-lg)}.rounded-md{border-radius:var(--radius-md)}.rounded-sm{border-radius:var(--radius-sm)}.rounded-xl{border-radius:var(--radius-xl)}.rounded-s{border-start-start-radius:.25rem;border-end-start-radius:.25rem}.rounded-ss{border-start-start-radius:.25rem}.rounded-e{border-start-end-radius:.25rem;border-end-end-radius:.25rem}.rounded-se{border-start-end-radius:.25rem}.rounded-ee{border-end-end-radius:.25rem}.rounded-es{border-end-start-radius:.25rem}.rounded-t{border-top-left-radius:.25rem;border-top-right-radius:.25rem}.rounded-l{border-top-left-radius:.25rem;border-bottom-left-radius:.25rem}.rounded-tl{border-top-left-radius:.25rem}.rounded-r{border-top-right-radius:.25rem;border-bottom-right-radius:.25rem}.rounded-tr{border-top-right-radius:.25rem}.rounded-b{border-bottom-right-radius:.25rem;border-bottom-left-radius:.25rem}.rounded-br{border-bottom-right-radius:.25rem}.rounded-bl{border-bottom-left-radius:.25rem}.border{border-style:var(--tw-border-style);border-width:1px}.border-0{border-style:var(--tw-border-style);border-width:0}.border-2{border-style:var(--tw-border-style);border-width:2px}.border-x{border-inline-style:var(--tw-border-style);border-inline-width:1px}.border-y{border-block-style:var(--tw-border-style);border-block-width:1px}.border-s{border-inline-start-style:var(--tw-border-style);border-inline-start-width:1px}.border-e{border-inline-end-style:var(--tw-border-style);border-inline-end-width:1px}.border-t{border-top-style:var(--tw-border-style);border-top-width:1px}.border-r{border-right-style:var(--tw-border-style);border-right-width:1px}.border-b{border-bottom-style:var(--tw-border-style);border-bottom-width:1px}.border-l{border-left-style:var(--tw-border-style);border-left-width:1px}.border-dashed{--tw-border-style:dashed;border-style:dashed}.border-dotted{--tw-border-style:dotted;border-style:dotted}.border-double{--tw-border-style:double;border-style:double}.border-hidden{--tw-border-style:hidden;border-style:hidden}.border-none{--tw-border-style:none;border-style:none}.border-solid{--tw-border-style:solid;border-style:solid}.border-\\[\\#fbf0df\\]{border-color:#fbf0df}.bg-\\[\\#1a1a1a\\]{background-color:#1a1a1a}.bg-\\[\\#242424\\]{background-color:#242424}.bg-\\[\\#fbf0df\\]{background-color:#fbf0df}.bg-transparent{background-color:#0000}.-bg-conic,.bg-conic{--tw-gradient-position:in oklab;background-image:conic-gradient(var(--tw-gradient-stops))}.bg-radial{--tw-gradient-position:in oklab;background-image:radial-gradient(var(--tw-gradient-stops))}.bg-none{background-image:none}.via-none{--tw-gradient-via-stops:initial}.mask-none{-webkit-mask-image:none;mask-image:none}.mask-circle{--tw-mask-radial-shape:circle}.mask-ellipse{--tw-mask-radial-shape:ellipse}.mask-radial-closest-corner{--tw-mask-radial-size:closest-corner}.mask-radial-closest-side{--tw-mask-radial-size:closest-side}.mask-radial-farthest-corner{--tw-mask-radial-size:farthest-corner}.mask-radial-farthest-side{--tw-mask-radial-size:farthest-side}.mask-radial-at-bottom{--tw-mask-radial-position:bottom}.mask-radial-at-bottom-left{--tw-mask-radial-position:bottom left}.mask-radial-at-bottom-right{--tw-mask-radial-position:bottom right}.mask-radial-at-center{--tw-mask-radial-position:center}.mask-radial-at-left{--tw-mask-radial-position:left}.mask-radial-at-right{--tw-mask-radial-position:right}.mask-radial-at-top{--tw-mask-radial-position:top}.mask-radial-at-top-left{--tw-mask-radial-position:top left}.mask-radial-at-top-right{--tw-mask-radial-position:top right}.box-decoration-clone{-webkit-box-decoration-break:clone;box-decoration-break:clone}.box-decoration-slice{-webkit-box-decoration-break:slice;box-decoration-break:slice}.decoration-clone{-webkit-box-decoration-break:clone;box-decoration-break:clone}.decoration-slice{-webkit-box-decoration-break:slice;box-decoration-break:slice}.bg-auto{background-size:auto}.bg-contain{background-size:contain}.bg-cover{background-size:cover}.bg-fixed{background-attachment:fixed}.bg-local{background-attachment:local}.bg-scroll{background-attachment:scroll}.bg-clip-border{background-clip:border-box}.bg-clip-content{background-clip:content-box}.bg-clip-padding{background-clip:padding-box}.bg-clip-text{-webkit-background-clip:text;background-clip:text}.bg-bottom{background-position:bottom}.bg-bottom-left{background-position:0 100%}.bg-bottom-right{background-position:100% 100%}.bg-center{background-position:50%}.bg-left{background-position:0}.bg-left-bottom{background-position:0 100%}.bg-left-top{background-position:0 0}.bg-right{background-position:100%}.bg-right-bottom{background-position:100% 100%}.bg-right-top{background-position:100% 0}.bg-top{background-position:top}.bg-top-left{background-position:0 0}.bg-top-right{background-position:100% 0}.bg-no-repeat{background-repeat:no-repeat}.bg-repeat{background-repeat:repeat}.bg-repeat-round{background-repeat:round}.bg-repeat-space{background-repeat:space}.bg-repeat-x{background-repeat:repeat-x}.bg-repeat-y{background-repeat:repeat-y}.bg-origin-border{background-origin:border-box}.bg-origin-content{background-origin:content-box}.bg-origin-padding{background-origin:padding-box}.mask-add{-webkit-mask-composite:source-over;-webkit-mask-composite:source-over;mask-composite:add}.mask-exclude{-webkit-mask-composite:xor;-webkit-mask-composite:xor;mask-composite:exclude}.mask-intersect{-webkit-mask-composite:source-in;-webkit-mask-composite:source-in;mask-composite:intersect}.mask-subtract{-webkit-mask-composite:source-out;-webkit-mask-composite:source-out;mask-composite:subtract}.mask-alpha{-webkit-mask-source-type:alpha;-webkit-mask-source-type:alpha;mask-mode:alpha}.mask-luminance{-webkit-mask-source-type:luminance;-webkit-mask-source-type:luminance;mask-mode:luminance}.mask-match{-webkit-mask-source-type:auto;-webkit-mask-source-type:auto;mask-mode:match-source}.mask-type-alpha{mask-type:alpha}.mask-type-luminance{mask-type:luminance}.mask-auto{-webkit-mask-size:auto;mask-size:auto}.mask-contain{-webkit-mask-size:contain;mask-size:contain}.mask-cover{-webkit-mask-size:cover;mask-size:cover}.mask-clip-border{-webkit-mask-clip:border-box;mask-clip:border-box}.mask-clip-content{-webkit-mask-clip:content-box;mask-clip:content-box}.mask-clip-fill{-webkit-mask-clip:fill-box;mask-clip:fill-box}.mask-clip-padding{-webkit-mask-clip:padding-box;mask-clip:padding-box}.mask-clip-stroke{-webkit-mask-clip:stroke-box;mask-clip:stroke-box}.mask-clip-view{-webkit-mask-clip:view-box;mask-clip:view-box}.mask-no-clip{-webkit-mask-clip:no-clip;mask-clip:no-clip}.mask-bottom{-webkit-mask-position:bottom;mask-position:bottom}.mask-bottom-left{-webkit-mask-position:0 100%;mask-position:0 100%}.mask-bottom-right{-webkit-mask-position:100% 100%;mask-position:100% 100%}.mask-center{-webkit-mask-position:50%;mask-position:50%}.mask-left{-webkit-mask-position:0;mask-position:0}.mask-right{-webkit-mask-position:100%;mask-position:100%}.mask-top{-webkit-mask-position:top;mask-position:top}.mask-top-left{-webkit-mask-position:0 0;mask-position:0 0}.mask-top-right{-webkit-mask-position:100% 0;mask-position:100% 0}.mask-no-repeat{-webkit-mask-repeat:no-repeat;mask-repeat:no-repeat}.mask-repeat{-webkit-mask-repeat:repeat;mask-repeat:repeat}.mask-repeat-round{-webkit-mask-repeat:round;mask-repeat:round}.mask-repeat-space{-webkit-mask-repeat:space;mask-repeat:space}.mask-repeat-x{-webkit-mask-repeat:repeat-x;mask-repeat:repeat-x}.mask-repeat-y{-webkit-mask-repeat:repeat-y;mask-repeat:repeat-y}.mask-origin-border{-webkit-mask-origin:border-box;mask-origin:border-box}.mask-origin-content{-webkit-mask-origin:content-box;mask-origin:content-box}.mask-origin-fill{-webkit-mask-origin:fill-box;mask-origin:fill-box}.mask-origin-padding{-webkit-mask-origin:padding-box;mask-origin:padding-box}.mask-origin-stroke{-webkit-mask-origin:stroke-box;mask-origin:stroke-box}.mask-origin-view{-webkit-mask-origin:view-box;mask-origin:view-box}.fill-none{fill:none}.stroke-none{stroke:none}.object-contain{object-fit:contain}.object-cover{object-fit:cover}.object-fill{object-fit:fill}.object-none{object-fit:none}.object-scale-down{object-fit:scale-down}.object-left-bottom{object-position:left bottom}.object-left-top{object-position:left top}.object-right-bottom{object-position:right bottom}.object-right-top{object-position:right top}.p-1{padding:calc(var(--spacing)*1)}.p-3{padding:calc(var(--spacing)*3)}.p-6{padding:calc(var(--spacing)*6)}.p-8{padding:calc(var(--spacing)*8)}.px-2{padding-inline:calc(var(--spacing)*2)}.px-3{padding-inline:calc(var(--spacing)*3)}.px-4{padding-inline:calc(var(--spacing)*4)}.px-5{padding-inline:calc(var(--spacing)*5)}.px-6{padding-inline:calc(var(--spacing)*6)}.px-\\[0\\.3rem\\]{padding-inline:.3rem}.py-1{padding-block:calc(var(--spacing)*1)}.py-1\\.5{padding-block:calc(var(--spacing)*1.5)}.py-2{padding-block:calc(var(--spacing)*2)}.py-\\[0\\.2rem\\]{padding-block:.2rem}.pt-0{padding-top:calc(var(--spacing)*0)}.pt-6{padding-top:calc(var(--spacing)*6)}.pr-8{padding-right:calc(var(--spacing)*8)}.pl-2{padding-left:calc(var(--spacing)*2)}.text-center{text-align:center}.text-end{text-align:end}.text-justify{text-align:justify}.text-left{text-align:left}.text-right{text-align:right}.text-start{text-align:start}.align-baseline{vertical-align:baseline}.align-bottom{vertical-align:bottom}.align-middle{vertical-align:middle}.align-sub{vertical-align:sub}.align-super{vertical-align:super}.align-text-bottom{vertical-align:text-bottom}.align-text-top{vertical-align:text-top}.align-top{vertical-align:top}.font-mono{font-family:var(--font-mono)}.text-5xl{font-size:var(--text-5xl);line-height:var(--tw-leading,var(--text-5xl--line-height))}.text-base{font-size:var(--text-base);line-height:var(--tw-leading,var(--text-base--line-height))}.text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.leading-none{--tw-leading:1;line-height:1}.leading-tight{--tw-leading:var(--leading-tight);line-height:var(--leading-tight)}.font-bold{--tw-font-weight:var(--font-weight-bold);font-weight:var(--font-weight-bold)}.font-medium{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.font-semibold{--tw-font-weight:var(--font-weight-semibold);font-weight:var(--font-weight-semibold)}.tracking-tight{--tw-tracking:var(--tracking-tight);letter-spacing:var(--tracking-tight)}.text-balance{text-wrap:balance}.text-nowrap{text-wrap:nowrap}.text-pretty{text-wrap:pretty}.text-wrap{text-wrap:wrap}.break-normal{overflow-wrap:normal;word-break:normal}.break-words{overflow-wrap:break-word}.wrap-anywhere{overflow-wrap:anywhere}.wrap-break-word{overflow-wrap:break-word}.wrap-normal{overflow-wrap:normal}.break-all{word-break:break-all}.break-keep{word-break:keep-all}.overflow-ellipsis{text-overflow:ellipsis}.text-clip{text-overflow:clip}.text-ellipsis{text-overflow:ellipsis}.hyphens-auto{-webkit-hyphens:auto;hyphens:auto}.hyphens-manual{-webkit-hyphens:manual;hyphens:manual}.hyphens-none{-webkit-hyphens:none;hyphens:none}.whitespace-break-spaces{white-space:break-spaces}.whitespace-normal{white-space:normal}.whitespace-nowrap{white-space:nowrap}.whitespace-pre{white-space:pre}.whitespace-pre-line{white-space:pre-line}.whitespace-pre-wrap{white-space:pre-wrap}.text-\\[\\#1a1a1a\\]{color:#1a1a1a}.text-\\[\\#fbf0df\\]{color:#fbf0df}.text-\\[rgba\\(255\\,255\\,255\\,0\\.87\\)\\]{color:#ffffffde}.capitalize{text-transform:capitalize}.lowercase{text-transform:lowercase}.normal-case{text-transform:none}.uppercase{text-transform:uppercase}.italic{font-style:italic}.not-italic{font-style:normal}.font-stretch-condensed{font-stretch:75%}.font-stretch-expanded{font-stretch:125%}.font-stretch-extra-condensed{font-stretch:62.5%}.font-stretch-extra-expanded{font-stretch:150%}.font-stretch-normal{font-stretch:100%}.font-stretch-semi-condensed{font-stretch:87.5%}.font-stretch-semi-expanded{font-stretch:112.5%}.font-stretch-ultra-condensed{font-stretch:50%}.font-stretch-ultra-expanded{font-stretch:200%}.diagonal-fractions{--tw-numeric-fraction:diagonal-fractions;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.lining-nums{--tw-numeric-figure:lining-nums;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.oldstyle-nums{--tw-numeric-figure:oldstyle-nums;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.ordinal{--tw-ordinal:ordinal;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.proportional-nums{--tw-numeric-spacing:proportional-nums;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.slashed-zero{--tw-slashed-zero:slashed-zero;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.stacked-fractions{--tw-numeric-fraction:stacked-fractions;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.tabular-nums{--tw-numeric-spacing:tabular-nums;font-variant-numeric:var(--tw-ordinal,)var(--tw-slashed-zero,)var(--tw-numeric-figure,)var(--tw-numeric-spacing,)var(--tw-numeric-fraction,)}.normal-nums{font-variant-numeric:normal}.line-through{text-decoration-line:line-through}.no-underline{text-decoration-line:none}.overline{text-decoration-line:overline}.underline{text-decoration-line:underline}.decoration-dashed{text-decoration-style:dashed}.decoration-dotted{text-decoration-style:dotted}.decoration-double{text-decoration-style:double}.decoration-solid{text-decoration-style:solid}.decoration-wavy{text-decoration-style:wavy}.decoration-auto{text-decoration-thickness:auto}.decoration-from-font{text-decoration-thickness:from-font}.underline-offset-4{text-underline-offset:4px}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.subpixel-antialiased{-webkit-font-smoothing:auto;-moz-osx-font-smoothing:auto}.placeholder-\\[\\#fbf0df\\]\\/40::placeholder{color:oklab(95.9232% .00488412 .0249393/.4)}.accent-auto{accent-color:auto}.scheme-dark{color-scheme:dark}.scheme-light{color-scheme:light}.scheme-light-dark{color-scheme:light dark}.scheme-normal{color-scheme:normal}.scheme-only-dark{color-scheme:dark only}.scheme-only-light{color-scheme:light only}.opacity-50{opacity:.5}.mix-blend-plus-darker{mix-blend-mode:plus-darker}.mix-blend-plus-lighter{mix-blend-mode:plus-lighter}.shadow{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-md{--tw-shadow:0 4px 6px -1px var(--tw-shadow-color,#0000001a),0 2px 4px -2px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-none{--tw-shadow:0 0 #0000;box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-sm{--tw-shadow:0 1px 3px 0 var(--tw-shadow-color,#0000001a),0 1px 2px -1px var(--tw-shadow-color,#0000001a);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-xs{--tw-shadow:0 1px 2px 0 var(--tw-shadow-color,#0000000d);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.ring{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(1px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.inset-ring{--tw-inset-ring-shadow:inset 0 0 0 1px var(--tw-inset-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.shadow-initial{--tw-shadow-color:initial}.inset-shadow-initial{--tw-inset-shadow-color:initial}.outline-hidden{--tw-outline-style:none;outline-style:none}@media (forced-colors:active){.outline-hidden{outline-offset:2px;outline:2px solid #0000}}.outline{outline-style:var(--tw-outline-style);outline-width:1px}.blur{--tw-blur:blur(8px);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow{--tw-drop-shadow-size:drop-shadow(0 1px 2px var(--tw-drop-shadow-color,#0000001a))drop-shadow(0 1px 1px var(--tw-drop-shadow-color,#0000000f));--tw-drop-shadow:drop-shadow(0 1px 2px #0000001a)drop-shadow(0 1px 1px #0000000f);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.drop-shadow-none{--tw-drop-shadow: ;filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.grayscale{--tw-grayscale:grayscale(100%);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.invert{--tw-invert:invert(100%);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.sepia{--tw-sepia:sepia(100%);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.filter{filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.backdrop-blur{--tw-backdrop-blur:blur(8px);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-blur-sm{--tw-backdrop-blur:blur(var(--blur-sm));-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-grayscale{--tw-backdrop-grayscale:grayscale(100%);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-invert{--tw-backdrop-invert:invert(100%);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-sepia{--tw-backdrop-sepia:sepia(100%);-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.backdrop-filter{-webkit-backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,);backdrop-filter:var(--tw-backdrop-blur,)var(--tw-backdrop-brightness,)var(--tw-backdrop-contrast,)var(--tw-backdrop-grayscale,)var(--tw-backdrop-hue-rotate,)var(--tw-backdrop-invert,)var(--tw-backdrop-opacity,)var(--tw-backdrop-saturate,)var(--tw-backdrop-sepia,)}.transition{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to,opacity,box-shadow,transform,translate,scale,rotate,filter,-webkit-backdrop-filter,backdrop-filter,display,content-visibility,overlay,pointer-events;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-\\[color\\,box-shadow\\]{transition-property:color,box-shadow;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-all{transition-property:all;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-colors{transition-property:color,background-color,border-color,outline-color,text-decoration-color,fill,stroke,--tw-gradient-from,--tw-gradient-via,--tw-gradient-to;transition-timing-function:var(--tw-ease,var(--default-transition-timing-function));transition-duration:var(--tw-duration,var(--default-transition-duration))}.transition-discrete{transition-behavior:allow-discrete}.transition-normal{transition-behavior:normal}.duration-100{--tw-duration:.1s;transition-duration:.1s}.duration-300{--tw-duration:.3s;transition-duration:.3s}.ease-in{--tw-ease:var(--ease-in);transition-timing-function:var(--ease-in)}.ease-in-out{--tw-ease:var(--ease-in-out);transition-timing-function:var(--ease-in-out)}.ease-out{--tw-ease:var(--ease-out);transition-timing-function:var(--ease-out)}.will-change-auto{will-change:auto}.will-change-contents{will-change:contents}.will-change-scroll{will-change:scroll-position}.will-change-transform{will-change:transform}.contain-inline-size{--tw-contain-size:inline-size;contain:var(--tw-contain-size,)var(--tw-contain-layout,)var(--tw-contain-paint,)var(--tw-contain-style,)}.contain-layout{--tw-contain-layout:layout;contain:var(--tw-contain-size,)var(--tw-contain-layout,)var(--tw-contain-paint,)var(--tw-contain-style,)}.contain-paint{--tw-contain-paint:paint;contain:var(--tw-contain-size,)var(--tw-contain-layout,)var(--tw-contain-paint,)var(--tw-contain-style,)}.contain-size{--tw-contain-size:size;contain:var(--tw-contain-size,)var(--tw-contain-layout,)var(--tw-contain-paint,)var(--tw-contain-style,)}.contain-style{--tw-contain-style:style;contain:var(--tw-contain-size,)var(--tw-contain-layout,)var(--tw-contain-paint,)var(--tw-contain-style,)}.contain-content{contain:content}.contain-none{contain:none}.contain-strict{contain:strict}.content-none{--tw-content:none;content:none}.forced-color-adjust-auto{forced-color-adjust:auto}.forced-color-adjust-none{forced-color-adjust:none}.outline-dashed{--tw-outline-style:dashed;outline-style:dashed}.outline-dotted{--tw-outline-style:dotted;outline-style:dotted}.outline-double{--tw-outline-style:double;outline-style:double}.outline-none{--tw-outline-style:none;outline-style:none}.outline-solid{--tw-outline-style:solid;outline-style:solid}.select-none{-webkit-user-select:none;user-select:none}.backface-hidden{backface-visibility:hidden}.backface-visible{backface-visibility:visible}:where(.divide-x-reverse>:not(:last-child)){--tw-divide-x-reverse:1}.duration-initial{--tw-duration:initial}.ring-inset{--tw-ring-inset:inset}.text-shadow-initial{--tw-text-shadow-color:initial}.transform-3d{transform-style:preserve-3d}.transform-border{transform-box:border-box}.transform-content{transform-box:content-box}.transform-fill{transform-box:fill-box}.transform-flat{transform-style:flat}.transform-stroke{transform-box:stroke-box}.transform-view{transform-box:view-box}.group-data-\\[disabled\\=true\\]\\:pointer-events-none:is(:where(.group)[data-disabled=true] *){pointer-events:none}.group-data-\\[disabled\\=true\\]\\:opacity-50:is(:where(.group)[data-disabled=true] *){opacity:.5}.peer-disabled\\:cursor-not-allowed:is(:where(.peer):disabled~*){cursor:not-allowed}.peer-disabled\\:opacity-50:is(:where(.peer):disabled~*){opacity:.5}.file\\:inline-flex::file-selector-button{display:inline-flex}.file\\:h-7::file-selector-button{height:calc(var(--spacing)*7)}.file\\:border-0::file-selector-button{border-style:var(--tw-border-style);border-width:0}.file\\:bg-transparent::file-selector-button{background-color:#0000}.file\\:text-sm::file-selector-button{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}.file\\:font-medium::file-selector-button{--tw-font-weight:var(--font-weight-medium);font-weight:var(--font-weight-medium)}.focus-within\\:border-\\[\\#f3d5a3\\]:focus-within{border-color:#f3d5a3}@media (hover:hover){.hover\\:-translate-y-px:hover{--tw-translate-y:-1px;translate:var(--tw-translate-x)var(--tw-translate-y)}.hover\\:bg-\\[\\#f3d5a3\\]:hover{background-color:#f3d5a3}.hover\\:underline:hover{text-decoration-line:underline}.hover\\:drop-shadow-\\[0_0_2em_\\#61dafbaa\\]:hover{--tw-drop-shadow-size:drop-shadow(0 0 2em var(--tw-drop-shadow-color,#61dafbaa));--tw-drop-shadow:var(--tw-drop-shadow-size);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}.hover\\:drop-shadow-\\[0_0_2em_\\#646cffaa\\]:hover{--tw-drop-shadow-size:drop-shadow(0 0 2em var(--tw-drop-shadow-color,#646cffaa));--tw-drop-shadow:var(--tw-drop-shadow-size);filter:var(--tw-blur,)var(--tw-brightness,)var(--tw-contrast,)var(--tw-grayscale,)var(--tw-hue-rotate,)var(--tw-invert,)var(--tw-saturate,)var(--tw-sepia,)var(--tw-drop-shadow,)}}.focus\\:border-\\[\\#f3d5a3\\]:focus{border-color:#f3d5a3}.focus\\:text-white:focus{color:var(--color-white)}.focus-visible\\:ring-0:focus-visible{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(0px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.focus-visible\\:ring-4:focus-visible{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(4px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.focus-visible\\:ring-offset-0:focus-visible{--tw-ring-offset-width:0px;--tw-ring-offset-shadow:var(--tw-ring-inset,)0 0 0 var(--tw-ring-offset-width)var(--tw-ring-offset-color)}.focus-visible\\:outline-1:focus-visible{outline-style:var(--tw-outline-style);outline-width:1px}.disabled\\:pointer-events-none:disabled{pointer-events:none}.disabled\\:cursor-not-allowed:disabled{cursor:not-allowed}.disabled\\:opacity-50:disabled{opacity:.5}.has-\\[\\>svg\\]\\:px-2\\.5:has(>svg){padding-inline:calc(var(--spacing)*2.5)}.has-\\[\\>svg\\]\\:px-3:has(>svg){padding-inline:calc(var(--spacing)*3)}.has-\\[\\>svg\\]\\:px-4:has(>svg){padding-inline:calc(var(--spacing)*4)}.aria-invalid\\:focus-visible\\:ring-0[aria-invalid=true]:focus-visible{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(0px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.aria-invalid\\:focus-visible\\:ring-\\[3px\\][aria-invalid=true]:focus-visible{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(3px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}.aria-invalid\\:focus-visible\\:outline-none[aria-invalid=true]:focus-visible{--tw-outline-style:none;outline-style:none}.data-\\[disabled\\]\\:pointer-events-none[data-disabled]{pointer-events:none}.data-\\[disabled\\]\\:opacity-50[data-disabled]{opacity:.5}.data-\\[side\\=bottom\\]\\:translate-y-1[data-side=bottom]{--tw-translate-y:calc(var(--spacing)*1);translate:var(--tw-translate-x)var(--tw-translate-y)}.data-\\[side\\=left\\]\\:-translate-x-1[data-side=left]{--tw-translate-x:calc(var(--spacing)*-1);translate:var(--tw-translate-x)var(--tw-translate-y)}.data-\\[side\\=right\\]\\:translate-x-1[data-side=right]{--tw-translate-x:calc(var(--spacing)*1);translate:var(--tw-translate-x)var(--tw-translate-y)}.data-\\[side\\=top\\]\\:-translate-y-1[data-side=top]{--tw-translate-y:calc(var(--spacing)*-1);translate:var(--tw-translate-x)var(--tw-translate-y)}:is(.\\*\\:data-\\[slot\\=select-value\\]\\:flex>*)[data-slot=select-value]{display:flex}:is(.\\*\\:data-\\[slot\\=select-value\\]\\:items-center>*)[data-slot=select-value]{align-items:center}:is(.\\*\\:data-\\[slot\\=select-value\\]\\:gap-2>*)[data-slot=select-value]{gap:calc(var(--spacing)*2)}@media (min-width:48rem){.md\\:text-sm{font-size:var(--text-sm);line-height:var(--tw-leading,var(--text-sm--line-height))}}@media (prefers-color-scheme:dark){.dark\\:aria-invalid\\:focus-visible\\:ring-4[aria-invalid=true]:focus-visible{--tw-ring-shadow:var(--tw-ring-inset,)0 0 0 calc(4px + var(--tw-ring-offset-width))var(--tw-ring-color,currentcolor);box-shadow:var(--tw-inset-shadow),var(--tw-inset-ring-shadow),var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow)}}.\\[\\&_svg\\]\\:pointer-events-none svg{pointer-events:none}.\\[\\&_svg\\]\\:shrink-0 svg{flex-shrink:0}.\\[\\&_svg\\:not\\(\\[class\\*\\=\\'size-\\'\\]\\)\\]\\:size-4 svg:not([class*=size-]){width:calc(var(--spacing)*4);height:calc(var(--spacing)*4)}:is(.\\*\\:\\[span\\]\\:last\\:flex>*):is(span):last-child{display:flex}:is(.\\*\\:\\[span\\]\\:last\\:items-center>*):is(span):last-child{align-items:center}:is(.\\*\\:\\[span\\]\\:last\\:gap-2>*):is(span):last-child{gap:calc(var(--spacing)*2)}.\\[\\&\\>span\\]\\:line-clamp-1>span{-webkit-line-clamp:1;-webkit-box-orient:vertical;display:-webkit-box;overflow:hidden}}:root{--primary:#3b82f6;--border-radius:12px;--border-radius-sm:8px;--border-radius-lg:16px}body.with-pattern:before{content:\"\";pointer-events:none;z-index:-1;background-image:repeating-linear-gradient(45deg,#0000,#0000 10px,#00000005 10px 20px),repeating-linear-gradient(-45deg,#0000,#0000 10px,#00000005 10px 20px);width:100%;height:100%;position:fixed;top:0;left:0}@property --tw-translate-x{syntax:\"*\";inherits:false;initial-value:0}@property --tw-translate-y{syntax:\"*\";inherits:false;initial-value:0}@property --tw-translate-z{syntax:\"*\";inherits:false;initial-value:0}@property --tw-scale-x{syntax:\"*\";inherits:false;initial-value:1}@property --tw-scale-y{syntax:\"*\";inherits:false;initial-value:1}@property --tw-scale-z{syntax:\"*\";inherits:false;initial-value:1}@property --tw-rotate-x{syntax:\"*\";inherits:false}@property --tw-rotate-y{syntax:\"*\";inherits:false}@property --tw-rotate-z{syntax:\"*\";inherits:false}@property --tw-skew-x{syntax:\"*\";inherits:false}@property --tw-skew-y{syntax:\"*\";inherits:false}@property --tw-pan-x{syntax:\"*\";inherits:false}@property --tw-pan-y{syntax:\"*\";inherits:false}@property --tw-pinch-zoom{syntax:\"*\";inherits:false}@property --tw-scroll-snap-strictness{syntax:\"*\";inherits:false;initial-value:proximity}@property --tw-space-y-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-space-x-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-divide-x-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-border-style{syntax:\"*\";inherits:false;initial-value:solid}@property --tw-divide-y-reverse{syntax:\"*\";inherits:false;initial-value:0}@property --tw-leading{syntax:\"*\";inherits:false}@property --tw-font-weight{syntax:\"*\";inherits:false}@property --tw-tracking{syntax:\"*\";inherits:false}@property --tw-ordinal{syntax:\"*\";inherits:false}@property --tw-slashed-zero{syntax:\"*\";inherits:false}@property --tw-numeric-figure{syntax:\"*\";inherits:false}@property --tw-numeric-spacing{syntax:\"*\";inherits:false}@property --tw-numeric-fraction{syntax:\"*\";inherits:false}@property --tw-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-shadow-color{syntax:\"*\";inherits:false}@property --tw-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-inset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-shadow-color{syntax:\"*\";inherits:false}@property --tw-inset-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-ring-color{syntax:\"*\";inherits:false}@property --tw-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-inset-ring-color{syntax:\"*\";inherits:false}@property --tw-inset-ring-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-ring-inset{syntax:\"*\";inherits:false}@property --tw-ring-offset-width{syntax:\"<length>\";inherits:false;initial-value:0}@property --tw-ring-offset-color{syntax:\"*\";inherits:false;initial-value:#fff}@property --tw-ring-offset-shadow{syntax:\"*\";inherits:false;initial-value:0 0 #0000}@property --tw-outline-style{syntax:\"*\";inherits:false;initial-value:solid}@property --tw-blur{syntax:\"*\";inherits:false}@property --tw-brightness{syntax:\"*\";inherits:false}@property --tw-contrast{syntax:\"*\";inherits:false}@property --tw-grayscale{syntax:\"*\";inherits:false}@property --tw-hue-rotate{syntax:\"*\";inherits:false}@property --tw-invert{syntax:\"*\";inherits:false}@property --tw-opacity{syntax:\"*\";inherits:false}@property --tw-saturate{syntax:\"*\";inherits:false}@property --tw-sepia{syntax:\"*\";inherits:false}@property --tw-drop-shadow{syntax:\"*\";inherits:false}@property --tw-drop-shadow-color{syntax:\"*\";inherits:false}@property --tw-drop-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@property --tw-drop-shadow-size{syntax:\"*\";inherits:false}@property --tw-backdrop-blur{syntax:\"*\";inherits:false}@property --tw-backdrop-brightness{syntax:\"*\";inherits:false}@property --tw-backdrop-contrast{syntax:\"*\";inherits:false}@property --tw-backdrop-grayscale{syntax:\"*\";inherits:false}@property --tw-backdrop-hue-rotate{syntax:\"*\";inherits:false}@property --tw-backdrop-invert{syntax:\"*\";inherits:false}@property --tw-backdrop-opacity{syntax:\"*\";inherits:false}@property --tw-backdrop-saturate{syntax:\"*\";inherits:false}@property --tw-backdrop-sepia{syntax:\"*\";inherits:false}@property --tw-duration{syntax:\"*\";inherits:false}@property --tw-ease{syntax:\"*\";inherits:false}@property --tw-contain-size{syntax:\"*\";inherits:false}@property --tw-contain-layout{syntax:\"*\";inherits:false}@property --tw-contain-paint{syntax:\"*\";inherits:false}@property --tw-contain-style{syntax:\"*\";inherits:false}@property --tw-text-shadow-color{syntax:\"*\";inherits:false}@property --tw-text-shadow-alpha{syntax:\"<percentage>\";inherits:false;initial-value:100%}@keyframes spin{to{transform:rotate(360deg)}}@keyframes ping{75%,to{opacity:0;transform:scale(2)}}@keyframes pulse{50%{opacity:.5}}@keyframes bounce{0%,to{animation-timing-function:cubic-bezier(.8,0,1,1);transform:translateY(-25%)}50%{animation-timing-function:cubic-bezier(0,0,.2,1);transform:none}}","size_bytes":67302},"BUILD.md":{"content":"# Instructions de Build\n\n## Prérequis\n\n### 1. Binary Tailwind CSS (obligatoire)\n\nLe binary Tailwind CSS n'est **pas inclus dans Git** (trop volumineux - 116MB). Vous devez le télécharger :\n\n#### Linux (x86_64 - Replit)\n```bash\ncurl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-linux-x64\nchmod +x tailwindcss-linux-x64\nmv tailwindcss-linux-x64 tailwindcss\n```\n\n#### macOS (Apple Silicon)\n```bash\ncurl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-arm64\nchmod +x tailwindcss-macos-arm64\nmv tailwindcss-macos-arm64 tailwindcss\n```\n\n#### macOS (Intel)\n```bash\ncurl -sLO https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-macos-x64\nchmod +x tailwindcss-macos-x64\nmv tailwindcss-macos-x64 tailwindcss\n```\n\n#### Windows\n```powershell\nInvoke-WebRequest -Uri \"https://github.com/tailwindlabs/tailwindcss/releases/latest/download/tailwindcss-windows-x64.exe\" -OutFile \"tailwindcss.exe\"\n```\n\n### 2. Dépendances Python\n\n```bash\npip install -r requirements.txt\n```\n\n## Build CSS\n\n### Option 1 : Script Python (recommandé)\n```bash\npython build_css.py\n```\n\n### Option 2 : Binary directement\n```bash\n./tailwindcss -i app/static/css/tailwind-input.css -o app/static/css/tailwind.css --minify\n```\n\n### Option 3 : Mode watch (développement)\n```bash\npython build_css.py --watch\n```\n\n## Lancement de l'application\n\n```bash\npython main.py\n```\n\nL'application sera accessible sur http://localhost:5000\n\n## Notes importantes\n\n- **100% Python** - Aucune dépendance Node.js requise\n- Le binary Tailwind CSS est dans `.gitignore` et doit être téléchargé manuellement\n- Configuration Tailwind via CSS pur (pas de `tailwind.config.js`)\n- Utilisez `build_css.py` pour rebuilder le CSS après modifications\n","size_bytes":1803},"build_css.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nTailwind CSS Build Script - 100% Python (No Node.js)\nUses standalone Tailwind binary for CSS compilation\n\"\"\"\nimport subprocess\nimport sys\nimport os\nfrom pathlib import Path\n\ndef build_css(minify=True, watch=False):\n    \"\"\"\n    Compile Tailwind CSS using the standalone binary\n    \"\"\"\n    input_file = \"app/static/css/tailwind-input.css\"\n    output_file = \"app/static/css/tailwind.css\"\n    tailwind_binary = \"./tailwindcss\"\n    \n    if not os.path.exists(tailwind_binary):\n        print(f\"❌ Error: Tailwind binary not found at {tailwind_binary}\")\n        print(\"   Download from: https://github.com/tailwindlabs/tailwindcss/releases\")\n        sys.exit(1)\n    \n    if not os.path.exists(input_file):\n        print(f\"❌ Error: Input file not found: {input_file}\")\n        sys.exit(1)\n    \n    cmd = [tailwind_binary, \"-i\", input_file, \"-o\", output_file]\n    \n    if minify:\n        cmd.append(\"--minify\")\n    \n    if watch:\n        cmd.append(\"--watch\")\n    \n    print(f\"🎨 Tailwind CSS Build (Python)\")\n    print(f\"   Input:  {input_file}\")\n    print(f\"   Output: {output_file}\")\n    print(f\"   Minify: {'Yes' if minify else 'No'}\")\n    print(f\"   Watch:  {'Yes' if watch else 'No'}\")\n    print()\n    \n    try:\n        result = subprocess.run(cmd, check=True)\n        if not watch:\n            file_size = Path(output_file).stat().st_size / 1024\n            print(f\"✅ CSS compiled successfully! ({file_size:.1f}KB)\")\n        return result.returncode\n    except subprocess.CalledProcessError as e:\n        print(f\"❌ Build failed: {e}\")\n        return e.returncode\n    except KeyboardInterrupt:\n        print(\"\\n⏹️  Watch mode stopped\")\n        return 0\n\nif __name__ == \"__main__\":\n    watch_mode = \"--watch\" in sys.argv or \"-w\" in sys.argv\n    no_minify = \"--no-minify\" in sys.argv\n    \n    if \"--help\" in sys.argv or \"-h\" in sys.argv:\n        print(\"\"\"\n🎨 Tailwind CSS Build Tool (Python)\n\nUsage: python build_css.py [options]\n\nOptions:\n  --watch, -w      Watch for changes and rebuild automatically\n  --no-minify      Don't minify the output CSS\n  --help, -h       Show this help message\n\nExamples:\n  python build_css.py              # Build once, minified\n  python build_css.py --watch      # Watch mode\n  python build_css.py --no-minify  # Build without minification\n\nNote: This script uses the standalone Tailwind binary (no Node.js required)\n        \"\"\")\n        sys.exit(0)\n    \n    sys.exit(build_css(minify=not no_minify, watch=watch_mode))\n","size_bytes":2489},"install-auto-macos.sh":{"content":"#!/bin/bash\n# Installation automatique macOS - PWA Devis Menuiserie\n# Aucune interaction requise - Credentials générés automatiquement\n\nset -e\n\n# Couleurs\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\nclear\necho -e \"${CYAN}\"\ncat << \"EOF\"\n╔════════════════════════════════════════════════════════════╗\n║                                                            ║\n║     🚀 PWA DEVIS MENUISERIE - INSTALLATION AUTO           ║\n║                                                            ║\n║     Installation 100% automatique avec credentials        ║\n║     sécurisés générés aléatoirement                       ║\n║                                                            ║\n╚════════════════════════════════════════════════════════════╝\nEOF\necho -e \"${NC}\\n\"\n\n# Générer credentials sécurisés\necho -e \"${YELLOW}🔐 Génération des credentials sécurisés...${NC}\"\nDB_PASSWORD=$(openssl rand -base64 32 | tr -d \"=+/\" | cut -c1-32)\nSECRET_KEY=$(openssl rand -hex 32)\nADMIN_PASSWORD=$(openssl rand -base64 16 | tr -d \"=+/\" | cut -c1-16)\nSUPERADMIN_PASSWORD=$(openssl rand -base64 16 | tr -d \"=+/\" | cut -c1-16)\n\n# Vérifier Homebrew\nif ! command -v brew &> /dev/null; then\n    echo -e \"${YELLOW}📦 Installation de Homebrew...${NC}\"\n    /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\nfi\n\n# Installer Python et dépendances\necho -e \"${GREEN}📦 Installation de Python 3.11...${NC}\"\nbrew install python@3.11 git 2>/dev/null || true\n\n# Répertoire installation\nINSTALL_DIR=\"$HOME/DevisApp\"\necho -e \"${GREEN}📁 Création du répertoire: ${INSTALL_DIR}${NC}\"\nmkdir -p \"$INSTALL_DIR\"\ncd \"$INSTALL_DIR\"\n\n# Cloner projet\necho -e \"${GREEN}📥 Téléchargement de l'application...${NC}\"\nif [ -d \"Webapp-Devis-Chassis-Aluminium-v2\" ]; then\n    cd Webapp-Devis-Chassis-Aluminium-v2\n    git pull -q\nelse\n    git clone -q https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\n    cd Webapp-Devis-Chassis-Aluminium-v2\nfi\n\n# Environnement virtuel\necho -e \"${GREEN}🔧 Configuration environnement Python...${NC}\"\npython3.11 -m venv .venv\nsource .venv/bin/activate\n\n# Installer dépendances\necho -e \"${GREEN}📦 Installation des dépendances...${NC}\"\npython -m pip install -q -U pip wheel setuptools\npip install -q -r requirements.txt\npip install -q gunicorn\n\n# Configuration .env\necho -e \"${GREEN}⚙️ Configuration application...${NC}\"\ncat > .env << EOF\nDATABASE_URL=sqlite:///devis_menuiserie.db\nSECRET_KEY=${SECRET_KEY}\nFLASK_ENV=production\nEOF\nchmod 600 .env\n\n# Initialiser DB avec users personnalisés\necho -e \"${GREEN}🗄️ Initialisation base de données...${NC}\"\npython << PYEOF\nfrom app import create_app, db\nfrom app.models import User, Company\nfrom werkzeug.security import generate_password_hash\n\napp = create_app()\nwith app.app_context():\n    db.create_all()\n    \n    company = Company.query.first()\n    if not company:\n        company = Company(\n            name='Entreprise par défaut',\n            is_approved=True,\n            is_active=True\n        )\n        db.session.add(company)\n        db.session.commit()\n    \n    if not User.query.filter_by(username='superadmin').first():\n        superadmin = User(\n            username='superadmin',\n            email='superadmin@devis.local',\n            password_hash=generate_password_hash('${SUPERADMIN_PASSWORD}'),\n            role='super_admin',\n            company_id=company.id,\n            is_active=True\n        )\n        db.session.add(superadmin)\n    \n    if not User.query.filter_by(username='admin').first():\n        admin = User(\n            username='admin',\n            email='admin@devis.local',\n            password_hash=generate_password_hash('${ADMIN_PASSWORD}'),\n            role='admin',\n            company_id=company.id,\n            is_active=True\n        )\n        db.session.add(admin)\n    \n    db.session.commit()\n    print(\"✅ Base de données initialisée\")\nPYEOF\n\n# Créer script de lancement\necho -e \"${GREEN}🚀 Configuration du service...${NC}\"\ncat > ~/DevisApp/start-devisapp.sh << 'STARTEOF'\n#!/bin/bash\ncd ~/DevisApp/Webapp-Devis-Chassis-Aluminium-v2\nsource .venv/bin/activate\ngunicorn -w 4 -b 127.0.0.1:5000 --reuse-port main:app\nSTARTEOF\nchmod +x ~/DevisApp/start-devisapp.sh\n\n# Créer LaunchAgent pour démarrage auto\nmkdir -p ~/Library/LaunchAgents\ncat > ~/Library/LaunchAgents/com.devisapp.plist << PLISTEOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.devisapp</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>${HOME}/DevisApp/start-devisapp.sh</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n    <key>WorkingDirectory</key>\n    <string>${HOME}/DevisApp/Webapp-Devis-Chassis-Aluminium-v2</string>\n    <key>StandardOutPath</key>\n    <string>${HOME}/DevisApp/devisapp.log</string>\n    <key>StandardErrorPath</key>\n    <string>${HOME}/DevisApp/devisapp-error.log</string>\n</dict>\n</plist>\nPLISTEOF\n\n# Charger le service\nlaunchctl unload ~/Library/LaunchAgents/com.devisapp.plist 2>/dev/null || true\nlaunchctl load ~/Library/LaunchAgents/com.devisapp.plist\n\n# Obtenir IP local\nLOCAL_IP=$(ipconfig getifaddr en0 || ipconfig getifaddr en1 || echo \"localhost\")\n\n# Sauvegarder credentials\nCRED_FILE=\"$HOME/Desktop/DevisApp_Credentials.txt\"\ncat > \"${CRED_FILE}\" << CREDEOF\n═══════════════════════════════════════════════════════════════\n  🔐 CREDENTIALS - PWA DEVIS MENUISERIE\n═══════════════════════════════════════════════════════════════\n\n📅 Date installation: $(date)\n🖥️  Serveur IP: ${LOCAL_IP}\n\n─────────────────────────────────────────────────────────────\n\n🌐 ACCÈS APPLICATION\n   URL Local: http://localhost:5000\n   URL Réseau: http://${LOCAL_IP}:5000\n\n👑 SUPER ADMINISTRATEUR\n   Username: superadmin\n   Password: ${SUPERADMIN_PASSWORD}\n   Email: superadmin@devis.local\n\n👤 ADMINISTRATEUR\n   Username: admin\n   Password: ${ADMIN_PASSWORD}\n   Email: admin@devis.local\n\n─────────────────────────────────────────────────────────────\n\n🗄️  BASE DE DONNÉES SQLITE\n   Fichier: devis_menuiserie.db\n   Path: ${INSTALL_DIR}/Webapp-Devis-Chassis-Aluminium-v2/devis_menuiserie.db\n\n─────────────────────────────────────────────────────────────\n\n🔑 CLÉS DE SÉCURITÉ\n   SECRET_KEY: ${SECRET_KEY}\n\n─────────────────────────────────────────────────────────────\n\n⚙️  COMMANDES UTILES\n   Démarrer:  launchctl load ~/Library/LaunchAgents/com.devisapp.plist\n   Arrêter:   launchctl unload ~/Library/LaunchAgents/com.devisapp.plist\n   Logs:      tail -f ~/DevisApp/devisapp.log\n   Erreurs:   tail -f ~/DevisApp/devisapp-error.log\n\n─────────────────────────────────────────────────────────────\n\n⚠️  SÉCURITÉ\n   - Changez les mots de passe après première connexion\n   - Fichier sauvegardé: ${CRED_FILE}\n   - Installation: ${INSTALL_DIR}/Webapp-Devis-Chassis-Aluminium-v2\n\n═══════════════════════════════════════════════════════════════\nCREDEOF\n\nchmod 600 \"${CRED_FILE}\"\n\n# Afficher résultat\nsleep 2\nclear\necho -e \"${GREEN}\"\ncat << \"EOF\"\n╔════════════════════════════════════════════════════════════╗\n║                                                            ║\n║           ✅ INSTALLATION TERMINÉE AVEC SUCCÈS            ║\n║                                                            ║\n╚════════════════════════════════════════════════════════════╝\nEOF\necho -e \"${NC}\\n\"\n\ncat \"${CRED_FILE}\"\n\necho -e \"\\n${YELLOW}📋 Credentials sauvegardés sur le Bureau: DevisApp_Credentials.txt${NC}\"\necho -e \"${GREEN}\\n✅ Application démarrée automatiquement${NC}\"\necho -e \"${CYAN}\\n🌐 Accès: http://localhost:5000${NC}\\n\"\n\n# Ouvrir navigateur\nsleep 2\nopen http://localhost:5000\n","size_bytes":9389},"install-auto.sh":{"content":"#!/bin/bash\n# Installation automatique VPS - PWA Devis Menuiserie\n# Aucune interaction requise - Credentials générés automatiquement\n\nset -e\n\n# Couleurs\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nCYAN='\\033[0;36m'\nNC='\\033[0m'\n\nclear\necho -e \"${CYAN}\"\ncat << \"EOF\"\n╔════════════════════════════════════════════════════════════╗\n║                                                            ║\n║     🚀 PWA DEVIS MENUISERIE - INSTALLATION AUTO           ║\n║                                                            ║\n║     Installation 100% automatique avec credentials        ║\n║     sécurisés générés aléatoirement                       ║\n║                                                            ║\n╚════════════════════════════════════════════════════════════╝\nEOF\necho -e \"${NC}\\n\"\n\n# Vérifier root\nif [ \"$EUID\" -ne 0 ]; then \n    echo -e \"${RED}❌ Exécutez avec sudo${NC}\"\n    exit 1\nfi\n\n# Générer credentials sécurisés\necho -e \"${YELLOW}🔐 Génération des credentials sécurisés...${NC}\"\nDB_USER=\"devisapp_$(openssl rand -hex 4)\"\nDB_PASSWORD=$(openssl rand -base64 32 | tr -d \"=+/\" | cut -c1-32)\nSECRET_KEY=$(openssl rand -hex 32)\nENCRYPTION_KEY=$(python3 -c \"from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())\" 2>/dev/null || openssl rand -base64 32)\nADMIN_PASSWORD=$(openssl rand -base64 16 | tr -d \"=+/\" | cut -c1-16)\nSUPERADMIN_PASSWORD=$(openssl rand -base64 16 | tr -d \"=+/\" | cut -c1-16)\n\n# Détecter OS\nif [ -f /etc/os-release ]; then\n    . /etc/os-release\n    OS=$ID\nfi\n\necho -e \"${GREEN}📦 Installation des dépendances (${OS})...${NC}\"\nif [ \"$OS\" = \"ubuntu\" ] || [ \"$OS\" = \"debian\" ]; then\n    export DEBIAN_FRONTEND=noninteractive\n    apt update -qq\n    apt install -y -qq software-properties-common\n    add-apt-repository ppa:deadsnakes/ppa -y\n    apt update -qq\n    apt install -y -qq python3.11 python3.11-venv python3-pip git nginx postgresql postgresql-contrib ufw\nelif [ \"$OS\" = \"centos\" ] || [ \"$OS\" = \"rhel\" ] || [ \"$OS\" = \"fedora\" ]; then\n    dnf install -y -q python3.11 python3-pip git nginx postgresql-server postgresql-contrib firewalld\n    postgresql-setup --initdb\n    systemctl start postgresql\n    systemctl enable postgresql\nfi\n\necho -e \"${GREEN}👤 Configuration utilisateur système...${NC}\"\nif ! id \"devisapp\" &>/dev/null; then\n    useradd -m -s /bin/bash devisapp\nfi\n\necho -e \"${GREEN}📥 Installation application...${NC}\"\nsudo -u devisapp bash << 'USEREOF'\ncd ~\nif [ -d \"Webapp-Devis-Chassis-Aluminium-v2\" ]; then\n    cd Webapp-Devis-Chassis-Aluminium-v2\n    git pull -q\nelse\n    git clone -q https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2\n    cd Webapp-Devis-Chassis-Aluminium-v2\nfi\n\npython3.11 -m venv .venv\nsource .venv/bin/activate\npython -m pip install -q -U pip wheel setuptools\npip install -q -r requirements.txt\npip install -q gunicorn\nUSEREOF\n\necho -e \"${GREEN}🗄️ Configuration PostgreSQL...${NC}\"\nsudo -u postgres psql -q << SQLEOF\nDROP DATABASE IF EXISTS devis_menuiserie;\nDROP USER IF EXISTS ${DB_USER};\nCREATE USER ${DB_USER} WITH PASSWORD '${DB_PASSWORD}';\nCREATE DATABASE devis_menuiserie OWNER ${DB_USER};\nGRANT ALL PRIVILEGES ON DATABASE devis_menuiserie TO ${DB_USER};\nSQLEOF\n\necho -e \"${GREEN}⚙️ Configuration application...${NC}\"\nsudo -u devisapp bash << ENVEOF\ncd ~/Webapp-Devis-Chassis-Aluminium-v2\ncat > .env << EOF\nDATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@localhost/devis_menuiserie\nSECRET_KEY=${SECRET_KEY}\nENCRYPTION_KEY=${ENCRYPTION_KEY}\nFLASK_ENV=production\nEOF\nchmod 600 .env\n\n# Initialiser DB et créer users avec mots de passe personnalisés\nsource .venv/bin/activate\npython << PYEOF\nfrom app import create_app, db\nfrom app.models import User, Company\nfrom werkzeug.security import generate_password_hash\nimport sys\n\napp = create_app()\nwith app.app_context():\n    db.create_all()\n    \n    # Créer entreprise par défaut\n    company = Company.query.first()\n    if not company:\n        company = Company(\n            name=\"Entreprise par défaut\",\n            is_approved=True,\n            is_active=True\n        )\n        db.session.add(company)\n        db.session.commit()\n    \n    # Super Admin\n    if not User.query.filter_by(username='superadmin').first():\n        superadmin = User(\n            username='superadmin',\n            email='superadmin@devis.local',\n            password_hash=generate_password_hash('${SUPERADMIN_PASSWORD}'),\n            role='super_admin',\n            company_id=company.id,\n            is_active=True\n        )\n        db.session.add(superadmin)\n    \n    # Admin\n    if not User.query.filter_by(username='admin').first():\n        admin = User(\n            username='admin',\n            email='admin@devis.local',\n            password_hash=generate_password_hash('${ADMIN_PASSWORD}'),\n            role='admin',\n            company_id=company.id,\n            is_active=True\n        )\n        db.session.add(admin)\n    \n    db.session.commit()\n    print(\"✅ Base de données initialisée\")\nPYEOF\nENVEOF\n\necho -e \"${GREEN}🔧 Configuration service systemd...${NC}\"\ncat > /etc/systemd/system/devisapp.service << 'SERVICEEOF'\n[Unit]\nDescription=PWA Devis Menuiserie\nAfter=network.target postgresql.service\n\n[Service]\nType=notify\nUser=devisapp\nGroup=devisapp\nWorkingDirectory=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2\nEnvironment=\"PATH=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/.venv/bin\"\nExecStart=/home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/.venv/bin/gunicorn -w 4 -b 127.0.0.1:5000 --reuse-port main:app\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nSERVICEEOF\n\necho -e \"${GREEN}🌐 Configuration Nginx...${NC}\"\nSERVER_IP=$(hostname -I | awk '{print $1}')\ncat > /etc/nginx/sites-available/devisapp << NGINXEOF\nserver {\n    listen 80 default_server;\n    server_name ${SERVER_IP} _;\n    client_max_body_size 10M;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    location /static {\n        alias /home/devisapp/Webapp-Devis-Chassis-Aluminium-v2/app/static;\n        expires 30d;\n    }\n}\nNGINXEOF\n\nln -sf /etc/nginx/sites-available/devisapp /etc/nginx/sites-enabled/\nrm -f /etc/nginx/sites-enabled/default\nnginx -t -q\n\necho -e \"${GREEN}🔥 Configuration firewall...${NC}\"\nif command -v ufw &> /dev/null; then\n    ufw --force enable\n    ufw allow 22/tcp\n    ufw allow 80/tcp\n    ufw allow 443/tcp\nfi\n\necho -e \"${GREEN}🚀 Démarrage services...${NC}\"\nsystemctl daemon-reload\nsystemctl start devisapp\nsystemctl enable devisapp -q\nsystemctl restart nginx\n\nsleep 3\n\n# Sauvegarder credentials dans fichier sécurisé\nCRED_FILE=\"/root/.devisapp_credentials\"\ncat > ${CRED_FILE} << CREDEOF\n═══════════════════════════════════════════════════════════════\n  🔐 CREDENTIALS - PWA DEVIS MENUISERIE\n═══════════════════════════════════════════════════════════════\n\n📅 Date installation: $(date)\n🖥️  Serveur IP: ${SERVER_IP}\n\n─────────────────────────────────────────────────────────────\n\n🌐 ACCÈS APPLICATION\n   URL: http://${SERVER_IP}\n\n👑 SUPER ADMINISTRATEUR\n   Username: superadmin\n   Password: ${SUPERADMIN_PASSWORD}\n   Email: superadmin@devis.local\n\n👤 ADMINISTRATEUR\n   Username: admin\n   Password: ${ADMIN_PASSWORD}\n   Email: admin@devis.local\n\n─────────────────────────────────────────────────────────────\n\n🗄️  BASE DE DONNÉES POSTGRESQL\n   Database: devis_menuiserie\n   User: ${DB_USER}\n   Password: ${DB_PASSWORD}\n   \n   Connexion: psql -U ${DB_USER} -d devis_menuiserie\n\n─────────────────────────────────────────────────────────────\n\n🔑 CLÉS DE SÉCURITÉ\n   SECRET_KEY: ${SECRET_KEY}\n   ENCRYPTION_KEY: ${ENCRYPTION_KEY}\n\n─────────────────────────────────────────────────────────────\n\n⚙️  COMMANDES UTILES\n   Status:    sudo systemctl status devisapp\n   Restart:   sudo systemctl restart devisapp\n   Logs:      sudo journalctl -u devisapp -f\n   Nginx:     sudo systemctl status nginx\n\n─────────────────────────────────────────────────────────────\n\n⚠️  SÉCURITÉ\n   - Changez les mots de passe après première connexion\n   - Ce fichier est dans: ${CRED_FILE}\n   - Supprimez ce fichier après avoir noté les credentials\n\n═══════════════════════════════════════════════════════════════\nCREDEOF\n\nchmod 600 ${CRED_FILE}\n\n# Afficher résultat\nclear\necho -e \"${GREEN}\"\ncat << \"EOF\"\n╔════════════════════════════════════════════════════════════╗\n║                                                            ║\n║           ✅ INSTALLATION TERMINÉE AVEC SUCCÈS            ║\n║                                                            ║\n╚════════════════════════════════════════════════════════════╝\nEOF\necho -e \"${NC}\\n\"\n\ncat ${CRED_FILE}\n\necho -e \"\\n${YELLOW}📋 Credentials sauvegardés dans: ${CRED_FILE}${NC}\"\necho -e \"${YELLOW}   Commande pour les revoir: cat ${CRED_FILE}${NC}\\n\"\n\nif systemctl is-active --quiet devisapp; then\n    echo -e \"${GREEN}✅ Application démarrée avec succès${NC}\\n\"\nelse\n    echo -e \"${RED}❌ Erreur au démarrage - Voir les logs:${NC}\"\n    echo -e \"${YELLOW}   sudo journalctl -u devisapp -n 50${NC}\\n\"\nfi\n","size_bytes":10800},"app/i18n.py":{"content":"import json\nimport os\nfrom pathlib import Path\nfrom flask import session\n\nclass I18n:\n    def __init__(self, app=None):\n        self.translations = {}\n        self.default_language = 'fr'\n        self.locales_path = None\n        \n        if app:\n            self.init_app(app)\n    \n    def init_app(self, app):\n        self.locales_path = Path(app.root_path) / 'locales'\n        self.load_all_languages()\n        \n    def load_all_languages(self):\n        \"\"\"Scan and load all JSON language files from locales directory\"\"\"\n        if not self.locales_path or not self.locales_path.exists():\n            return\n        \n        for file_path in self.locales_path.glob('*.json'):\n            try:\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                    lang_code = data.get('language_code')\n                    if lang_code:\n                        self.translations[lang_code] = data\n            except Exception as e:\n                print(f\"Error loading language file {file_path}: {e}\")\n    \n    def get_available_languages(self):\n        \"\"\"Get list of available languages\"\"\"\n        return [\n            {\n                'code': code,\n                'name': data.get('language_name', code)\n            }\n            for code, data in self.translations.items()\n        ]\n    \n    def get_current_language(self):\n        \"\"\"Get current language from session\"\"\"\n        return session.get('language', self.default_language)\n    \n    def set_language(self, lang_code):\n        \"\"\"Set current language in session\"\"\"\n        if lang_code in self.translations:\n            session['language'] = lang_code\n            return True\n        return False\n    \n    def get_translations(self, lang_code=None):\n        \"\"\"Get all translations for a language\"\"\"\n        if lang_code is None:\n            lang_code = self.get_current_language()\n        return self.translations.get(lang_code, self.translations.get(self.default_language, {}))\n    \n    def add_language(self, file_path):\n        \"\"\"Add a new language from uploaded JSON file\"\"\"\n        try:\n            with open(file_path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n                \n            lang_code = data.get('language_code')\n            if not lang_code:\n                return False, \"Missing 'language_code' in JSON file\"\n            \n            # Save to locales directory\n            if not self.locales_path:\n                return False, \"Locales path not initialized\"\n            dest_path = self.locales_path / f\"{lang_code}.json\"\n            with open(dest_path, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n            \n            # Load into memory\n            self.translations[lang_code] = data\n            \n            return True, f\"Language '{lang_code}' added successfully\"\n        except json.JSONDecodeError:\n            return False, \"Invalid JSON format\"\n        except Exception as e:\n            return False, str(e)\n\ni18n = I18n()\n","size_bytes":3062},"app/routes/languages.py":{"content":"from flask import Blueprint, jsonify, request, session\nimport os\nimport tempfile\nfrom app.i18n import i18n\nfrom app.routes.auth import login_required\n\nbp = Blueprint('languages', __name__, url_prefix='/api/languages')\n\n@bp.route('/available', methods=['GET'])\ndef get_available_languages():\n    \"\"\"Get list of available languages\"\"\"\n    return jsonify(i18n.get_available_languages())\n\n@bp.route('/current', methods=['GET'])\ndef get_current_language():\n    \"\"\"Get current language\"\"\"\n    lang_code = i18n.get_current_language()\n    return jsonify({\n        'code': lang_code,\n        'translations': i18n.get_translations(lang_code)\n    })\n\n@bp.route('/set', methods=['POST'])\ndef set_language():\n    \"\"\"Set current language\"\"\"\n    data = request.get_json()\n    lang_code = data.get('language')\n    \n    if not lang_code:\n        return jsonify({'error': 'Language code required'}), 400\n    \n    if i18n.set_language(lang_code):\n        return jsonify({\n            'message': 'Language updated successfully',\n            'code': lang_code\n        })\n    else:\n        return jsonify({'error': 'Language not found'}), 404\n\n@bp.route('/upload', methods=['POST'])\n@login_required\ndef upload_language():\n    \"\"\"Upload a new language JSON file\"\"\"\n    # Check if user is admin or super_admin\n    role = session.get('role')\n    if role not in ['admin', 'super_admin']:\n        return jsonify({'error': 'Unauthorized'}), 403\n    \n    if 'file' not in request.files:\n        return jsonify({'error': 'No file provided'}), 400\n    \n    file = request.files['file']\n    \n    if file.filename == '' or file.filename is None:\n        return jsonify({'error': 'No file selected'}), 400\n    \n    if not file.filename or not file.filename.endswith('.json'):\n        return jsonify({'error': 'File must be a JSON file'}), 400\n    \n    try:\n        # Save to temporary file\n        temp_fd, temp_path = tempfile.mkstemp(suffix='.json')\n        os.close(temp_fd)\n        file.save(temp_path)\n        \n        # Add language\n        success, message = i18n.add_language(temp_path)\n        \n        # Clean up temp file\n        os.unlink(temp_path)\n        \n        if success:\n            return jsonify({\n                'message': message,\n                'languages': i18n.get_available_languages()\n            })\n        else:\n            return jsonify({'error': message}), 400\n            \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@bp.route('/translations/<lang_code>', methods=['GET'])\ndef get_translations(lang_code):\n    \"\"\"Get translations for a specific language\"\"\"\n    translations = i18n.get_translations(lang_code)\n    if translations:\n        return jsonify(translations)\n    else:\n        return jsonify({'error': 'Language not found'}), 404\n","size_bytes":2772},"app/services/__init__.py":{"content":"","size_bytes":0},"app/services/backup.py":{"content":"import os\nimport shutil\nimport subprocess\nfrom datetime import datetime\nfrom pathlib import Path\nimport json\nfrom flask import current_app\n\nclass BackupService:\n    \"\"\"Service de gestion des sauvegardes de base de données et fichiers critiques\"\"\"\n    \n    def __init__(self, backup_dir=None):\n        self.backup_dir = backup_dir or os.environ.get('BACKUP_DIR', 'backups')\n        Path(self.backup_dir).mkdir(parents=True, exist_ok=True)\n        self.catalog_file = os.path.join(self.backup_dir, 'backup_catalog.json')\n        \n    def get_database_type(self):\n        \"\"\"Détermine le type de base de données (SQLite ou PostgreSQL)\"\"\"\n        database_url = current_app.config.get('SQLALCHEMY_DATABASE_URI', '')\n        if database_url.startswith('sqlite'):\n            return 'sqlite'\n        elif database_url.startswith('postgresql'):\n            return 'postgresql'\n        return 'unknown'\n    \n    def create_backup(self, description=\"Backup manuel\"):\n        \"\"\"Crée une sauvegarde complète de la base de données\"\"\"\n        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        db_type = self.get_database_type()\n        \n        backup_info = {\n            'timestamp': timestamp,\n            'datetime': datetime.now().isoformat(),\n            'description': description,\n            'database_type': db_type,\n            'files': []\n        }\n        \n        try:\n            if db_type == 'sqlite':\n                backup_file = self._backup_sqlite(timestamp)\n                backup_info['files'].append(backup_file)\n            elif db_type == 'postgresql':\n                backup_file = self._backup_postgresql(timestamp)\n                backup_info['files'].append(backup_file)\n            else:\n                raise ValueError(f\"Type de base de données non supporté: {db_type}\")\n            \n            backup_info['success'] = True\n            backup_info['size'] = os.path.getsize(backup_file)\n            \n            self._update_catalog(backup_info)\n            self._cleanup_old_backups()\n            \n            return {\n                'success': True,\n                'backup_file': backup_file,\n                'timestamp': timestamp,\n                'size': backup_info['size']\n            }\n            \n        except Exception as e:\n            backup_info['success'] = False\n            backup_info['error'] = str(e)\n            self._update_catalog(backup_info)\n            raise\n    \n    def _backup_sqlite(self, timestamp):\n        \"\"\"Sauvegarde une base SQLite\"\"\"\n        database_url = current_app.config.get('SQLALCHEMY_DATABASE_URI', '')\n        db_path = database_url.replace('sqlite:///', '')\n        \n        if not os.path.exists(db_path):\n            raise FileNotFoundError(f\"Base de données SQLite introuvable: {db_path}\")\n        \n        backup_filename = f\"backup_sqlite_{timestamp}.db\"\n        backup_path = os.path.join(self.backup_dir, backup_filename)\n        \n        shutil.copy2(db_path, backup_path)\n        \n        return backup_path\n    \n    def _backup_postgresql(self, timestamp):\n        \"\"\"Sauvegarde une base PostgreSQL avec pg_dump\"\"\"\n        backup_filename = f\"backup_postgresql_{timestamp}.sql\"\n        backup_path = os.path.join(self.backup_dir, backup_filename)\n        \n        pg_host = os.environ.get('PGHOST', 'localhost')\n        pg_port = os.environ.get('PGPORT', '5432')\n        pg_user = os.environ.get('PGUSER')\n        pg_password = os.environ.get('PGPASSWORD')\n        pg_database = os.environ.get('PGDATABASE')\n        \n        if not all([pg_user, pg_password, pg_database]):\n            raise ValueError(\"Variables PostgreSQL manquantes (PGUSER, PGPASSWORD, PGDATABASE)\")\n        \n        env = os.environ.copy()\n        if pg_password:\n            env['PGPASSWORD'] = pg_password\n        \n        cmd = [\n            'pg_dump',\n            '-h', pg_host,\n            '-p', pg_port,\n            '-U', pg_user,\n            '-F', 'c',\n            '-f', backup_path,\n            pg_database\n        ]\n        \n        result = subprocess.run(cmd, env=env, capture_output=True, text=True)\n        \n        if result.returncode != 0:\n            raise RuntimeError(f\"Échec du backup PostgreSQL: {result.stderr}\")\n        \n        return backup_path\n    \n    def list_backups(self):\n        \"\"\"Liste toutes les sauvegardes disponibles\"\"\"\n        if not os.path.exists(self.catalog_file):\n            return []\n        \n        with open(self.catalog_file, 'r') as f:\n            catalog = json.load(f)\n        \n        return sorted(catalog, key=lambda x: x['datetime'], reverse=True)\n    \n    def restore_backup(self, backup_file):\n        \"\"\"Restaure une sauvegarde (à implémenter avec précaution)\"\"\"\n        if not os.path.exists(backup_file):\n            raise FileNotFoundError(f\"Fichier de sauvegarde introuvable: {backup_file}\")\n        \n        db_type = self.get_database_type()\n        \n        if db_type == 'sqlite':\n            return self._restore_sqlite(backup_file)\n        elif db_type == 'postgresql':\n            return self._restore_postgresql(backup_file)\n        else:\n            raise ValueError(f\"Type de base de données non supporté: {db_type}\")\n    \n    def _restore_sqlite(self, backup_file):\n        \"\"\"Restaure une base SQLite (ATTENTION: Requiert redémarrage de l'application)\"\"\"\n        database_url = current_app.config.get('SQLALCHEMY_DATABASE_URI', '')\n        db_path = database_url.replace('sqlite:///', '')\n        \n        backup_current = f\"{db_path}.before_restore_{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n        shutil.copy2(db_path, backup_current)\n        \n        shutil.copy2(backup_file, db_path)\n        \n        return {\n            'success': True, \n            'message': 'Base SQLite restaurée avec succès. REDÉMARRAGE DE L\\'APPLICATION REQUIS.',\n            'requires_restart': True\n        }\n    \n    def _restore_postgresql(self, backup_file):\n        \"\"\"Restaure une base PostgreSQL avec pg_restore\"\"\"\n        pg_host = os.environ.get('PGHOST', 'localhost')\n        pg_port = os.environ.get('PGPORT', '5432')\n        pg_user = os.environ.get('PGUSER')\n        pg_password = os.environ.get('PGPASSWORD')\n        pg_database = os.environ.get('PGDATABASE')\n        \n        env = os.environ.copy()\n        if pg_password:\n            env['PGPASSWORD'] = pg_password\n        \n        cmd = [\n            'pg_restore',\n            '-h', pg_host,\n            '-p', pg_port,\n            '-U', pg_user,\n            '-d', pg_database,\n            '--clean',\n            '--if-exists',\n            backup_file\n        ]\n        \n        result = subprocess.run(cmd, env=env, capture_output=True, text=True)\n        \n        if result.returncode != 0:\n            raise RuntimeError(f\"Échec de la restauration PostgreSQL: {result.stderr}\")\n        \n        return {'success': True, 'message': 'Base PostgreSQL restaurée avec succès'}\n    \n    def _update_catalog(self, backup_info):\n        \"\"\"Met à jour le catalogue des sauvegardes\"\"\"\n        catalog = []\n        if os.path.exists(self.catalog_file):\n            with open(self.catalog_file, 'r') as f:\n                catalog = json.load(f)\n        \n        catalog.append(backup_info)\n        \n        with open(self.catalog_file, 'w') as f:\n            json.dump(catalog, f, indent=2)\n    \n    def _cleanup_old_backups(self, keep_last=10):\n        \"\"\"Supprime les anciennes sauvegardes (conserve les N dernières)\"\"\"\n        backups = self.list_backups()\n        \n        if len(backups) <= keep_last:\n            return\n        \n        to_delete = backups[keep_last:]\n        \n        for backup in to_delete:\n            if backup.get('success') and backup.get('files'):\n                for file_path in backup['files']:\n                    if os.path.exists(file_path):\n                        os.remove(file_path)\n        \n        catalog = backups[:keep_last]\n        with open(self.catalog_file, 'w') as f:\n            json.dump(catalog, f, indent=2)\n    \n    def get_backup_stats(self):\n        \"\"\"Retourne des statistiques sur les sauvegardes\"\"\"\n        backups = self.list_backups()\n        \n        total_size = sum(b.get('size', 0) for b in backups if b.get('success'))\n        successful = len([b for b in backups if b.get('success')])\n        failed = len([b for b in backups if not b.get('success')])\n        \n        return {\n            'total_backups': len(backups),\n            'successful': successful,\n            'failed': failed,\n            'total_size_bytes': total_size,\n            'total_size_mb': round(total_size / (1024 * 1024), 2),\n            'latest_backup': backups[0] if backups else None\n        }\n","size_bytes":8651},"app/services/updater.py":{"content":"import os\nimport subprocess\nimport json\nfrom datetime import datetime\nfrom pathlib import Path\nfrom flask import current_app\nfrom .backup import BackupService\n\nclass UpdateService:\n    \"\"\"Service de mise à jour automatique depuis GitHub avec migration BD\n    \n    AVERTISSEMENT DE SÉCURITÉ:\n    - Ce service doit être utilisé uniquement par des super administrateurs de confiance\n    - L'utilisation en production nécessite des mesures de sécurité supplémentaires:\n      * Protection CSRF\n      * Ré-authentification avant mise à jour critique\n      * Rate limiting\n      * Validation stricte des URLs de repo\n      * Exécution asynchrone avec monitoring\n    - Recommandé: Utiliser un système CI/CD pour les déploiements production\n    \"\"\"\n    \n    def __init__(self, repo_url=None, branch=None):\n        self.repo_url = repo_url or os.environ.get(\n            'UPDATE_REPO_URL', \n            'https://github.com/moa-digitalagency/Webapp-Devis-Chassis-Aluminium-v2'\n        )\n        self.branch = branch or os.environ.get('UPDATE_BRANCH', 'main')\n        self.update_log_file = 'update_history.json'\n        self.backup_service = BackupService()\n        \n    def check_for_updates(self):\n        \"\"\"Vérifie si des mises à jour sont disponibles\"\"\"\n        try:\n            result = subprocess.run(\n                ['git', 'fetch', 'origin'],\n                capture_output=True,\n                text=True,\n                timeout=30\n            )\n            \n            if result.returncode != 0:\n                return {\n                    'success': False,\n                    'error': f\"Erreur lors de la vérification: {result.stderr}\"\n                }\n            \n            result = subprocess.run(\n                ['git', 'rev-list', f'HEAD..origin/{self.branch}', '--count'],\n                capture_output=True,\n                text=True\n            )\n            \n            commits_behind = int(result.stdout.strip()) if result.returncode == 0 else 0\n            \n            current_commit = subprocess.run(\n                ['git', 'rev-parse', 'HEAD'],\n                capture_output=True,\n                text=True\n            ).stdout.strip()\n            \n            latest_commit = subprocess.run(\n                ['git', 'rev-parse', f'origin/{self.branch}'],\n                capture_output=True,\n                text=True\n            ).stdout.strip()\n            \n            return {\n                'success': True,\n                'updates_available': commits_behind > 0,\n                'commits_behind': commits_behind,\n                'current_commit': current_commit[:8],\n                'latest_commit': latest_commit[:8]\n            }\n            \n        except subprocess.TimeoutExpired:\n            return {'success': False, 'error': 'Timeout lors de la vérification'}\n        except Exception as e:\n            return {'success': False, 'error': str(e)}\n    \n    def check_git_status(self):\n        \"\"\"Vérifie que le dépôt Git est propre\"\"\"\n        result = subprocess.run(\n            ['git', 'status', '--porcelain'],\n            capture_output=True,\n            text=True\n        )\n        \n        if result.stdout.strip():\n            return {\n                'clean': False,\n                'modified_files': result.stdout.strip().split('\\n')\n            }\n        \n        return {'clean': True}\n    \n    def perform_update(self, auto_backup=True, auto_migrate=True):\n        \"\"\"Effectue la mise à jour complète avec backup et migration\"\"\"\n        update_log = {\n            'timestamp': datetime.now().isoformat(),\n            'steps': [],\n            'success': False\n        }\n        \n        try:\n            step_log = {'step': 'check_git_status', 'success': False}\n            git_status = self.check_git_status()\n            \n            if not git_status['clean']:\n                step_log['error'] = 'Le dépôt Git a des modifications locales'\n                step_log['modified_files'] = git_status['modified_files']\n                update_log['steps'].append(step_log)\n                raise RuntimeError(\n                    \"Modifications locales détectées. Veuillez les valider ou les annuler.\"\n                )\n            step_log['success'] = True\n            update_log['steps'].append(step_log)\n            \n            if auto_backup:\n                step_log = {'step': 'create_backup', 'success': False}\n                backup_result = self.backup_service.create_backup(\n                    description=\"Backup automatique avant mise à jour\"\n                )\n                step_log['backup_file'] = backup_result['backup_file']\n                step_log['success'] = True\n                update_log['steps'].append(step_log)\n            \n            step_log = {'step': 'git_pull', 'success': False}\n            result = subprocess.run(\n                ['git', 'pull', 'origin', self.branch],\n                capture_output=True,\n                text=True,\n                timeout=60\n            )\n            \n            if result.returncode != 0:\n                step_log['error'] = result.stderr\n                update_log['steps'].append(step_log)\n                raise RuntimeError(f\"Échec du git pull: {result.stderr}\")\n            \n            step_log['output'] = result.stdout\n            step_log['success'] = True\n            update_log['steps'].append(step_log)\n            \n            step_log = {'step': 'install_dependencies', 'success': False}\n            result = subprocess.run(\n                ['pip', 'install', '-r', 'requirements.txt', '--upgrade'],\n                capture_output=True,\n                text=True,\n                timeout=300\n            )\n            \n            if result.returncode != 0:\n                step_log['error'] = result.stderr\n                update_log['steps'].append(step_log)\n                raise RuntimeError(f\"Échec de l'installation des dépendances: {result.stderr}\")\n            \n            step_log['success'] = True\n            update_log['steps'].append(step_log)\n            \n            if auto_migrate:\n                step_log = {'step': 'database_migration', 'success': False}\n                migration_result = self._run_database_migration()\n                step_log.update(migration_result)\n                step_log['success'] = migration_result.get('success', False)\n                update_log['steps'].append(step_log)\n                \n                if not step_log['success']:\n                    raise RuntimeError(f\"Échec de la migration: {migration_result.get('error')}\")\n            \n            update_log['success'] = True\n            update_log['message'] = 'Mise à jour effectuée avec succès'\n            \n            self._log_update(update_log)\n            \n            return update_log\n            \n        except Exception as e:\n            update_log['error'] = str(e)\n            self._log_update(update_log)\n            raise\n    \n    def _run_database_migration(self):\n        \"\"\"Exécute les migrations de base de données avec Flask-Migrate\"\"\"\n        try:\n            result = subprocess.run(\n                ['flask', 'db', 'upgrade'],\n                capture_output=True,\n                text=True,\n                timeout=120\n            )\n            \n            if result.returncode != 0:\n                if 'No migrations to apply' in result.stderr or 'No migrations to apply' in result.stdout:\n                    return {\n                        'success': True,\n                        'message': 'Aucune migration à appliquer',\n                        'output': result.stdout\n                    }\n                \n                return {\n                    'success': False,\n                    'error': result.stderr,\n                    'output': result.stdout\n                }\n            \n            return {\n                'success': True,\n                'message': 'Migrations appliquées avec succès',\n                'output': result.stdout\n            }\n            \n        except subprocess.TimeoutExpired:\n            return {\n                'success': False,\n                'error': 'Timeout lors de la migration'\n            }\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def rollback_update(self, commit_hash):\n        \"\"\"Annule une mise à jour en revenant à un commit précédent\"\"\"\n        try:\n            backup_result = self.backup_service.create_backup(\n                description=f\"Backup avant rollback vers {commit_hash}\"\n            )\n            \n            result = subprocess.run(\n                ['git', 'reset', '--hard', commit_hash],\n                capture_output=True,\n                text=True\n            )\n            \n            if result.returncode != 0:\n                raise RuntimeError(f\"Échec du rollback: {result.stderr}\")\n            \n            subprocess.run(\n                ['pip', 'install', '-r', 'requirements.txt'],\n                capture_output=True,\n                text=True,\n                timeout=300\n            )\n            \n            return {\n                'success': True,\n                'message': f'Rollback vers {commit_hash} effectué',\n                'backup_file': backup_result['backup_file']\n            }\n            \n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e)\n            }\n    \n    def get_update_history(self):\n        \"\"\"Récupère l'historique des mises à jour\"\"\"\n        if not os.path.exists(self.update_log_file):\n            return []\n        \n        with open(self.update_log_file, 'r') as f:\n            history = json.load(f)\n        \n        return sorted(history, key=lambda x: x['timestamp'], reverse=True)\n    \n    def _log_update(self, update_log):\n        \"\"\"Enregistre une mise à jour dans l'historique\"\"\"\n        history = []\n        if os.path.exists(self.update_log_file):\n            with open(self.update_log_file, 'r') as f:\n                history = json.load(f)\n        \n        history.append(update_log)\n        \n        if len(history) > 50:\n            history = history[-50:]\n        \n        with open(self.update_log_file, 'w') as f:\n            json.dump(history, f, indent=2)\n    \n    def get_current_version(self):\n        \"\"\"Récupère la version actuelle (dernier commit)\"\"\"\n        try:\n            commit = subprocess.run(\n                ['git', 'rev-parse', 'HEAD'],\n                capture_output=True,\n                text=True\n            ).stdout.strip()\n            \n            date = subprocess.run(\n                ['git', 'log', '-1', '--format=%ci'],\n                capture_output=True,\n                text=True\n            ).stdout.strip()\n            \n            message = subprocess.run(\n                ['git', 'log', '-1', '--format=%s'],\n                capture_output=True,\n                text=True\n            ).stdout.strip()\n            \n            return {\n                'commit': commit[:8],\n                'full_commit': commit,\n                'date': date,\n                'message': message,\n                'branch': self.branch\n            }\n            \n        except Exception as e:\n            return {\n                'error': str(e),\n                'commit': 'unknown'\n            }\n","size_bytes":11358},"app/static/js/i18n.js":{"content":"// I18n Client-side Manager\nclass I18nManager {\n    constructor() {\n        this.currentLanguage = 'fr';\n        this.translations = {};\n        this.availableLanguages = [];\n        this.init();\n    }\n\n    async init() {\n        await this.loadAvailableLanguages();\n        await this.loadCurrentLanguage();\n    }\n\n    async loadAvailableLanguages() {\n        try {\n            const response = await fetch('/api/languages/available');\n            if (response.ok) {\n                this.availableLanguages = await response.json();\n            }\n        } catch (error) {\n            console.error('Error loading available languages:', error);\n        }\n    }\n\n    async loadCurrentLanguage() {\n        try {\n            const response = await fetch('/api/languages/current');\n            if (response.ok) {\n                const data = await response.json();\n                this.currentLanguage = data.code;\n                this.translations = data.translations;\n                this.updatePage();\n            }\n        } catch (error) {\n            console.error('Error loading current language:', error);\n        }\n    }\n\n    async setLanguage(langCode) {\n        try {\n            const response = await fetch('/api/languages/set', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ language: langCode })\n            });\n\n            if (response.ok) {\n                await this.loadCurrentLanguage();\n                return true;\n            }\n        } catch (error) {\n            console.error('Error setting language:', error);\n        }\n        return false;\n    }\n\n    t(key) {\n        const keys = key.split('.');\n        let value = this.translations;\n        \n        for (const k of keys) {\n            if (value && typeof value === 'object' && k in value) {\n                value = value[k];\n            } else {\n                return key;\n            }\n        }\n        \n        return value || key;\n    }\n\n    updatePage() {\n        // Update all elements with data-i18n attribute\n        document.querySelectorAll('[data-i18n]').forEach(element => {\n            const key = element.getAttribute('data-i18n');\n            const translation = this.t(key);\n            \n            if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') {\n                element.placeholder = translation;\n            } else {\n                element.textContent = translation;\n            }\n        });\n\n        // Update all elements with data-i18n-title attribute\n        document.querySelectorAll('[data-i18n-title]').forEach(element => {\n            const key = element.getAttribute('data-i18n-title');\n            element.title = this.t(key);\n        });\n    }\n\n    createLanguageSwitcher() {\n        const switcher = document.createElement('div');\n        switcher.className = 'language-switcher';\n        switcher.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 1000;\n            background: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n            padding: 8px;\n        `;\n\n        const select = document.createElement('select');\n        select.className = 'form-control';\n        select.style.cssText = `\n            border: 1px solid #ddd;\n            border-radius: 6px;\n            padding: 6px 12px;\n            font-size: 14px;\n            cursor: pointer;\n        `;\n\n        this.availableLanguages.forEach(lang => {\n            const option = document.createElement('option');\n            option.value = lang.code;\n            option.textContent = lang.name;\n            option.selected = lang.code === this.currentLanguage;\n            select.appendChild(option);\n        });\n\n        select.addEventListener('change', async (e) => {\n            const success = await this.setLanguage(e.target.value);\n            if (success) {\n                location.reload();\n            }\n        });\n\n        switcher.appendChild(select);\n        return switcher;\n    }\n\n    async uploadLanguageFile(file) {\n        const formData = new FormData();\n        formData.append('file', file);\n\n        try {\n            const response = await fetch('/api/languages/upload', {\n                method: 'POST',\n                body: formData\n            });\n\n            const data = await response.json();\n            \n            if (response.ok) {\n                await this.loadAvailableLanguages();\n                return { success: true, message: data.message };\n            } else {\n                return { success: false, error: data.error };\n            }\n        } catch (error) {\n            return { success: false, error: error.message };\n        }\n    }\n}\n\n// Global instance\nconst i18n = new I18nManager();\n\n// Add language switcher to page when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n    // Only add switcher on admin pages (not login)\n    if (!window.location.pathname.includes('login')) {\n        const switcher = i18n.createLanguageSwitcher();\n        document.body.appendChild(switcher);\n    }\n});\n","size_bytes":5201}},"version":1}